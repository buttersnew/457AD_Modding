from header_common import *
from header_operations import *
from header_mission_templates import *
from header_animations import *
from header_sounds import *
from header_music import *
from header_items import *
from header_skills import *
from module_constants import *
from module_skills import *

from compiler import *
####################################################################################################################
#   Each mission-template is a tuple that contains the following fields:
#  1) Mission-template id (string): used for referencing mission-templates in other files.
#     The prefix mt_ is automatically added before each mission-template id
#
#  2) Mission-template flags (int): See header_mission-templates.py for a list of available flags
#  3) Mission-type(int): Which mission types this mission template matches.
#     For mission-types to be used with the default party-meeting system,
#     this should be 'charge' or 'charge_with_ally' otherwise must be -1.
#
#  4) Mission description text (string).
#  5) List of spawn records (list): Each spawn record is a tuple that contains the following fields:
#    5.1) entry-no: Troops spawned from this spawn record will use this entry
#    5.2) spawn flags.
#    5.3) alter flags. which equipment will be overriden
#    5.4) ai flags.
#    5.5) Number of troops to spawn.
#    5.6) list of equipment to add to troops spawned from here (maximum 8).
#  6) List of triggers (list).
#     See module_triggers.py for infomation about triggers.
#
#  Please note that mission templates is work in progress and can be changed in the future versions.
#
####################################################################################################################

#SB : add new disguise sets, make sure none of them have high difficulty
# the new flags now also have af_override_everything, so include footwear
pilgrim_disguise = [itm_roman_civilian_hood_closed_3,itm_roman_peasant_tunic_10,itm_spear,itm_throwing_daggers,itm_sword_medieval_d_long,itm_wrapping_boots]
farmer_disguise = [itm_woolen_cap_2, itm_roman_peasant_tunic_1, itm_cleaver, itm_battle_fork, itm_stones, itm_wrapping_boots]
hunter_disguise = [itm_hunting_bow,itm_barbed_arrows, itm_roman_civilian_hood_closed_2, itm_leather_gloves, itm_roman_peasant_tunic_10, itm_long_seax_4, itm_wrapping_boots]
merchant_disguise = [itm_deurne_campagi_3,itm_roman_peasant_tunic_5,itm_pannonian_cap_6,itm_sword_khergit_2]
guard_disguise = [itm_deurne_campagi_1,itm_battered_mail_1_cloak,itm_narona_helmet_mail,itm_tab_shield_round_d,itm_sword_medieval_a,itm_war_spear]
bard_disguise = [itm_deurne_campagi_2,itm_lyre,itm_coptic_tunic_4,itm_winged_mace]

#note that these are usually male clothing, especially farmer_disguise, need some female ones as well

af_castle_lord = af_override_horse | af_override_weapons| af_require_civilian

#MADSCI VC SEA BATTLE
common_maritime_prepare_cb_weather =(
  ti_before_mission_start, 0, ti_once, [],
  [
    (store_current_scene, ":cur_scene"),
    (try_begin),
      (eq, ":cur_scene", "scn_sea_battle"),
      (store_random_in_range, "$beaufort", 3, 7),
      (scene_set_day_time, 18),
      (store_random_in_range, ":rand", 0, 25),
      (set_global_cloud_amount, ":rand"),
      (assign, "$lightning_cycle", -1),
      (play_sound,"snd_ambient_sea_loop"),
    (else_try),
      # (eq, ":cur_scene", "scn_sea_battle_storm"),
      (scene_set_day_time, 20),
      #(set_skybox, 4, 5),
      (set_startup_sun_light, 0, 0, 0),
      (set_startup_ambient_light, 1, 2, 5),
      (set_startup_ground_ambient_light, 1, 2, 5),

      (store_random_in_range, "$beaufort", 7, 12),

      #(store_random_in_range, ":rand", 60, 101),
      (set_global_cloud_amount, 100),
      (assign, "$lightning_cycle", 0),
      (set_rain, 1, 300),
      (set_fog_distance, 800, 0x0f0f0f),
      (play_sound,"snd_heavy_rain_sea_loop"),
    (end_try),
    (store_last_sound_channel, "$ambiance_channel"),
])
common_maritime_randomize_spawn_points =(
  ti_on_agent_spawn, 0, ti_once, [],
  [
    (store_current_scene, ":cur_scene"),
    (eq, ":cur_scene", "scn_sea_battle"),

    (set_fixed_point_multiplier, 1),
    #(store_random_in_range, ":fleet_distance", -20000, -30000),
    #(assign, ":fleet_distance", -10000),
    (assign, ":fleet_distance",   -5000),

    (assign, reg7, "$startup_battle_size"),

    (try_begin),
      (gt, "$startup_battle_size", 0),
      (val_min, "$startup_battle_size", 300),
      (store_mul, ":extra_distance", "$startup_battle_size", 50),
    (else_try),
      (store_random_in_range, ":extra_distance", 0, 15000),
    (end_try),
    (val_sub, ":fleet_distance", ":extra_distance"),

    (try_begin),
      (ge, "$vc_debug_mode", 1),
      (assign, reg8, ":fleet_distance"),
      (display_message, "@{!}TEST: startup_battle_size = {reg7}, fleet_distance = {reg8}"),
    (end_try),

    (assign, ":ship_distance", 6000),
    (store_mul, ":neg_ship_distance", ":ship_distance", -1),
    (assign, ":offset", 4000),
    (store_mul, ":neg_offset", ":offset", -1),

    (init_position, pos1),
    (position_set_x, pos1, 420),
    (position_set_y, pos1, 420),	#middle of scene
    (position_set_z, pos1, 0),
    (store_random_in_range, ":rot", 0, 360),
    (position_rotate_z, pos1, ":rot"),
    (copy_position, pos50, pos1),
    (position_rotate_z, pos1, 180),
    (copy_position, pos60, pos1),

    #TEAM 0
    # line1: center
    (position_move_x, pos50, ":fleet_distance"),
    (position_rotate_z, pos50, -90),
    (copy_position, pos52, pos50),
    (copy_position, pos53, pos50),
    (entry_point_set_position, 51, pos50),

    # line1: flank1
    (position_move_x, pos52, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos52, ":x_offset"),
    (position_move_y, pos52, ":y_offset"),
    (entry_point_set_position, 52, pos52),
    (position_move_x, pos52, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos52, ":x_offset"),
    (position_move_y, pos52, ":y_offset"),
    (entry_point_set_position, 54, pos52),
    # line1: flank2
    (position_move_x, pos53, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos53, ":x_offset"),
    (position_move_y, pos53, ":y_offset"),
    (entry_point_set_position, 53, pos53),
    (position_move_x, pos53, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos53, ":x_offset"),
    (position_move_y, pos53, ":y_offset"),
    (entry_point_set_position, 55, pos53),

    # line2: center
    (position_move_y, pos50, -10000),
    (copy_position, pos57, pos50),
    (copy_position, pos58, pos50),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos53, ":x_offset"),
    (position_move_y, pos53, ":y_offset"),
    (entry_point_set_position, 56, pos50),
    # line2: flank1
    (position_move_x, pos57, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos57, ":x_offset"),
    (position_move_y, pos57, ":y_offset"),
    (entry_point_set_position, 57, pos57),
    (position_move_x, pos57, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos57, ":x_offset"),
    (position_move_y, pos57, ":y_offset"),
    (entry_point_set_position, 59, pos57),
    # line2: flank2
    (position_move_x, pos58, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos58, ":x_offset"),
    (position_move_y, pos58, ":y_offset"),
    (entry_point_set_position, 58, pos58),
    (position_move_x, pos58, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos58, ":x_offset"),
    (position_move_y, pos58, ":y_offset"),
    (entry_point_set_position, 60, pos58),

    #TEAM 1
    # line1: center
    (position_move_x, pos60, ":fleet_distance"),
    (position_rotate_z, pos60, -90),
    (copy_position, pos62, pos60),
    (copy_position, pos63, pos60),
    (entry_point_set_position, 61, pos60),

    # line1: flank1
    (position_move_x, pos62, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos62, ":x_offset"),
    (position_move_y, pos62, ":y_offset"),
    (entry_point_set_position, 62, pos62),
    (position_move_x, pos62, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos62, ":x_offset"),
    (position_move_y, pos62, ":y_offset"),
    (entry_point_set_position, 64, pos62),
    # line1: flank2
    (position_move_x, pos63, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos63, ":x_offset"),
    (position_move_y, pos63, ":y_offset"),
    (entry_point_set_position, 63, pos63),
    (position_move_x, pos63, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos63, ":x_offset"),
    (position_move_y, pos63, ":y_offset"),
    (entry_point_set_position, 65, pos63),

    # line2: center
    (position_move_y, pos60, -10000),
    (copy_position, pos17, pos60),
    (copy_position, pos18, pos60),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos60, ":x_offset"),
    (position_move_y, pos60, ":y_offset"),
    (entry_point_set_position, 66, pos60),
    # line2: flank1
    (position_move_x, pos17, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos17, ":x_offset"),
    (position_move_y, pos17, ":y_offset"),
    (entry_point_set_position, 67, pos17),
    (position_move_x, pos17, ":ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos17, ":x_offset"),
    (position_move_y, pos17, ":y_offset"),
    (entry_point_set_position, 69, pos17),
    # line2: flank2
    (position_move_x, pos18, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos18, ":x_offset"),
    (position_move_y, pos18, ":y_offset"),
    (entry_point_set_position, 68, pos18),
    (position_move_x, pos18, ":neg_ship_distance"),
    (store_random_in_range, ":x_offset", ":neg_offset", ":offset"),
    (store_random_in_range, ":y_offset", ":neg_offset", ":offset"),
    (position_move_x, pos18, ":x_offset"),
    (position_move_y, pos18, ":y_offset"),
    (entry_point_set_position, 70, pos18),

    (set_fixed_point_multiplier, 100),

])
common_maritime_spawn =(
  ti_on_agent_spawn, 0, 0, [],
  [

    (store_trigger_param_1, ":agent"),
    (agent_is_human,":agent"),
    (agent_ai_set_always_attack_in_melee, ":agent", 1),
    (agent_get_team  , ":agent_team", ":agent"),
    #(agent_get_party_id, ":agent_party", ":agent"), #new!
    (try_begin),

      # 1. CONDITIONS
      (assign, ":team_0_allowed", 0),
      (try_begin),
        (eq, ":agent_team", 0),
        (neq, "$coastal_battle", 1),	# means: sea battle
        (assign, ":team_0_allowed", 1),
      (end_try),
      (this_or_next|eq, ":agent_team", 1),			# TEST!!!
      (eq, ":team_0_allowed", 1),			# TEST!!!

      # 2. GET DATA
      (try_begin),
        (eq, ":agent_team", 0),
        (assign, ":curr_team_agent_counter", "$team_0_agent_counter"),
        (assign, ":curr_team_last_spawned_ship", "$last_spawned_ship_team_0"),
        (assign, ":curr_team_ship_counter", "$team_0_ship_counter"),
        (assign, ":quest", "qst_team_0_ships"),#new!
        (copy_position, pos0, pos50),
      (else_try),
        (assign, ":curr_team_agent_counter", "$team_1_agent_counter"),
        (assign, ":curr_team_last_spawned_ship", "$last_spawned_ship_team_1"),
        (assign, ":curr_team_ship_counter", "$team_1_ship_counter"),
        (assign, ":quest", "qst_team_1_ships"),#new!
        (copy_position, pos0, pos60),
      (end_try),

(scene_prop_get_slot, ":last_ship_type", ":curr_team_last_spawned_ship", scene_prop_ship_type),  #madsci make duplicate?

      # 3. SPAWN A SHIP
      (try_begin),
        (le, ":curr_team_agent_counter", 0),

        (try_begin),	# Getting Ships
          (store_add, ":ship_type_slot", ":curr_team_ship_counter", slot_quest_1_ship_type),
          (store_add, ":ship_cond_slot", ":curr_team_ship_counter", slot_quest_1_ship_cond),
          (store_add, ":ship_prop_slot", ":curr_team_ship_counter", slot_quest_1_ship_prop),
          (quest_get_slot, ":ship_type", ":quest", ":ship_type_slot"),
          (quest_get_slot, ":ship_quality", ":quest", ":ship_cond_slot"),
          (quest_get_slot, ":ship_propertys", ":quest", ":ship_prop_slot"),
        (end_try),

        (try_begin),
          (this_or_next|neg|is_between, ":ship_type", 1, 9),	# There are only 6 ship types
          (neg|is_between, ":ship_quality", 5, 101),
		(try_begin),
		(gt, ":last_ship_type", 0),
          	(assign, ":ship_type", ":last_ship_type"), #madsci duplicate last used ship if possible
		#(display_message, "@Found ship type for team {reg9}."),
		(else_try),
		(assign, ":ship_type", ship_type_karvi),
		#(display_message, "@Spawning Karvi for team {reg9}."),
		(try_end),
          (store_random_in_range, ":ship_quality", 75, 100),
          (store_random_in_range, ":ship_propertys", 1, 4),
          (assign, reg9, ":agent_team"),
          #(ge, "$cheat_mode", 1),
        (end_try),

        #(display_message,"@{!}Conditions_for_ship_spawning_fullfilled!", 0xFFADD6FF),
        (val_add, ":curr_team_ship_counter", 1), #!
        (try_begin),
          (eq, ":agent_team", 0),
          (store_add, ":entry_no", 50, ":curr_team_ship_counter"),
          (entry_point_get_position, pos1, ":entry_no"),
        (else_try),
          (store_add, ":entry_no", 60, ":curr_team_ship_counter"),
          (entry_point_get_position, pos1, ":entry_no"),
        (end_try),
        (position_rotate_z, pos1, 90),				# correkt angle
        #(position_set_z, pos0, -80),				# high of the ship
        (call_script, "script_calculate_rocking_to_pos1"),# NEW!
        (set_spawn_position, pos1),
        (call_script, "script_spawn_ship", ":ship_type", ":ship_propertys"),
        (assign, ":curr_team_last_spawned_ship", reg0),
        # try fixing VC-1351 begin
        # (prop_instance_get_position, pos1,  ":curr_team_last_spawned_ship"),
        # (call_script, "script_calculate_rocking_to_pos1"),
        # (prop_instance_set_position, ":curr_team_last_spawned_ship", pos1),	#because it looks like the spawn point does not care about rotation...
        # (scene_prop_get_slot, ":ship_main_instance", ":curr_team_last_spawned_ship", scene_prop_main_instance),
        # (prop_instance_set_position, ":ship_main_instance", pos1),
        # try fixing VC-1351 end
        (scene_prop_set_slot, ":curr_team_last_spawned_ship", scene_prop_quality, ":ship_quality"), ### in %
        (scene_prop_set_slot, ":curr_team_last_spawned_ship", scene_prop_ship_number, ":curr_team_ship_counter"),

        (call_script, "script_check_player_ship"),#VC-3343
      (try_end),

      # 4. SPAWN A AGENT
      (prop_instance_get_position, pos1,  ":curr_team_last_spawned_ship"),
      (call_script, "script_give_agent_position_on_ship", ":curr_team_agent_counter", ":curr_team_last_spawned_ship"),
      (agent_set_position, ":agent", pos4),
      (agent_set_slot, ":agent", slot_agent_on_ship, ":curr_team_last_spawned_ship"),
      (agent_set_slot, ":agent", slot_agent_position_on_ship, ":curr_team_agent_counter"),
      #(agent_set_division, ":agent", ":curr_team_ship_counter"),	#NEW:ORDERS!!!
      (val_add, ":curr_team_agent_counter", 1),

      (try_begin),		# Give crew stones (Brustwarzenlenny)
        (agent_is_non_player, ":agent"),
        (agent_get_ammo, ":ammo", ":agent", 0),
        (le, ":ammo", 0),
        (agent_equip_item, ":agent", "itm_stones"),
      (try_end),

      (try_begin),
        (scene_prop_get_slot, ":ship_type", ":curr_team_last_spawned_ship", scene_prop_ship_type),
        (call_script, "script_get_ship_properties", ":ship_type"),
        (ge, ":curr_team_agent_counter", reg6),	# reg6= max_crew of ship
        (assign, ":curr_team_agent_counter", 0),
      (try_end),

      # 5. SET DATA
      (try_begin),
        (eq, ":agent_team", 0),
        (assign, "$team_0_agent_counter", ":curr_team_agent_counter"),
        (assign, "$last_spawned_ship_team_0", ":curr_team_last_spawned_ship"),
        (assign, "$team_0_ship_counter", ":curr_team_ship_counter"),
        (copy_position, pos50, pos0),
      (else_try),
        (assign, "$team_1_agent_counter", ":curr_team_agent_counter"),
        (assign, "$last_spawned_ship_team_1", ":curr_team_last_spawned_ship"),
        (assign, "$team_1_ship_counter", ":curr_team_ship_counter"),
        (copy_position, pos60, pos0),
      (end_try),
    (try_end),
])
common_maritime_ui =(
  1, 0, 0, [],[

    (try_begin), #presentacion naval
      (neg|is_presentation_active, "prsnt_battle"),
      (neg|is_presentation_active, "prsnt_order_display"),
      (neg|is_presentation_active, "prsnt_naval_ui"),
      (neq, "$player_ship_number", -1),
      (start_presentation, "prsnt_naval_ui"),
    (try_end),
])
common_maritime_reinforcements =(
  1, 0, 0, [],[

    # ACCORDING REINFORCEMENT
    (try_begin),
      (store_mission_timer_a,":mission_time"),
      (ge,":mission_time",10),
      (try_begin),
        # TEAM 1
        (lt,"$attacker_reinforcement_stage", "$g_attacker_reinforcement_limit"),
        (store_normalized_team_count,":num_team_1", 1),
        (lt,":num_team_1", 30),
        (assign, "$team_1_agent_counter", 0),
        (add_reinforcements_to_entry,2,7),	#! was 3
        (val_add,"$attacker_reinforcement_stage",1),
      (try_end),
      (try_begin),
        # TEAM 0
        (lt,"$defender_reinforcement_stage", "$g_defender_reinforcement_limit"),
        (store_normalized_team_count,":num_team_0", 0),
        (lt,":num_team_0", 30),
        (assign, "$team_0_agent_counter", 0),
        (add_reinforcements_to_entry,0,7),
        (val_add,"$defender_reinforcement_stage",1),
      (try_end),
    (try_end),

])
common_maritime_drowning =(
  1, 0, 0,
  [
    (store_mission_timer_a, ":cur_time"),
    (gt, ":cur_time", 5),
    ],[
    # ACCORDING DROWNING
    (set_fixed_point_multiplier, 100),
    (try_for_agents,":agent"),
      (agent_is_alive,":agent"),
      (agent_is_human,":agent"),
      (agent_get_position,pos6,":agent"),
      (try_begin),
        (position_get_z, ":deep", pos6),
        (lt, ":deep", -200),
        (try_begin),
          # # new:
          # (neg|game_in_multiplayer_mode),
          # (agent_is_non_player, ":agent"),
          # # (remove_agent, ":agent"),
          # (agent_fade_out, ":agent"),
          # (else_try),
          (agent_is_non_player, ":agent"),
          (agent_set_hit_points, ":agent", 0, 1),
          (agent_set_slot, ":agent", slot_agent_vc_wounded, 1),
          (agent_deliver_damage_to_agent, ":agent", ":agent" ,1),
        (else_try),
          (agent_set_hit_points, ":agent", 0, 1),
          (agent_deliver_damage_to_agent, ":agent", ":agent" ,1),
          #(mission_cam_animate_to_screen_color, 0xEE35586C, 1000),	# off for Moto death cam
        (end_try),

      (else_try),
        #(eq, "$coastal_battle", 0),	# means: sea battle
        (get_player_agent_no, ":player_agent"),
        (neq, ":agent", ":player_agent"),
        (agent_get_slot, ":agent_ship" , ":agent", slot_agent_on_ship),
        (neg|scene_prop_slot_eq, ":agent_ship", scene_prop_boarding_progress, -1),	#new for VC-1865
        (try_begin),
          (neq, ":agent_ship", 0),
          (prop_instance_get_position, pos7, ":agent_ship"),
          (get_distance_between_positions, ":distance", pos6, pos7),
          (scene_prop_get_slot, ":size", ":agent_ship", scene_prop_distance_to_front),
          (val_add, ":size", 100),
          (gt, ":distance", ":size"),
          # (agent_fade_out, ":agent"),
          (agent_set_slot, ":agent", slot_agent_vc_wounded, 1),
          (agent_deliver_damage_to_agent,":agent" ,":agent" ,1000),
        (else_try),
          (eq, "$coastal_battle", 0),	# means: sea battle
          (assign, ":life", 0),
          #(scene_prop_get_num_instances, ":number_of_ships", "spr_dyn_ship_substrate"),
          (try_for_range,":ship_number", 0, "$number_of_ships_global"),
            (scene_prop_get_instance, ":ship_instance", "spr_dyn_ship_substrate", ":ship_number"),
            (prop_instance_get_position, pos7, ":ship_instance"),
            (get_distance_between_positions, ":distance", pos6, pos7),
            (scene_prop_get_slot, ":size", ":ship_instance", scene_prop_distance_to_front),
            (val_add, ":size", 100),
            (lt, ":distance", ":size"),
            (assign, ":life", 1),
          (end_try),
          (try_begin),
            (neq, ":life", 1),
            # (agent_fade_out, ":agent"),
           (agent_set_slot, ":agent", slot_agent_vc_wounded, 1),
            (agent_deliver_damage_to_agent,":agent" ,":agent" ,1000),
          (end_try),
        (end_try),
      (end_try),
    (end_try),
])
common_maritime_commands =(
  0, 0, 0, [],[

    (try_begin),
      # CONDTIOION
      (neq, "$block_player_ship_control", 1),

      # GET DATA
      (gt, "$player_ship_number", -1),
      (get_player_agent_no, ":agent"),
      (gt, ":agent", -1),	# for motos camera
      (agent_is_alive,":agent"),
      (scene_prop_get_instance, ":ship_instance", "spr_dyn_ship_substrate", "$player_ship_number"),
      (scene_prop_get_slot, ":sail", ":ship_instance", 6),
      (scene_prop_get_slot, ":rowing", ":ship_instance", 7),
      (scene_prop_get_slot, ":rudder", ":ship_instance", 8),

      (try_begin),
        ### 1. SAIL
        (key_clicked, key_enter),
        (try_begin),
          (eq, ":sail", 0),
          (assign, ":sail", 1),
          (assign, ":rowing", 0),
        (else_try),
          (assign, ":sail", 0),
        (try_end),
      (else_try),

        ### 2. ROWING
        (key_clicked, key_down),
        (gt, ":rowing", -50),
        (val_add, ":rowing", -50),
      (else_try),
        (key_clicked, key_up),
        (lt, ":rowing", 100),
        (val_add, ":rowing", 50),
      (else_try),

        ### 3. RUDDER
        (key_clicked, key_right),				### right
        (gt, ":rudder", -100),
        (val_add, ":rudder", -50),
      (else_try),
        (key_clicked, key_left),				### left
        (lt, ":rudder", 100),
        (val_add, ":rudder", 50),
      (else_try),


        ### 4. CAMERA
        (key_clicked, key_back_space),
        (try_begin),
          (eq, "$cam_mode", 0),
          #(store_current_scene, ":current_scene"),				#VC-1951
          (assign, "$cam_mode", 1),
          (call_script, "script_save_cam_first_person_mode"),
          (mission_cam_set_mode, 1, 100, 0),
          (set_camera_in_first_person, 0),
        (else_try),
          (eq, "$cam_mode", 1),
          (assign, "$cam_mode", 0),
          (call_script, "script_return_to_cam_first_person_mode_1_sec"),
        (try_end),
      (try_end),

      (try_begin),
        (neq, ":rowing", 0),
        (assign, ":sail", 0),
      (try_end),

      # OUTPUT
      (scene_prop_set_slot, ":ship_instance", scene_prop_sail, ":sail"),
      (scene_prop_set_slot, ":ship_instance", scene_prop_rowing, ":rowing"),
      (scene_prop_set_slot, ":ship_instance", scene_prop_rudder, ":rudder"),
    (end_try),

])
common_maritime_deselect_all =(
  0, 0, ti_once, [],
  [
    (team_set_order_listener, 0, 8, 0),	#avoid green circels
    (team_set_order_listener, 1, 8, 0),
    (class_set_name, 8, "@Ships"),
])
common_controller_keys = (
  0, .25, .75, [
    (key_clicked, key_pad_rup),
  ], [
    (assign, "$controller_in_use", 1),
    (try_begin),
      (eq, "$controller_keys", 1),
      (presentation_set_duration, 0),

    (else_try),
      (key_is_down, key_pad_rup),  #player is holding key down?
      (gt, "$player_functions", 0), #there are functions to access?
      (assign, "$controller_keys", 1),

      #shut down engine's use of keys
      (omit_key_once, key_pad_rdown),
      (omit_key_once, key_pad_rright),
      (omit_key_once, key_pad_rleft),
      (omit_key_once, key_pad_rup),
      (presentation_set_duration, 0),
      (assign, "$switch_presentation_new", "prsnt_console_player_functions"),
    (try_end),
])

common_controller_keys_end = (
  .25, 0, 0, [
    (neg|is_presentation_active, "prsnt_console_player_functions"),
    (eq, "$controller_keys", 1),
  ], [
    (assign, "$controller_keys", 0),
    (clear_omitted_keys),
])

camera_controls = [ #7 triggers
  (ti_before_mission_start, 0, 0, [], [
      (assign, "$cam_mode", 0),
      (assign, "$kill_cam_end", 0), #slo_mo_cam test
  ]),

  (ti_battle_window_opened, 0, 0, [], [(assign, "$cam_seeking_mouse", Far_Away)]),

  (0, 0, 0, [
      (gt, "$cam_mode", camera_manual),
      (set_fixed_point_multiplier, 1000),
      (mission_get_time_speed, ":interval"),
      (val_mul, ":interval", camera_trigger_interval*1000),
      (val_div, ":interval", 1000),
      (store_mission_timer_c_msec, reg0),
      (store_sub, ":elapsed", reg0, "$cam_last_called"),
      (gt, ":elapsed", ":interval"),
      ],[
      (assign, "$cam_last_called", reg0),
      (assign, ":change_pitch", 0),
      (assign, ":change_yaw", 0),
      (assign, ":change_zoom", 0),
      (assign, ":pan_back_forth", 0),
      (assign, ":pan_right_left", 0),
      (assign, ":pan_up_down", 0),
      (assign, ":has_rotated", 0),

      #check zoom keys
      (try_begin),
        (key_is_down, key_numpad_plus),
        (store_div, reg0, "$cam_speed", 30),
        (val_add, reg0, 1),
        (val_sub, reg0, "$cam_zoom"),
        (val_mul, reg0, -1),
        (try_begin),
          (gt, reg0, camera_effective_min_zoom),
          (assign, "$cam_zoom", reg0),
          (assign, ":change_zoom", 1),
        (try_end),

      (else_try),
        (key_is_down, key_numpad_minus),
        (store_div, reg0, "$cam_speed", 30),
        (val_add, reg0, 1),
        (val_add, reg0, "$cam_zoom"),
        (try_begin),
          (le, reg0, 75),  #although it will zoom out to around 150 or so, it starts looking distorted past this point
          (assign, "$cam_zoom", reg0),
          (assign, ":change_zoom", 1),
        (try_end),
      (try_end),

      #check pan back and forth keys
      (store_and, reg0, "$cam_mode", camera_pan_back_forth),
      (try_begin),
        (gt, reg0, 0),
        (try_begin),
          (game_key_is_down, gk_move_forward),
          (store_mul, ":pan_back_forth", "$cam_speed", 1),
        (else_try),
          (game_key_is_down, gk_move_backward),
          (store_mul, ":pan_back_forth", "$cam_speed", -1),
        (try_end),
      (try_end),

      #check pan right and left keys
      (store_and, reg0, "$cam_mode", camera_pan_right_left),
      (try_begin),
        (gt, reg0, 0),
        (try_begin),
          (game_key_is_down, gk_move_right),
          (store_mul, ":pan_right_left", "$cam_speed", 1),
        (else_try),
          (game_key_is_down, gk_move_left),
          (store_mul, ":pan_right_left", "$cam_speed", -1),
        (try_end),
      (try_end),

      #check pan up and down keys
      (store_and, reg0, "$cam_mode", camera_pan_up_down),
      (try_begin),
        (gt, reg0, 0),
        (try_begin),
          (key_is_down, key_f),
          (store_mul, ":pan_up_down", "$cam_speed", 1),
        (else_try),
          (key_is_down, key_c),
          (store_mul, ":pan_up_down", "$cam_speed", -1),
        (else_try),
          (key_is_down, key_v), #c is character report
          (store_mul, ":pan_up_down", "$cam_speed", -1),
        (try_end),
      (try_end),

      #handle diagonals
      (try_begin),
        (neq, ":pan_back_forth", 0),
        (neq, ":pan_right_left", 0),
        (neq, ":pan_up_down", 0),
        (val_mul, ":pan_back_forth", 1000),
        (val_div, ":pan_back_forth", 1732),
        (val_mul, ":pan_right_left", 1000),
        (val_div, ":pan_right_left", 1732),
        (val_mul, ":pan_up_down", 1000),
        (val_div, ":pan_up_down", 1732),
      (else_try),
        (neq, ":pan_back_forth", 0),
        (neq, ":pan_right_left", 0),
        (val_mul, ":pan_back_forth", 1000),
        (val_div, ":pan_back_forth", 1414),
        (val_mul, ":pan_right_left", 1000),
        (val_div, ":pan_right_left", 1414),
      (else_try),
        (neq, ":pan_up_down", 0),
        (neq, ":pan_right_left", 0),
        (val_mul, ":pan_up_down", 1000),
        (val_div, ":pan_up_down", 1414),
        (val_mul, ":pan_right_left", 1000),
        (val_div, ":pan_right_left", 1414),
      (else_try),
        (neq, ":pan_back_forth", 0),
        (neq, ":pan_up_down", 0),
        (val_mul, ":pan_back_forth", 1000),
        (val_div, ":pan_back_forth", 1414),
        (val_mul, ":pan_up_down", 1000),
        (val_div, ":pan_up_down", 1414),
      (try_end),

      #check rotation
      (store_and, reg0, "$cam_mode", camera_rotate),
      (try_begin),
        (gt, reg0, 0),
        #check pitch keys
        (assign, ":min_one", "$cam_speed"),
        (convert_to_fixed_point, ":min_one"),
        (store_sqrt, reg0, ":min_one"),
        (convert_from_fixed_point, reg0),
        (store_add, ":min_one", reg0, camera_key_rotate_attenuator),
        (store_and, ":rev_y", "$cam_mode", camera_reverse_y),
        (try_begin),
          (key_is_down, key_up),
          (try_begin),
            (eq, ":rev_y", 0),
            (store_div, ":change_pitch", ":min_one", camera_key_rotate_attenuator),
          (else_try),
            (store_div, ":change_pitch", ":min_one", -1 * camera_key_rotate_attenuator),
          (try_end),

        (else_try),
          (key_is_down, key_down),
          (try_begin),
            (eq, ":rev_y", 0),
            (store_div, ":change_pitch", ":min_one", -1 * camera_key_rotate_attenuator),
          (else_try),
            (store_div, ":change_pitch", ":min_one", camera_key_rotate_attenuator),
          (try_end),
        (try_end),

        #check yaw keys
        (try_begin),
          (key_is_down, key_right),
          (store_div, ":change_yaw", ":min_one", -1 * camera_key_rotate_attenuator),
        (else_try),
          (key_is_down, key_left),
          (store_div, ":change_yaw", ":min_one", camera_key_rotate_attenuator),
        (try_end),

        #handle diagonal
        (try_begin),
          (neq, ":change_yaw", 0),
          (try_begin),
            (neq, ":change_pitch", 0),
            (val_mul, ":change_yaw", 1000),
            (val_div, ":change_yaw", 1414),
            (val_mul, ":change_pitch", 1000),
            (val_div, ":change_pitch", 1414),
          (try_end),
          (val_add, "$cam_yaw", ":change_yaw"),
        (try_end),

        #check mouse rotation
        (try_begin),
          (eq, ":change_pitch", 0),
          (eq, ":change_yaw", 0),
          (gt, "$cam_displacements", 0),

          (store_div, ":change_yaw", "$cam_displace_x", "$cam_displacements"),
          (val_mul, ":change_yaw", -1),
          (store_div, ":change_pitch", "$cam_displace_y", "$cam_displacements"),

          (store_and, reg0, "$cam_mode", camera_reverse_y),
          (try_begin),
            (neq, reg0, 0),
            (val_mul, ":change_pitch", -1),
          (try_end),

          (val_clamp, ":change_yaw", -179, 180),
          (val_add, "$cam_yaw", ":change_yaw"),
        (try_end),

        #pitch ceiling/floor
        (neq, ":change_pitch", 0),
        (store_add, reg0, "$cam_pitch", ":change_pitch"),

        (try_begin),
          (is_between, reg0, camera_minimum_pitch, camera_maximum_pitch),
          (assign, "$cam_pitch", reg0),
        (else_try),
          (assign, ":change_pitch", 0),
        (try_end),
      (try_end),  #rotation
      (assign, "$cam_displace_x", 0),
      (assign, "$cam_displace_y", 0),
      (assign, "$cam_displacements", 0),

      #check for camera targets
      (mission_cam_get_position, pos0),
      (set_fixed_point_multiplier, 100),
      (store_and, ":target", "$cam_mode", camera_target_agent|camera_target_prop),
      (try_begin),
        (neq, ":target", 0),
        (store_and, reg0, "$cam_mode", camera_target_agent),

        #we're following an agent
        (try_begin),
          (neq, reg0, 0),
          (try_begin),
            (agent_is_active, "$cam_target_instance"),
            (agent_get_position, pos1, "$cam_target_instance"),
            (position_move_z, pos1, camera_minimum_z),
          (else_try),
            (assign, "$cam_target_instance", 0),
          (try_end),

          #we're following a prop
        (else_try),
          (prop_instance_is_valid, "$cam_target_instance"),
          (prop_instance_get_position, pos1, "$cam_target_instance"),
        (else_try),
          (assign, "$cam_target_instance", 0),
        (try_end),

        #have the camera "follow" the target
        (gt, "$cam_target_instance", 0),
        (copy_position, pos2, pos0), #not going to move the camera now, as we need to pass the various tests, etc., so we do it by ordering pans
        (position_get_z, ":from_z", pos1),
        (position_set_z, pos2, ":from_z"),  #set on same plane as target as we'll be breaking down horizontal and vertical distance to move
        (call_script, "script_point_y_toward_position", pos1, pos2),

        (assign, ":old_horizontal_dist", reg0),
        (position_get_z, reg0, pos0),
        (store_sub, ":old_vertical_dist", reg0, ":from_z"),

        #find new camera location
        (val_add, "$cam_above_target", ":pan_up_down"),
        (val_max, "$cam_above_target", 50), #avoid overrunning target

        (copy_position, pos2, pos1),
        (store_mul, ":horizontal_dist", camera_fixed_angle_h, "$cam_above_target"),
        (val_div, ":horizontal_dist", camera_fixed_angle_v),
        (position_move_y, pos2, ":horizontal_dist"),

        #capture yaw
        (position_get_rotation_around_z, ":has_rotated", pos0),
        (call_script, "script_point_y_toward_position", pos2, pos1),
        (position_copy_rotation, pos0, pos2),
        (position_get_rotation_around_z, reg0, pos0),
        (val_sub, ":has_rotated", reg0),

        #prep for various checks
        (store_sub, ":pan_back_forth", ":old_horizontal_dist", ":horizontal_dist"),
        (store_sub, ":pan_up_down", "$cam_above_target", ":old_vertical_dist"),

        #rotate default properly
      (else_try),
        (position_get_x, ":from_x", pos0),
        (position_get_y, ":from_y", pos0),
        (position_get_z, ":from_z", pos0),
        (init_position, pos0),
        (position_set_x, pos0, ":from_x"),
        (position_set_y, pos0, ":from_y"),
        (position_set_z, pos0, ":from_z"),
      (try_end),

      (position_rotate_z, pos0, "$cam_yaw"),

      #handle rotating camera first
      (store_and, ":rotate_first", "$cam_mode", camera_pan_to_rotation),
      (try_begin),
        (neq, ":rotate_first", 0),
        (eq, ":target", 0), #targets have special panning
        (position_rotate_x, pos0, "$cam_pitch"),

        (assign, reg0, "$cam_pitch"),
        (convert_to_fixed_point, reg0),
        (store_sin, ":sine_pitch", reg0),
        (store_cos, ":cosine_pitch", reg0),

        (store_mul, ":x_proj_x", ":pan_back_forth", ":cosine_pitch"),
        (store_mul, ":x_proj_y", ":pan_up_down", ":sine_pitch"),
        (store_mul, ":y_proj_x", ":pan_back_forth", ":sine_pitch"),
        (store_mul, ":y_proj_y", ":pan_up_down", ":cosine_pitch"),

        (store_add, ":pan_back_forth", ":x_proj_x", ":x_proj_y"),
        (convert_from_fixed_point, ":pan_back_forth"),
        (store_add, ":pan_up_down", ":y_proj_x", ":y_proj_y"),
        (convert_from_fixed_point, ":pan_up_down"),
      (try_end),

      #check boundaries
      (try_begin),
        (this_or_next|neq, ":pan_back_forth", 0),
        (neq, ":pan_right_left", 0),

        (copy_position, pos1, pos0),
        (position_move_x, pos1, ":pan_right_left"),
        (position_move_y, pos1, ":pan_back_forth"),

        (position_get_x, ":from_x", pos1),
        (is_between, ":from_x", "$g_bound_left", "$g_bound_right"),
        (position_get_y, ":from_y", pos1),
        (is_between, ":from_y", "$g_bound_bottom", "$g_bound_top"),
        (copy_position, pos0, pos1),

        #check terrain
        (call_script, "script_get_distance_to_terrain_or_water", pos0),
        (assign, ":dist_to_terrain", reg0),
        (store_and, reg0, "$cam_mode", camera_follow_terrain),
        (try_begin),
          (gt, reg0, 0),  #follow terrain
          (store_sub, reg0, "$cam_to_terrain", ":dist_to_terrain"),
          (val_add, "$cam_z", reg0),
          (position_set_z, pos0, "$cam_z"),

        (else_try),
          (store_sub, reg0, camera_minimum_z, ":dist_to_terrain"),
          (gt, reg0, 0),
          (assign, "$cam_to_terrain", camera_minimum_z),
          (val_add, "$cam_z", reg0),
          (position_set_z, pos0, "$cam_z"),

        (else_try),
          (assign, "$cam_to_terrain", ":dist_to_terrain"),
        (try_end),

        #out of bounds
      (else_try),
        (assign, ":pan_back_forth", 0),
        (assign, ":pan_right_left", 0),
      (try_end),

      #check ground
      (try_begin),
        (lt, ":pan_up_down", 0),
        (val_mul, ":pan_up_down", -1),
        (call_script, "script_get_distance_to_terrain_or_water", pos0),
        (val_sub, reg0, camera_minimum_z),
        (val_max, reg0, 0),
        (val_min, ":pan_up_down", reg0),
        (try_begin),
          (gt, ":pan_up_down", 0),
          (val_sub, "$cam_to_terrain", ":pan_up_down"),
          (val_sub, "$cam_z", ":pan_up_down"),
          (position_set_z, pos0, "$cam_z"),
        (try_end),

        #check ceiling
      (else_try),
        (gt, ":pan_up_down", 0),
        (call_script, "script_get_distance_to_terrain_or_water", pos0),
        (val_add, reg0, ":pan_up_down"),
        (try_begin),
          (gt, reg0, 5000),  #50m
          (val_sub, "$cam_above_target", ":pan_up_down"),
          (assign, ":pan_up_down", 0),
        (else_try),
          (val_add, "$cam_to_terrain", ":pan_up_down"),
          (val_add, "$cam_z", ":pan_up_down"),
          (position_set_z, pos0, "$cam_z"),
        (try_end),
      (try_end),

      #apply change
      (this_or_next|neq, ":change_pitch", 0),
      (this_or_next|neq, ":change_yaw", 0),
      (this_or_next|neq, ":change_zoom", 0),
      (this_or_next|neq, ":pan_back_forth", 0),
      (this_or_next|neq, ":pan_right_left", 0),
      (this_or_next|neq, ":pan_up_down", 0),
      (neq, ":has_rotated", 0),

      (try_begin),
        (eq, ":rotate_first", 0),
        (position_rotate_x, pos0, "$cam_pitch"),
      (try_end),

      (set_fixed_point_multiplier, 1000),
      (mission_get_time_speed, ":interval"),
      (val_mul, ":interval", camera_animation_time),
      (val_div, ":interval", 1000),
      (mission_cam_animate_to_position_and_aperture, pos0, "$cam_zoom", ":interval"),
  ]),

  (0, 0, 0, [
      (gt, "$cam_mode", camera_manual),
      ],[
      #toggle camera_follow_terrain
      (try_begin),
        (key_clicked, key_q),
        (store_and, reg0, "$cam_mode", camera_follow_terrain),
        (try_begin),
          (eq, reg0, 0),
          (val_or, "$cam_mode", camera_follow_terrain),
          (display_message, "@Camera follow terrain mode ON."),
        (else_try),
          (val_sub, "$cam_mode", camera_follow_terrain),
          (display_message, "@Camera follow terrain mode OFF."),
        (try_end),
      (try_end),

      #toggle flip y
      (try_begin),
        (key_clicked, key_y),
        (store_and, reg0, "$cam_mode", camera_reverse_y),
        (try_begin),
          (eq, reg0, 0),
          (val_or, "$cam_mode", camera_reverse_y),
        (else_try),
          (val_sub, "$cam_mode", camera_reverse_y),
        (try_end),
      (try_end),

      #toggle pan to rotation
      (try_begin),
        (key_clicked, key_r),
        (store_and, reg0, "$cam_mode", camera_pan_to_rotation),
        (try_begin),
          (eq, reg0, 0),
          (val_or, "$cam_mode", camera_pan_to_rotation),
          (display_message, "@Camera rotate before pan ON."),
        (else_try),
          (val_sub, "$cam_mode", camera_pan_to_rotation),
          (display_message, "@Camera rotate before pan OFF."),
        (try_end),
      (try_end),

      #pan velocity
      (try_begin),
        (key_clicked, key_mouse_scroll_up),
        (val_mul, "$cam_speed", 2),
      (try_end),

      (try_begin),
        (key_clicked, key_mouse_scroll_down),
        (val_add, "$cam_speed", 1),
        (val_div, "$cam_speed", 2),
      (try_end),

      #game speed
      (try_begin),
        (store_and, reg0, "$cam_mode", camera_game_slow),
        (gt, reg0, 0),

        (set_fixed_point_multiplier, 1000),
        (try_begin),
          (key_clicked, key_numpad_0),
          (mission_set_time_speed, 8), #lowest speed we can animate well at 1 millisecond
        (else_try),
          (key_clicked, key_numpad_1),
          (mission_set_time_speed, 118),
        (else_try),
          (key_clicked, key_numpad_2),
          (mission_set_time_speed, 228),
        (else_try),
          (key_clicked, key_numpad_3),
          (mission_set_time_speed, 338),
        (else_try),
          (key_clicked, key_numpad_4),
          (mission_set_time_speed, 448),
        (else_try),
          (key_clicked, key_numpad_5),
          (mission_set_time_speed, 559),
        (else_try),
          (key_clicked, key_numpad_6),
          (mission_set_time_speed, 669),
        (else_try),
          (key_clicked, key_numpad_7),
          (mission_set_time_speed, 779),
        (else_try),
          (key_clicked, key_numpad_8),
          (mission_set_time_speed, 889),
        (else_try),
          (key_clicked, key_numpad_9),
          (mission_set_time_speed, 1000),
        (else_try),
          (assign, reg0, 0),
        (try_end),

        # (gt, reg0, 0),
        # (eq, "$cheat_mode", 0), not set in CB
        # (mission_set_time_speed, 1000),
        # (display_message, "@Set cheat mode to change game speed.", color_bad_news),
      (try_end),

      #rotation by mouse
      (try_begin),
        (store_and, reg0, "$cam_mode", camera_rotate),
        (gt, reg0, 0),

        (mouse_get_position, pos0),
        (set_fixed_point_multiplier, 1000),
        (position_get_x, reg0, pos0),
        (position_get_y, reg1, pos0),

        #mouse hasn't moved
        (try_begin),
          (eq, "$cam_mouse_x", reg0),
          (eq, "$cam_mouse_y", reg1),

          #reassign center
          (try_begin),
            (is_between, reg0, 485, 501), #observed values for centered mouse
            (is_between, reg1, 375, 501),
            (val_add, "$cam_clock", 1),

            (eq, "$cam_clock", 3),
            (assign, "$cam_mouse_center_x", reg0),
            (assign, "$cam_mouse_center_y", reg1),
          (try_end),

        (else_try),
          (assign, "$cam_mouse_x", reg0),
          (assign, "$cam_mouse_y", reg1),
          (store_sub, reg0, "$cam_mouse_x", "$cam_mouse_center_x"),
          (store_sub, reg1, "$cam_mouse_y", "$cam_mouse_center_y"),

          #mouse recovering from a button somewhere?
          (neq, "$cam_seeking_mouse", 0),
          (assign, reg2, reg0),
          (val_abs, reg2),

          (try_begin),
            (ge, "$cam_seeking_mouse", reg2),  #mouse still coming in from wherever it was?
            (assign, "$cam_seeking_mouse", reg2),
          (else_try),
            (assign, "$cam_seeking_mouse", 0),
          (try_end),

          #track mouse move
        (else_try),
          (assign, "$cam_clock", 0),
          (val_add, "$cam_displace_x", reg0),
          (val_add, "$cam_displace_y", reg1),
          (val_add, "$cam_displacements", 1),
        (try_end),
      (try_end),
  ]),

  (0, .1, 0, [
      (key_clicked, key_enter),
      (scene_prop_get_num_instances, reg0, "spr_dyn_ship_substrate"),
      (le, reg0, 0),  #avoid conflict with naval strategy camera
      (assign,":pass",0),
      (try_begin),
        (gt, "$cam_mode", camera_manual), #this camera on
        (ge, "$fplayer_agent_no", 0), #but not the movie cam
        (neg|main_hero_fallen), #and not the death cam
        (assign, "$cam_mode", 0),
        (try_begin),#VC-2097
          (eq, "$cam_first_person_mode", 0),
          (mission_cam_set_mode, 0, 500, 0),
        (else_try),
          (mission_cam_set_mode, 0, 0, 0),
          (set_camera_in_first_person, "$cam_first_person_mode"),
        (end_try),
      (else_try),
        (eq, "$cam_mode", 0),
        # (ge, "$cheat_mode", 1),
        (assign,":pass",1),
        (call_script, "script_save_cam_first_person_mode"),
        (mission_cam_set_mode, 1),
        (set_camera_in_first_person, 0),
        (mission_cam_get_position, pos0),
        (set_fixed_point_multiplier, 100),
        (agent_get_position, pos1, "$fplayer_agent_no"),
        (position_move_z, pos1, camera_minimum_z),
        (position_get_z, reg0, pos1),
        (position_set_z, pos0, reg0), #for some reason, camera position starts 10m above player agent
        (call_script, "script_point_y_toward_position", pos0, pos1),
        (position_move_y, pos0, camera_fixed_angle_h * -1000 / camera_fixed_angle_v),
        (assign, "$cam_above_target", 1000),
        (position_move_z, pos0, "$cam_above_target"),
        (position_get_z, "$cam_z", pos0),
        (call_script, "script_get_distance_to_terrain_or_water", pos0),
        (assign, "$cam_to_terrain", reg0),
        (assign, "$cam_pitch", 330),
        (assign, "$cam_yaw", 0),
        (position_rotate_x, pos0, "$cam_pitch"),
        (mission_cam_animate_to_position, pos0, 500),

        (store_and, reg0, "$first_time", first_time_strategy_camera),
        (try_begin),
          (eq, reg0, 0),
          (val_or, "$first_time", first_time_strategy_camera),
          (eq, "$g_is_quick_battle", 0),
          (str_store_string, s0, "str_strategy_cam"),
          (try_begin),
            (neg|is_presentation_active, "prsnt_battle"),
            (game_key_get_mapped_key_name, s1, gk_view_orders),
            (str_store_string, s0, "@{s0}^^A Battle Command Display is often available by pressing the {s1} key."),
          (try_end),
          (dialog_box, "str_s0", "@Strategy Camera"),
        (try_end),
      (try_end),
      (eq,":pass",1),
      ],[
      (eq, "$cam_mode", 0), #test here in case naval battle camera has activated
      (assign, "$cam_mode", camera_pan_up_down|camera_target_agent|camera_game_slow), #R/L and B/F pans not recommended, as the keys also move player agent
      (assign, "$cam_target_instance", "$fplayer_agent_no"),
      (assign, "$cam_speed", 100), #10 m/s
      (assign, "$cam_last_called", 0),
      (mouse_get_position, pos0),
      (set_fixed_point_multiplier, 1000),
      (position_get_x, "$cam_mouse_center_x", pos0),
      (position_get_y, "$cam_mouse_center_y", pos0),
      (assign, "$cam_seeking_mouse", 0),
      (mission_cam_get_aperture, "$cam_zoom"),
  ]),

  #turn on camera if no player agent
  (0, .3, ti_once, [
      (eq, "$cam_mode", 0),
      ], [
      (try_begin),
        (lt, "$fplayer_agent_no", 0),
        (mission_cam_set_mode, 1),
        (call_script, "script_save_cam_first_person_mode"),
        (set_camera_in_first_person, 0),
        (assign, "$cam_mode", camera_pan_back_forth|camera_pan_right_left|camera_pan_up_down|camera_rotate|camera_game_slow),
        (assign, "$cam_speed", 250),  #25 m/s
        (assign, "$cam_last_called", 0),
        (assign, "$cam_mouse_center_x", 500),  #assume mouse centering position for non-windowed screen
        (assign, "$cam_mouse_center_y", 375),
        (assign, "$cam_seeking_mouse", Far_Away),
        (mission_cam_get_position, pos0),
        (set_fixed_point_multiplier, 100),
        (position_get_z, "$cam_z", pos0),
        (store_sub, ":move_up", camera_minimum_z + 1000, "$cam_z"),  #at least 10m over water
        (try_begin),
          (gt, ":move_up", 0),
          (assign, "$cam_z", camera_minimum_z + 1000),
          (position_move_z, pos0, ":move_up"),
          (mission_cam_animate_to_position, pos0, camera_animation_time),
        (try_end),
        (call_script, "script_get_distance_to_terrain_or_water", pos0),
        (assign, "$cam_to_terrain", reg0),
        (position_get_rotation_around_x, "$cam_pitch", pos0),
        (position_get_rotation_around_z, "$cam_yaw", pos0),
        (mission_cam_get_aperture, "$cam_zoom"),

      (else_try),
        (store_and, reg0, "$first_time", first_time_cam_battle),
        (eq, reg0, 0),
        (val_or, "$first_time", first_time_cam_battle),
        (eq, "$g_is_quick_battle", 0),
        #(dialog_box, "str_tactical_controls", "@Tactical Controls"),
      (try_end),
  ]),

  #turn on camera on player death
  (1, 1.5, ti_once, [
      (main_hero_fallen),
      (neg|num_active_teams_le,1),
      (eq, "$kill_cam_end", 0), #slo_mo_cam test
      ],[
        (assign, "$gk_order", 0),
        #(call_script, "script_player_order_formations", mordr_charge), #Madsci
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (team_give_order, ":player_team", grc_everyone, mordr_charge),

      (mission_cam_set_mode, 1),
      (call_script, "script_save_cam_first_person_mode"),
      (set_camera_in_first_person, 0),
      (assign, "$cam_mode", camera_pan_back_forth|camera_pan_right_left|camera_pan_up_down|camera_rotate|camera_game_slow|camera_follow_terrain|camera_pan_to_rotation),
      (assign, "$cam_speed", 40), #4 m/s
      (assign, "$cam_last_called", 0),
      (mouse_get_position, pos0),
      (set_fixed_point_multiplier, 1000),
      (position_get_x, "$cam_mouse_center_x", pos0),
      (position_get_y, "$cam_mouse_center_y", pos0),
      (assign, "$cam_seeking_mouse", 0),
      (mission_cam_get_position, pos0),
      (set_fixed_point_multiplier, 100),
      (position_get_z, "$cam_z", pos0),
      (store_sub, ":move_up", camera_minimum_z - 100, "$cam_z"),  #common setting for water level in scenes
      (assign, ":wave_max", 0),
      (try_begin),
        (scene_prop_get_num_instances, reg0, "spr_dyn_ship_substrate"),
        (gt, reg0, 0),  #at sea
        (store_add, ":wave_max", "$Amplitude_x", "$Amplitude_y"),
        (val_div, ":wave_max", 50),
        (val_add, ":wave_max", camera_minimum_z), #not high enough for some reason
        (val_add, ":move_up", ":wave_max"),
      (try_end),
      (try_begin),
        (gt, ":move_up", 0),
        (assign, "$cam_z", camera_minimum_z - 100),
        (val_add, "$cam_z", ":wave_max"),
        (position_move_z, pos0, ":move_up"),
        (mission_cam_animate_to_position, pos0, camera_animation_time),
      (try_end),
      (call_script, "script_get_distance_to_terrain_or_water", pos0),
      (assign, "$cam_to_terrain", reg0),
      (position_get_rotation_around_x, "$cam_pitch", pos0),
      (try_begin),
        (is_between, "$cam_pitch", -90, 90),
        (val_add, "$cam_pitch", 360),
      (else_try),
        (try_begin),
          # (ge, "$cheat_mode", 1),
          (neg|is_between, "$cam_pitch", camera_minimum_pitch, camera_maximum_pitch),
          (assign, reg1, "$cam_pitch"),
          (display_message, "@{!}DEBUG: bad camera pitch {reg1}"),
        (try_end),
        (lt, "$cam_pitch", -90),
        (val_mul, "$cam_pitch", -1),
        (val_add, "$cam_pitch", 180),
        (try_begin),
          # (ge, "$cheat_mode", 1),
          (assign, reg1, "$cam_pitch"),
          (display_message, "@{!}DEBUG: set as {reg1}"),
        (try_end),
      (try_end),
      (position_get_rotation_around_z, "$cam_yaw", pos0),
      (mission_cam_get_aperture, "$cam_zoom"),

      (store_and, reg0, "$first_time", first_time_death_camera),
      (try_begin),
        (eq, reg0, 0),
        (val_or, "$first_time", first_time_death_camera),
        (eq, "$g_is_quick_battle", 0),
        (dialog_box, "str_quick_battle_troop_cam", "@Death Camera"),
      (try_end),
  ]),
] #end camera controls
can_spawn_commoners = (ti_before_mission_start,0,0,[],[(assign,"$can_spawn_commoners",1)])
can_spawn_commoners_arena = (ti_before_mission_start,0,0,[],[(assign,"$can_spawn_commoners",2)])
cannot_spawn_commoners = (ti_before_mission_start,0,0,[],[(assign,"$can_spawn_commoners",0)])

common_disable_ai_crouching =(
  ti_on_agent_spawn, 0, 0, [ ],
  [
    (store_trigger_param_1, ":agent_no"),
    (agent_ai_set_can_crouch, ":agent_no", 0),	#for VC-1886
])
common_battle_player_fallen = (
  1, 4, ti_once, [(main_hero_fallen)], [
    (assign, "$pin_player_fallen", 1),
    # (str_store_string, s5, "str_retreat"),  MOTO move these things to TAB out to allow death cam
    # (call_script, "script_simulate_retreat", 10, 20, 1),
    (assign, "$g_battle_result", -1),
    (set_mission_result,-1),
    # (call_script, "script_count_mission_casualties_from_agents"),
    # (finish_mission,0)
    ####player lose renown when he fall
    (store_character_level, ":player_level", "trp_player"), #depend on level, more level more penalty
    (try_begin), #difficult setting
      (ge, ":player_level", 7),
      (val_div, ":player_level", 6),
      (assign, ":renown_change", ":player_level"),
      (val_mul, ":renown_change", -1),
      (val_min, ":renown_change", 0),
      (call_script,"script_change_troop_renown", "trp_player", ":renown_change"),
    (try_end),
    #########

    (display_message,"@You have fallen. (Press tab key to leave)"),
    (presentation_set_duration, 0),
])
common_simple_ship_floating =(
  0.25, 0, 0, [ (gt, "$number_of_ships_global", 0),],
  [
    (try_begin),
      (set_fixed_point_multiplier, 100),
      #(scene_prop_get_num_instances, ":number_of_ships", "spr_dyn_ship_substrate"),
      (try_for_range,":ship_number", 0, "$number_of_ships_global"),
        ### GET DATA
        (scene_prop_get_instance, ":ship_instance", "spr_dyn_ship_substrate", ":ship_number"),
        (prop_instance_get_position, pos1, ":ship_instance"),
        (scene_prop_get_slot, ":ship_sail_off_instance", ":ship_instance", scene_prop_main_instance),
        (scene_prop_get_slot, ":ship_sail_on_instance", ":ship_instance", scene_prop_boom_instance),
        (scene_prop_get_slot, ":ship_collision_instance", ":ship_instance", scene_prop_collision_instance),
        (scene_prop_get_slot, ":ship_planks_a", ":ship_instance", 18),
        (scene_prop_get_slot, ":ship_planks_b", ":ship_instance", 19),
        (scene_prop_get_slot, ":ship_cargo_1_instance", ":ship_instance", scene_prop_cargo_1),

        (call_script, "script_calculate_rocking_to_pos1"),
        ### MOVE THE MAIN-INSTANCES
        (assign, ":animation_duration", 35),		# depends on frequency of calling trigger and the wanted smoothnes
        (prop_instance_animate_to_position, ":ship_instance", pos1, ":animation_duration"),
        (prop_instance_animate_to_position, ":ship_sail_off_instance", pos1, ":animation_duration"),
        (prop_instance_animate_to_position, ":ship_sail_on_instance", pos1, ":animation_duration"),
        (try_begin),
          (gt, ":ship_cargo_1_instance", 0),
          (prop_instance_animate_to_position, ":ship_cargo_1_instance", pos1, ":animation_duration"),
        (end_try),
        (position_set_z, pos1, -1000),			# collision instances move under the ground tto prevent interaction with agents
        (prop_instance_animate_to_position, ":ship_collision_instance", pos1, ":animation_duration"),
        (position_set_z, pos1, -100),
        ### MOVE THE OTHER INSTANCES
        (position_move_z, pos1, -100),
        (prop_instance_animate_to_position, ":ship_planks_a", pos1, ":animation_duration"),
        (position_move_z, pos1, -1000),
        (prop_instance_animate_to_position, ":ship_planks_b", pos1, ":animation_duration"),
      (try_end),
    (try_end),	#for VC-1886
])
ship_rowing_sounds = 	(0.3, 0, 0, [
    (this_or_next|neg|game_in_multiplayer_mode),
    (neg|multiplayer_is_dedicated_server),
    ],[
    (mission_cam_get_position,pos13),
    (try_for_prop_instances, ":ship_instance", "spr_dyn_ship_substrate"),
      (scene_prop_slot_ge, ":ship_instance", scene_prop_crew_number, 2),
      (scene_prop_get_slot, ":oar_state", ":ship_instance", scene_prop_oar_state),
      (neq,":oar_state",0),
      (prop_instance_get_position, pos11, ":ship_instance"),
      (get_distance_between_positions_in_meters,":distance",pos11,pos13),#ship to camera
      (lt,":distance",20),
      (scene_prop_get_slot, ":ship_main_instance", ":ship_instance", scene_prop_main_instance),
      (prop_instance_get_current_deform_frame, ":current_frame", ":ship_main_instance"),
      (assign,":stop",1),
      (try_begin),
        (gt,":oar_state",50),
        (is_between,":current_frame",75,120),
        (assign,":stop",0),
      (else_try),
        (gt,":oar_state",0),
        (is_between,":current_frame",82,111),
        (assign,":stop",0),
      (else_try),
        (lt,":oar_state",0),
        (is_between,":current_frame",252,281),
        (assign,":stop",0),
      (try_end),
      (eq,":stop",0),
      (position_move_y,pos11,350),
      (play_sound_at_position,"snd_ship_rowing_r",pos11),
      (position_move_y,pos11,-700),
      (play_sound_at_position,"snd_ship_rowing_l",pos11),
    (try_end),
])

#VC

#improved_lightning - from maxi/butters
improved_lighting =  [
    (ti_before_mission_start, 0, 0,
    [],
    [
    (party_get_current_terrain, ":terrain", "p_main_party"),
    (store_time_of_day, ":day_time"),
    (try_begin),
        (this_or_next|eq, ":terrain", rt_forest),
        (this_or_next|eq, ":terrain", rt_steppe_forest),
        (this_or_next|eq, ":terrain", rt_steppe),
        (eq, ":terrain", rt_plain),
        (try_begin),#winter
            (this_or_next|eq, "$g_cur_month", 1),
            (this_or_next|eq, "$g_cur_month", 2),
            (this_or_next|eq, "$g_cur_month", 11),
            (eq, "$g_cur_month", 12),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 20),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",10),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 600, 700),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFA7A7A7),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 700, 800),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFA2A2A2),
            (else_try),
                (store_random_in_range, ":random_2", 800, 1200),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFB9B9B9),
            (try_end),
        (else_try),#sommer
            (this_or_next|eq, "$g_cur_month", 5),
            (this_or_next|eq, "$g_cur_month", 6),
            (this_or_next|eq, "$g_cur_month", 7),
            (eq, "$g_cur_month", 8),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 10),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 1300, 2000),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 2000, 3000),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 3000, 6000),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#else
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 15),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",15),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 700, 1300),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 800, 2000),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 1200, 3000),
                (val_mul, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (try_end),
    (else_try),
        (this_or_next|eq, ":terrain", rt_water),
        (this_or_next|eq, ":terrain", rt_river),
        (eq, ":terrain", rt_bridge),
        (try_begin),#winter
            (this_or_next|eq, "$g_cur_month", 1),
            (this_or_next|eq, "$g_cur_month", 2),
            (this_or_next|eq, "$g_cur_month", 11),
            (eq, "$g_cur_month", 12),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 20),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 600, 700),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 700, 800),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 800, 1200),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#sommer
            (this_or_next|eq, "$g_cur_month", 5),
            (this_or_next|eq, "$g_cur_month", 6),
            (this_or_next|eq, "$g_cur_month", 7),
            (eq, "$g_cur_month", 8),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 10),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",10),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 1300, 2000),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 2000, 3000),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 3000, 6000),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#else
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 15),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",15),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 700, 1300),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 800, 2000),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 1200, 3000),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (try_end),
    (else_try),
        (this_or_next|eq, ":terrain", rt_snow),
        (eq, ":terrain", rt_snow_forest),
        (try_begin),#winter
            (this_or_next|eq, "$g_cur_month", 1),
            (this_or_next|eq, "$g_cur_month", 2),
            (this_or_next|eq, "$g_cur_month", 11),
            (eq, "$g_cur_month", 12),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 10),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 600, 700),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 700, 800),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 800, 1200),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#sommer
            (this_or_next|eq, "$g_cur_month", 5),
            (this_or_next|eq, "$g_cur_month", 6),
            (this_or_next|eq, "$g_cur_month", 7),
            (eq, "$g_cur_month", 8),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 5),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 1300, 2000),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 2000, 3000),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 3000, 6000),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#else
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 7),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 700, 1300),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 800, 2000),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 1200, 3000),
                (val_mul, ":random_2", 2),
                (val_mul, ":random_2", 3),
                (val_div, ":random_2", 2),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (try_end),
    (else_try),
        (this_or_next|eq, ":terrain", rt_desert),
        (eq, ":terrain", rt_desert_forest),
        (try_begin),#winter
            (this_or_next|eq, "$g_cur_month", 1),
            (this_or_next|eq, "$g_cur_month", 2),
            (this_or_next|eq, "$g_cur_month", 11),
            (eq, "$g_cur_month", 12),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 10),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 600, 700),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 700, 800),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 800, 1200),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#sommer
            (this_or_next|eq, "$g_cur_month", 5),
            (this_or_next|eq, "$g_cur_month", 6),
            (this_or_next|eq, "$g_cur_month", 7),
            (eq, "$g_cur_month", 8),
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 5),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 1300, 2000),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 2000, 3000),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 3000, 6000),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (else_try),#else
            (get_global_cloud_amount, ":clouds"),
            (store_add, ":upper_bound", ":clouds", 7),
            (val_min, ":upper_bound", ":clouds",100),
            (store_sub, ":lower_bound", ":clouds",20),
            (val_max, ":upper_bound", ":clouds", 10),
            (store_random_in_range, ":random", ":lower_bound", ":upper_bound"),
            (set_global_haze_amount, ":random"),
            (try_begin),
                (is_between, ":day_time", 9, 17),
                (store_random_in_range, ":random_2", 700, 1300),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFFB0C4DE),
            (else_try),
                (this_or_next|is_between, ":day_time", 6, 9),
                (is_between, ":day_time", 17, 20),
                (store_random_in_range, ":random_2", 800, 2000),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFFc7d7ec),
            (else_try),
                (store_random_in_range, ":random_2", 1200, 3000),
                (val_mul, ":random_2", 5),
                (set_fog_distance, ":random_2", 0xFF000000),
            (try_end),
        (try_end),
    (try_end),
    ])
]

vc_seasons = [          # 3 triggers

    (ti_before_mission_start, 0, 0, [
                 (get_global_cloud_amount, ":clouds"),
                 (is_between, ":clouds", 90, 101),
                 (neq, "$g_cur_month", 12), # not winter
                 (neg|is_between, "$g_cur_month", 1, 3),
                 (party_get_current_terrain, ":terrain","p_main_party"),
                 (neq, ":terrain", rt_desert_forest),
                 (neq, ":terrain", rt_desert),
                 (neq, ":terrain", rt_snow),
                 (neq, ":terrain", rt_snow_forest),
                 (neq, ":terrain", rt_water),
                 (neq, ":terrain", rt_bridge),
                 (neq, ":terrain", rt_river),
             ],
   [(set_rain, 1, 250)]),

#    (0, 0, ti_once, [],   # init wind
#    [
#      #shader, set wind shader properly
#      (assign, ":shader_wind_strength", "$wind_power"),
#
#      (val_mul, ":shader_wind_strength", 10),#wind_power: 0 - 4 -> 0 - 40
#      (val_div, ":shader_wind_strength", 4), # 0-10
#      (val_min, ":shader_wind_strength", 5),
#
#      (set_fixed_point_multiplier,10),
#      (set_shader_param_float, "@vWindStrength", ":shader_wind_strength"),
#      (set_fixed_point_multiplier, 1),
#      (set_shader_param_float, "@vWindDirection", 30),#30 degree
#      (set_fixed_point_multiplier,100),
#  ]),

    (0, 0, ti_once, [],
    [
      # light
      (set_fixed_point_multiplier, 100),
      (try_begin),
        (store_time_of_day, ":day_time"),
        (is_between, ":day_time", 4, 20),
        (get_startup_sun_light, pos1),
        (call_script, "script_calculate_season_light"),
        (set_startup_sun_light, reg1, reg2, reg3),
        (get_startup_ambient_light, pos1),
        (call_script, "script_calculate_season_light"),
        (set_startup_ambient_light, reg1, reg2, reg3),
        (get_startup_ground_ambient_light, pos1),
        (call_script, "script_calculate_season_light"),
        (set_startup_ground_ambient_light, reg1, reg2, reg3),
        (ge, "$cheat_mode", 1),
        (display_message, "@{!}season light set"),
      (end_try),
    ]),
]
thunder_storm =	[		# 4 trigger

  (0, 0, ti_once, #preparations 2
    [
      (assign, "$lightning_cycle", -1),
    ],
    [
    (try_begin),
        (party_get_current_terrain, ":terrain","p_main_party"),
        (neq, ":terrain", rt_desert_forest),
        (neq, ":terrain", rt_desert),
        (store_time_of_day, ":day_time"),
        (neg|is_between, ":day_time", 4, 20),
        (get_global_cloud_amount, ":clouds"),
        (ge, ":clouds", 65),
        (try_for_range, ":rand", 1, 11),
            (le, ":rand", 4),	# 20% chance
            (assign, "$lightning_cycle", 0),
            (try_begin),
                (neq, ":terrain", rt_desert_forest),
                (neq, ":terrain", rt_desert),
                (neq, ":terrain", rt_snow),
                (neq, ":terrain", rt_snow_forest),
                (set_rain, 1, 250),
            (end_try),
        (end_try),
    (end_try),

    (eq, "$lightning_cycle", 0),

    (set_fixed_point_multiplier, 100),

    (get_startup_sun_light, pos1),
    (position_get_x, "$sun_r", pos1),	# r
    (position_get_y, "$sun_g", pos1), # g
    (position_get_z, "$sun_b", pos1),	# b
    (get_startup_ambient_light, pos1),
    (position_get_x, "$amb_r", pos1),	# r
    (position_get_y, "$amb_g", pos1), # g
    (position_get_z, "$amb_b", pos1),	# b
  ]),

  (3, 0.2, 6, 			#lightning 1
    [
      (eq,"$lightning_cycle",0),
      (store_random_in_range,":chance",1,5),
      (eq,":chance",1),
      (play_sound,"snd_thunder"),
      (set_startup_sun_light, 1000, 1000, 1000),
      (set_startup_ambient_light, 1000, 1000, 1000),
    ],
    [
      (set_startup_sun_light, 0, 0, 0),
      (set_startup_ambient_light, 0, 0, 0),
      (assign, "$lightning_cycle",1),
  ]),

  (0.4,0.1, 6,			#lightning 2
    [
      (eq,"$lightning_cycle",1),

      (set_startup_sun_light, 220, 220, 220),
      (set_startup_ambient_light, 220, 220, 220),
    ],
    [
      (set_startup_sun_light, 1, 1, 1),
      (set_startup_ambient_light, 1, 1, 1),
      (assign,"$lightning_cycle",2),
  ]),

  (0.5,0.1, 6,			#lightning 3
    [
      (eq,"$lightning_cycle",2),
      (set_startup_sun_light, 150, 150, 150),
      (set_startup_ambient_light, 150, 150, 150),
    ],
    [
      (set_startup_sun_light, "$sun_r", "$sun_g", "$sun_b"),
      (set_startup_ambient_light, "$amb_r", "$amb_g", "$amb_b"),
      (assign,"$lightning_cycle", 0),
  ]),
]

vc_water = [			# 5 trigger
(ti_before_mission_start, 0, 0,[],[
(assign, "$player_ship_number", -1),
(assign, "$player_ship_captain", -1),
]),
  (ti_on_agent_spawn, 0, ti_once, [],		#preparations
    [
      (assign, ":beaufort_copy", "$beaufort"),
      (store_current_scene, ":cur_scene"),
	(try_begin),
        (neq, ":cur_scene", "scn_sea_battle"),
        (assign, "$beaufort", 1),
        (val_min, "$beaufort", ":beaufort_copy"),
      (end_try),
      (call_script, "script_get_wave_properties"),
      (assign, "$Amplitude_x",	reg1),
      (assign, "$Amplitude_y",	reg2),
      (assign, "$lamda_x",		reg3),
      (assign, "$lamda_y",		reg4),
      (assign, "$wavespeed_y", 	reg6),
      (assign, "$target_Amplitude_x",	"$Amplitude_x"),
      (assign, "$target_Amplitude_y",	"$Amplitude_y"),

      (call_script, "script_set_wave_shader"),
      (assign, "$beaufort", ":beaufort_copy"),
  ]),
  (0, 0, 0.02, [],	# wave timer
    [
      (try_begin),
        (is_between, "$wave_timer", 0, 6283),
        (val_add, "$wave_timer", 1),
      (else_try),
        (assign, "$wave_timer", 0),
      (end_try),
      (call_script, "script_set_wave_timer"),
  ]),
  (5, 0, 15, [(store_random_in_range,":chance",1,4),(eq,":chance",1),],	# comands wave change
    [
      (assign, ":beaufort_copy", "$beaufort"),
      (store_current_scene, ":cur_scene"),
      (try_begin),
        #QUESTS END
        (neq, ":cur_scene", "scn_sea_battle"),
        (assign, "$beaufort", 1),
        (val_min, "$beaufort", ":beaufort_copy"),
      (end_try),
      (call_script, "script_get_wave_properties"),
      (shuffle_range, 1, 3),
      (assign, "$target_Amplitude_x",	reg1),
      (assign, "$target_Amplitude_y",	reg2),
      (assign, "$beaufort", ":beaufort_copy"),
  ]),
  (0.05, 0, 0, [],		# executes wave change
    [
      (assign, ":amplitude_change", 20),
      (try_begin),
        (lt, "$Amplitude_x", "$target_Amplitude_x"),
        (store_sub, ":value", "$target_Amplitude_x", "$Amplitude_x"),
        (ge, ":value", ":amplitude_change"),
        (val_add, "$Amplitude_x", ":amplitude_change"),
      (else_try),
        (gt, "$Amplitude_x", "$target_Amplitude_x"),
        (store_sub, ":value", "$Amplitude_x", "$target_Amplitude_x"),
        (ge, ":value", ":amplitude_change"),
        (val_sub, "$Amplitude_x", ":amplitude_change"),
      (end_try),

      (try_begin),
        (lt, "$Amplitude_y", "$target_Amplitude_y"),
        (store_sub, ":value", "$target_Amplitude_y", "$Amplitude_y"),
        (ge, ":value", ":amplitude_change"),
        (val_add, "$Amplitude_y", ":amplitude_change"),
      (else_try),
        (gt, "$Amplitude_y", "$target_Amplitude_y"),
        (store_sub, ":value", "$Amplitude_y", "$target_Amplitude_y"),
        (ge, ":value", ":amplitude_change"),
        (val_sub, "$Amplitude_y", ":amplitude_change"),
      (end_try),

      (set_fixed_point_multiplier,10000),
      (set_shader_param_float4, "@vWaveInfo", "$Amplitude_x", "$Amplitude_y", "$WaveNumber_x", "$WaveNumber_y"),
      (store_add, ":Origin_z", "$Amplitude_x", "$Amplitude_y"), # This can be used to alter overall sea level
      (set_shader_param_float4, "@vWaveOrigin", 0, 0, ":Origin_z", 0),
      (set_fixed_point_multiplier,100),
  ]),
  (0, 0, 0,
    [(key_is_down, key_left_control), (eq, "$cheat_mode", 1), (key_clicked, key_p),],	# testing
    [
      (try_begin),
        (lt, "$beaufort", 12),
        (val_add, "$beaufort", 1),
      (else_try),
        (assign, "$beaufort", 0),
      (end_try),
      (assign, reg1, "$beaufort"),
      (display_message, "@{!}beaufort: {reg1}"),

      (call_script, "script_get_wave_properties"),
      (assign, "$Amplitude_x",	reg1),
      (assign, "$Amplitude_y",	reg2),
      (assign, "$lamda_x",		reg3),
      (assign, "$lamda_y",		reg4),
      (assign, "$wavespeed_y", 	reg6),
      (assign, "$target_Amplitude_x",	reg1),
      (assign, "$target_Amplitude_y",	reg2),
      (call_script, "script_set_wave_shader"),
  ]),
]
vc_wind = [
(ti_before_mission_start, 0, 0, [],
    [
(assign, ":party", "p_main_party"),
	(try_begin),
	(eq, "$freelancer_state", 1),
	(gt, "$enlisted_party", 0),
	(party_is_active, "$enlisted_party"),
	(assign, ":party", "$enlisted_party"),
	(try_end),
(try_begin),
(party_slot_eq, ":party", slot_party_on_water, 0),
(assign, "$beaufort", 1),
(else_try),
(party_slot_eq, ":party", slot_party_on_water, 1),
(store_random_in_range, "$beaufort", 3, 7),  #always have nice waves at sea
(try_end),
  ]),

  (0, 0, ti_once, [],	# init wind
    [
(assign, ":party", "p_main_party"),
	(try_begin),
	(eq, "$freelancer_state", 1),
	(gt, "$enlisted_party", 0),
	(party_is_active, "$enlisted_party"),
	(assign, ":party", "$enlisted_party"),
	(try_end),
      (set_fixed_point_multiplier,100),
      (try_begin),
        (scene_prop_get_num_instances, reg1, "spr_wind"),
        (le, reg1, 0),
        (spawn_scene_prop, "spr_wind"),
        (assign, "$wind_spr", reg0),
        (store_random_in_range, ":angle", 0, 360),
        (try_begin),#testing
          (ge, "$vc_debug_mode", 2),
          (assign, reg8, ":angle"),
          (display_message, "@{!}TEST: wind created and rotated by {reg8} degree."),
        (end_try),#testing
        (prop_instance_get_position, pos2, "$wind_spr"),
        (position_rotate_z, pos2, ":angle"),
        (prop_instance_set_position, "$wind_spr",pos2),
        (assign, "$block_wind_change", 0),
      (else_try),
        (scene_prop_get_instance, "$wind_spr", "spr_wind", 0),
        (prop_instance_get_position, pos2, "$wind_spr"),
        (assign, "$block_wind_change", 1),
      (end_try),

      (try_begin),
        (ge, "$beaufort", 5),
        (assign, "$wind_strenght", 100),
      (else_try),
        (store_mul, "$wind_strenght", "$beaufort", 20),
      (end_try),

      #shader
      (store_mul, ":shader_wind_strenght", "$beaufort", 10),
      (val_div, ":shader_wind_strenght", 4), # 0-30
      (try_begin),
        (party_slot_eq, ":party", slot_party_on_water, 0),
        (val_div, ":shader_wind_strenght", 10), # 0-10		#lower wind on land VC-1921
      (end_try),
      (set_fixed_point_multiplier,10),
      (set_shader_param_float, "@vWindStrength", ":shader_wind_strenght"),
      (set_fixed_point_multiplier, 1),
      (position_get_rotation_around_z, ":angle", pos2),
      (set_shader_param_float, "@vWindDirection", ":angle"),
      (set_fixed_point_multiplier,100),
  ]),

  (59, 0, 0, [(neq, "$block_wind_change", 1),],		# change wind
    [
      (store_random_in_range, ":chance", 1, 4), #every three minutes, in other words, on average
      (eq, ":chance", 1),
      (set_fixed_point_multiplier,100),
      (store_random_in_range, ":angle", -30, 31),
      (prop_instance_get_position, pos2, "$wind_spr"),
      (position_rotate_z, pos2, ":angle"),
      #(prop_instance_set_position, "$wind_spr",pos2),
      (prop_instance_animate_to_position, "$wind_spr", pos2, 1000),
      #(display_message, "@The wind direction changed."),
      #shader
      (set_fixed_point_multiplier,1),
      (position_get_rotation_around_z, ":angle", pos2),
      (set_shader_param_float, "@vWindDirection", ":angle"),
      (set_fixed_point_multiplier,100),
  ])

]

core_ship_system = [	# 6 trigger
  (ti_before_mission_start, 0, ti_once, [],		#preparations
    [
      (set_fixed_point_multiplier, 100),
      # FADE
      (mission_cam_set_screen_color, 0xFF000000),
      (mission_cam_animate_to_screen_color, 0x00000000, 2000),

      # ACCORDING SPAWNING
      (assign, "$team_0_ship_counter", 0),
      (assign, "$team_1_ship_counter", 0),
      (assign, "$team_0_agent_counter", 0),
      (assign, "$team_1_agent_counter", 0),
      (assign, "$last_spawned_ship_team_0", 0),
      (assign, "$last_spawned_ship_team_1", 0),
      #new:
      (assign, "$number_of_ships_global", 0),

      # ACCORDING CONTROL
      (assign, "$block_ship_ai", 0),
      (assign, "$block_player_ship_control", 0),
      (assign, "$player_ship_number", -1),

      # ACCORDING COASTAL ASSAULT
      (assign, "$first_ship_landet", 0),

      # ACCORDING CAMERA
      (assign, "$cam_mode", 0),
      (mission_cam_set_mode, 0, 0, 0),

      # ACCORDING REINFORCEMENT
      (assign,"$defender_reinforcement_stage",0),
      (assign,"$attacker_reinforcement_stage",0),
      (assign,"$g_defender_reinforcement_limit",2),
      (assign,"$g_attacker_reinforcement_limit",2),

      # ACCORDING WAVES
      #(assign, "$wave_timer", 0),
      (assign, "$last_wave_timer", "$wave_timer"),
      (assign, "$schader_timer_on", 1),

      # ACCORDING VC-2035
      #(set_physics_delta_time, 0.5),

      (assign, "$main_trigger_on", 1),
  ]),
  (0, 0, 0.25, [(eq, "$main_trigger_on", 1),],	# main trigger
    [

      # CONCORDANCE WITH WAVES
      (store_sub, "$wave_timer_diff", "$wave_timer", "$last_wave_timer"), #Depends on player FPS
      (assign, "$last_wave_timer", "$wave_timer"),

      # MAIN SCRIPT !!!
      (call_script, "script_put_the_Klabautermann_into_the_ships"),

      # ACCORDING CAMERA
      (try_begin),
        (eq, "$cam_mode", 1),
        (neg|eq, "$player_ship_number", -1),
        (scene_prop_get_instance, ":ship_instance", "spr_dyn_ship_substrate", "$player_ship_number"),
        (prop_instance_get_position, pos2, ":ship_instance"),
        (position_get_rotation_around_x, ":rotation", pos2),
        (val_mul, ":rotation",-1),
        (position_rotate_x, pos2, ":rotation"),
        (position_get_rotation_around_y, ":rotation", pos2),
        (val_mul, ":rotation",-1),
        (position_rotate_y, pos2, ":rotation"),
        (position_get_rotation_around_z, ":rotation", pos2),
        (val_mul, ":rotation",-1),
        (position_rotate_z, pos2, ":rotation"),
        (position_move_z, pos2, 500, 1),
        (get_player_agent_no, ":agent"),
        (agent_get_look_position, pos9, ":agent"),
        (position_copy_rotation, pos2, pos9),
        (scene_prop_get_slot, ":distance", ":ship_instance", scene_prop_distance_to_front),
        (val_mul, ":distance", -2),
        (position_move_y, pos2, ":distance"),
        #
        (copy_position, pos1, pos2),
        (call_script, "script_calculate_rocking_to_pos1"),
        (position_get_z, ":z_water", pos1),
        (position_get_z, ":z", pos2),
        (val_max, ":z", ":z_water"),
        (val_add, ":z", 15),
        (position_set_z, pos2, ":z"),
        #
        (mission_cam_animate_to_position, pos2, 300, 0),
      (end_try),
  ]),
  (1, 0, 0, [],		# sound etc.
    [
      # ACCORDING VC-2035
      # (assign, reg7, "$wave_timer_diff"),
      # (display_message, "@{!}TEST: wave_timer_diff = {reg7}"),
      # (try_begin),
      # (ge, "$wave_timer_diff", 11),
      # (set_physics_delta_time, 0.025),
      # (else_try),
      # (ge, "$wave_timer_diff", 10),
      # (set_physics_delta_time, 0.05),
      # (else_try),
      # (ge, "$wave_timer_diff", 9),
      # (set_physics_delta_time, 0.1),
      # (else_try),
      # (ge, "$wave_timer_diff", 8),
      # (set_physics_delta_time, 0.2),
      # (else_try),
      # (ge, "$wave_timer_diff", 6),
      # (set_physics_delta_time, 0.5),
      # (else_try),
      # (set_physics_delta_time, 1),
      # (end_try),

      # ACCORDING MAIN SCRIPT
      (call_script, "script_check_player_ship"),
      (call_script, "script_check_ship_team"),

      # ACCORDING SOUND
      #(scene_prop_get_num_instances, ":number_of_ships", "spr_dyn_ship_substrate"),
      (try_for_range,":ship_number", 0, "$number_of_ships_global"),
        (try_begin),
          (this_or_next|eq, "$coastal_battle", 0),  #don't play ship sound in coastal battle unless player has a ship
          (eq, ":ship_number", "$player_ship_number"),

          (this_or_next|eq, ":ship_number", "$player_ship_number"),
          (eq, ":ship_number", 0),		# Only 2 ships max

          (scene_prop_get_instance, ":ship_instance", "spr_dyn_ship_substrate", ":ship_number"),
          (scene_prop_get_slot, ":speed", ":ship_instance", scene_prop_last_speed),
          (scene_prop_get_slot, ":sound", ":ship_instance", scene_prop_sound),
          #(scene_prop_get_slot, ":ship_main_instance", ":ship_instance", scene_prop_main_instance),
          (try_begin),
            (le, ":sound", 0),
            (neg|is_between, ":speed", -5, 6),
            (prop_instance_stop_sound, ":ship_instance"),
            (prop_instance_play_sound, ":ship_instance", "snd_ship_sailing_loop"),
            (scene_prop_set_slot, ":ship_instance", scene_prop_sound, 1),
          (else_try),
            (ge, ":sound", 0),
            (is_between, ":speed", -5, 6),
            (prop_instance_stop_sound, ":ship_instance"),
            (prop_instance_play_sound, ":ship_instance", "snd_ship_static_loop"),
            (scene_prop_set_slot, ":ship_instance", scene_prop_sound, -1),
          (try_end),
        (try_end),

        # ACCORDING ROWING
        (scene_prop_get_instance, ":ship_instance", "spr_dyn_ship_substrate", ":ship_number"),
        (scene_prop_get_slot, ":rowing", ":ship_instance", scene_prop_rowing),
        (scene_prop_get_slot, ":sail", ":ship_instance", scene_prop_sail),
        (scene_prop_get_slot, ":boarding_progress", ":ship_instance", scene_prop_boarding_progress),
        (scene_prop_get_slot, ":oar_state", ":ship_instance", scene_prop_oar_state),
        (scene_prop_get_slot, ":ship_main_instance", ":ship_instance", scene_prop_main_instance),

        (assign, ":block", 0),
        (prop_instance_get_position, pos11, ":ship_instance"),
        (scene_prop_get_slot, ":ship_type", ":ship_instance", scene_prop_ship_type),
        (call_script, "script_get_ship_properties", ":ship_type"),
        (assign, ":ship1_distance", reg4),

        # Distance to other ships
        (try_for_range, ":ship2_number", 0, "$number_of_ships_global"),
          (neq, ":ship_number", ":ship2_number"),
          (scene_prop_get_instance, ":ship2_instance", "spr_dyn_ship_substrate", ":ship2_number"),
          (prop_instance_get_position, pos12, ":ship2_instance"),
          (get_distance_between_positions, ":distance", pos11, pos12),
          (lt, ":distance", 4000),#40m
          (scene_prop_get_slot, ":ship2_type", ":ship2_instance", scene_prop_ship_type),
          (call_script, "script_get_ship_properties", ":ship2_type"),
          (store_add, ":max_distance", ":ship1_distance", reg4),
          #(val_sub, ":max_distance", 100),
          (lt, ":distance", ":max_distance"),
          (assign, ":block", 1),
          (assign, ":ship2_number", "$number_of_ships_global"),	#loop breaker
        (end_try),

        # Distance to barriers
        (scene_prop_get_num_instances, ":number_of_barriers", "spr_barrier_ship"),
        (try_for_range,":ship_barrier_number", 0, ":number_of_barriers"),
          (scene_prop_get_instance, ":curr_ship_barrier_id", "spr_barrier_ship", ":ship_barrier_number"),
          (prop_instance_get_position, pos12, ":curr_ship_barrier_id"),
          (position_move_z, pos12, 1000),
          (get_distance_between_positions, ":distance", pos11, pos12),
          (store_add, ":max_distance", ":ship1_distance", 1600),	#15m = special size of some barrier objects
          (lt, ":distance", ":max_distance"),
          (assign, ":block", 1),
        (end_try),

        # landed?
        (try_begin),
          (eq, ":boarding_progress", -1),
          (assign, ":block", 1),
        (end_try),

        (scene_prop_get_slot, ":crew_number", ":ship_instance", scene_prop_crew_number),
        (store_mul, ":crew_in_percent", ":crew_number", 100),
        (scene_prop_get_slot, ":ship_type", ":ship_instance", scene_prop_ship_type),
        (call_script, "script_get_ship_properties", ":ship_type"),
        (val_div, ":crew_in_percent", reg6),

        (try_begin),
          #(this_or_next|eq, ":block", 1),	# = Block
          #(le, ":crew_number", 1),
          (le, ":crew_number", 0), #madsci if there's only 1 person on a boat, the boat should still move
          (assign, ":oar_stacks", 0),
        (else_try),
          (lt, ":crew_in_percent", 20),
          (assign, ":oar_stacks", 1),
        (else_try),
          (lt, ":crew_in_percent", 40),
          (assign, ":oar_stacks", 2),
        (else_try),
          (lt, ":crew_in_percent", 60),
          (assign, ":oar_stacks", 3),
        (else_try),
          (lt, ":crew_in_percent", 80),
          (assign, ":oar_stacks", 4),
        (else_try),
          (assign, ":oar_stacks", 5),
        (end_try),

        (scene_prop_get_slot, ":main_instance", ":ship_instance", scene_prop_main_instance),
        (store_add, ":oar_stacks_plus_5", ":oar_stacks", 5),
        (try_for_range, ":sub_mesh_no", 6, 11),
          (try_begin),
            (le, ":sub_mesh_no", ":oar_stacks_plus_5"),
            (prop_instance_set_material, ":main_instance", ":sub_mesh_no", "@{!}vc_ships_various01"),
          (else_try),
            (prop_instance_set_material, ":main_instance", ":sub_mesh_no", "@{!}alpha"),
          (end_try),
        (end_try),

        (prop_instance_get_current_deform_frame, ":current_frame", ":ship_main_instance"),
        (try_begin),
          (eq, ":oar_stacks", 0),	# = Block
        (else_try),
          # Bring oars back in ship
          (eq, ":block", 1),
          (le, ":current_frame", 310),
          (neq, ":sail", 1),
          (scene_prop_slot_eq,":ship_instance", scene_prop_boarding_left, 0),	#VC-2271
          (scene_prop_slot_eq,":ship_instance", scene_prop_boarding_right, 0),	#VC-2271

          (prop_instance_deform_in_range, ":ship_main_instance", ":current_frame", 321, 900),
          (assign, ":oar_state", 0),
        (else_try),
          (eq, ":block", 1),
        (else_try),
          (eq, ":oar_state", 0),
          (le, ":current_frame", 310),
          (gt, ":rowing", 50),
          (prop_instance_deform_in_cycle_loop, ":ship_main_instance", 10, 300, 2000),
          (assign, ":oar_state", ":rowing"),
        (else_try),
          (eq, ":oar_state", 0),
          (le, ":current_frame", 310),
          (gt, ":rowing", 0),
          (prop_instance_deform_in_cycle_loop, ":ship_main_instance", 10, 300, 3500),
          (assign, ":oar_state", ":rowing"),
        (else_try),
          (eq, ":oar_state", 0),
          (le, ":current_frame", 310),
          (lt, ":rowing", 0),
          (prop_instance_deform_in_cycle_loop, ":ship_main_instance", 300, 10, 3500),
          (assign, ":oar_state", ":rowing"),
        (else_try),
          (neq, ":rowing", ":oar_state"),
          (prop_instance_deform_in_range, ":ship_main_instance", ":current_frame", 300, 900),
          (assign, ":oar_state", 0),	# 0 = main position
        (else_try),
          (eq, ":rowing", 0),
          (eq, ":oar_state", 0),
          #(eq, ":current_frame", 310),
          (prop_instance_deform_in_range, ":ship_main_instance", ":current_frame", 321, 900),
          #(assign, ":oar_state", 0),	# 0 = main position
        (end_try),

        (scene_prop_set_slot, ":ship_instance", scene_prop_oar_state, ":oar_state"),
      (end_try),
  ]),
  ship_rowing_sounds,
  (0, 0, 0, [(key_is_down, key_left_control),(eq, "$cheat_mode", 1),],[	# commands

      (try_begin),
        ### block_ship_ai
        (key_clicked, key_k),
        (try_begin),
          (eq, "$block_ship_ai", 0),
          (assign, "$block_ship_ai", 1),
          (display_message, "@{!}Ship AI off."),
        (else_try),
          (eq, "$block_ship_ai", 1),
          (assign, "$block_ship_ai", 0),
          (display_message, "@{!}Ship AI on."),
        (try_end),
      (else_try),

        ### keep_agent_on_board
        (key_clicked, key_w),
        (try_begin),
          (eq, "$keep_agent_on_board_disabled", 0),
          (assign, "$keep_agent_on_board_disabled", 1),
          (display_message, "@{!}keep_agent_on_board off."),
        (else_try),
          (assign, "$keep_agent_on_board_disabled", 0),
          (display_message, "@{!}keep_agent_on_board on."),
        (try_end),
      (else_try),

        ### main_trigger_reaction
        (key_clicked, key_e),
        (try_begin),
          (eq, "$main_trigger_reaction_disabled", 0),
          (assign, "$main_trigger_reaction_disabled", 1),
          (display_message, "@{!}main_trigger_reaction off."),
        (else_try),
          (assign, "$main_trigger_reaction_disabled", 0),
          (display_message, "@{!}main_trigger_reaction on."),
        (try_end),
      (else_try),

        ### collision_check
        (key_clicked, key_s),
        (try_begin),
          (eq, "$collision_check_disabled", 0),
          (assign, "$collision_check_disabled", 1),
          (display_message, "@{!}collision_check off."),
        (else_try),
          (assign, "$collision_check_disabled", 0),
          (display_message, "@{!}collision_check on."),
        (try_end),
      (else_try),

        ### aground_check
        (key_clicked, key_a),
        (try_begin),
          (eq, "$aground_check_disabled", 0),
          (assign, "$aground_check_disabled", 1),
          (display_message, "@{!}aground_check off."),
        (else_try),
          (assign, "$aground_check_disabled", 0),
          (display_message, "@{!}aground_check on."),
        (try_end),
      (else_try),

        ### main_trigger_on
        (key_clicked, key_d),
        (try_begin),
          (eq, "$main_trigger_on", 0),
          (assign, "$main_trigger_on", 1),
          (display_message, "@{!}main_trigger_on."),
        (else_try),
          (eq, "$main_trigger_on", 1),
          (assign, "$main_trigger_on", 0),
          (display_message, "@{!}main_trigger_off."),
        (try_end),
      (else_try),

        ### block_player_ship_control
        (key_clicked, key_j),
        (eq, "$cheat_mode", 1),
        (try_begin),
          (eq, "$block_player_ship_control", 0),
          (assign, "$block_player_ship_control", 1),
          (display_message, "@{!}Player ship control off."),
        (else_try),
          (eq, "$block_player_ship_control", 1),
          (assign, "$block_player_ship_control", 0),
          (display_message, "@{!}Player ship control on."),
        (try_end),
      (else_try),



        ### TESTING 3		"$wave_timer"
        (key_clicked, key_j),
        (val_add, "$wave_timer", 20),
        (assign, reg1, "$wave_timer"),
        (display_message, "@{!}wave_timer: {reg1}"),
        (set_fixed_point_multiplier, 1000),
        (set_shader_param_float, "@vTimer", "$wave_timer"),
        (set_fixed_point_multiplier, 100),
      (else_try),

        ### TESTING 4
        (key_clicked, key_g),
        (val_sub, "$wave_timer", 20),
        (assign, reg1, "$wave_timer"),
        (display_message, "@{!}wave_timer: {reg1}"),
        (set_fixed_point_multiplier, 1000),
        (set_shader_param_float, "@vTimer", "$wave_timer"),
        (set_fixed_point_multiplier, 100),
      (else_try),

        ### TESTING y Axis
        (key_is_down, key_z),
        (assign, ":block", 0),
        (try_begin),
          (key_is_down, key_b),
          (key_clicked, key_up),
          (val_add, "$lamda_y", 500),
        (else_try),
          (key_is_down, key_b),
          (key_clicked, key_down),
          (val_sub, "$lamda_y", 500),
        (else_try),
          (key_is_down, key_v),
          (key_clicked, key_up),
          (val_add, "$Amplitude_y", 1000),
        (else_try),
          (key_is_down, key_v),
          (key_clicked, key_down),
          (val_sub, "$Amplitude_y", 1000),
        (else_try),
          (key_is_down, key_n),
          (key_clicked, key_up),
          (val_add, "$wavespeed_y", 10),
        (else_try),
          (key_is_down, key_n),
          (key_clicked, key_down),
          (val_sub, "$wavespeed_y", 10),
        (else_try),
          (assign, ":block", 1),
        (end_try),

        (try_begin),
          (eq, ":block", 0),
          #
          (store_div, "$WaveNumber_y", 3141592 * 2, "$lamda_y"),
          (store_mul, "$omega_y", "$WaveNumber_y", "$wavespeed_y"),
          (val_div, "$omega_y", 10000),	# 2 + 2 new for wavespeed

          #
          (set_fixed_point_multiplier,10000),
          (set_shader_param_float4, "@vWaveInfo", "$Amplitude_x", "$Amplitude_y", "$WaveNumber_x", "$WaveNumber_y"),
          (store_add, ":Origin_z", "$Amplitude_x", "$Amplitude_y"), # This can be used to alter overall sea level
          (set_shader_param_float4, "@vWaveOrigin", 0, 0, ":Origin_z", 0),
          (set_fixed_point_multiplier,100),

          (store_div, reg1, "$Amplitude_x", 100),
          #(val_div, reg1, 100),
          (store_div, reg2, "$Amplitude_y", 100),
          #(val_div, reg2, 100),
          (assign, reg3, "$lamda_x"),
          (assign, reg4, "$lamda_y"),
          (assign, reg5, "$wavespeed_y"),
          #(display_message, "@{!}X: WaveLength:{reg3}m WaveHight:{reg1}cm"),
          (display_message, "@{!}Y: WaveLength:{reg4}cm WaveHight:{reg2}cm WaveSpeed: {reg5}"),
        (end_try),

      (else_try),

        ### TESTING x Axis
        (key_is_down, key_x),
        (assign, ":block", 0),
        (try_begin),
          (key_is_down, key_b),
          (key_clicked, key_up),
          (val_add, "$lamda_x", 500),
        (else_try),
          (key_is_down, key_b),
          (key_clicked, key_down),
          (val_sub, "$lamda_x", 500),
        (else_try),
          (key_is_down, key_v),
          (key_clicked, key_up),
          (val_add, "$Amplitude_x", 1000),
        (else_try),
          (key_is_down, key_v),
          (key_clicked, key_down),
          (val_sub, "$Amplitude_x", 1000),
        (else_try),
          (assign, ":block", 1),
        (end_try),

        (try_begin),
          (eq, ":block", 0),
          (store_div, "$WaveNumber_x", 3141592 * 2, "$lamda_x"),
          (set_fixed_point_multiplier,10000),
          (set_shader_param_float4, "@vWaveInfo", "$Amplitude_x", "$Amplitude_y", "$WaveNumber_x", "$WaveNumber_y"),
          (store_add, ":Origin_z", "$Amplitude_x", "$Amplitude_y"), # This can be used to alter overall sea level
          (set_shader_param_float4, "@vWaveOrigin", 0, 0, ":Origin_z", 0),
          (set_fixed_point_multiplier,100),
          (assign, reg1, "$Amplitude_x"),
          (val_div, reg1, 100),
          (assign, reg2, "$Amplitude_y"),
          (val_div, reg2, 100),
          (assign, reg3, "$lamda_x"),
          (assign, reg4, "$lamda_y"),
          (display_message, "@{!}X: WaveLength:{reg3}m WaveHight:{reg1}cm"),
          #(display_message, "@{!}Y: WaveLength:{reg4}m WaveHight:{reg2}cm"),
        (end_try),
      (try_end),
  ]),

  (2.7, 0, 0, [],	#FLYING ITEMS	# VC-1804
    [
      (try_for_prop_instances, ":item_instance", -1, somt_spawned_unsheathed_item),
        (scene_prop_slot_eq, ":item_instance", scene_prop_timer, 0),
        (scene_prop_set_slot, ":item_instance", scene_prop_timer, 1),
        # (assign, reg1, ":item_instance"),
        # (display_message, "@{!}TEST: I found a scene_spawned_item: {reg1}"),
        (prop_instance_get_position, pos1, ":item_instance"),
        # (position_get_distance_to_terrain, ":distance", pos1),
        # (val_mul, ":distance", -1),
        (position_set_z, pos1, -3500),
        # (position_move_z, pos1, ":distance"),
        (prop_instance_animate_to_position, ":item_instance", pos1, 500),
        (scene_prop_fade_out, ":item_instance", 500),
      (end_try),
  ]),

]

coastal_defender_formation = [
  # 2 triggers
  # for coastal batlle only
  (1, 0, ti_once, [(eq, "$first_ship_landet", 0)],
    [
      (assign, ":agent_counter", 0),
      (try_for_agents,":agent"),
        (agent_is_alive,":agent"),
        (agent_is_human,":agent"),
        (agent_is_non_player, ":agent"),
        (agent_get_team, ":team", ":agent"),
        (eq, ":team", 0),
        (try_begin),
          (le, ":agent_counter", 0),
          (entry_point_get_position, pos4, 50),
          (position_move_x, pos4, -1000),
        (else_try),
          (this_or_next|eq, ":agent_counter", 21),
          (this_or_next|eq, ":agent_counter", 41),
          (this_or_next|eq, ":agent_counter", 61),
          (eq, ":agent_counter", 81),
          (position_move_y, pos4, -100),
          (position_move_x, pos4, -2000),
        (end_try),
        (agent_set_scripted_destination,":agent",pos4,0),
        (position_move_x, pos4, 100),
        (val_add, ":agent_counter", 1),
      (end_try),
  ]),

  (1, 0, 0, [(eq, "$first_ship_landet", 1)],
    [
      (try_for_agents,":agent"),
        (agent_is_alive,":agent"),
        (agent_is_human,":agent"),
        (agent_is_non_player, ":agent"),
        (agent_get_team, ":team", ":agent"),
        (eq, ":team", 0),
        (agent_clear_scripted_mode, ":agent"),
        (agent_ai_set_aggressiveness, ":agent", 299), #!
      (end_try),
      (assign, "$first_ship_landet", 2),
  ]),

#madsci automated ships in freelancer
(1, 0, ti_once, [(eq, "$freelancer_state", 1),], [
(get_player_agent_no, ":player_agent"),
(agent_get_team, ":player_team", ":player_agent"),
(try_begin),
(assign, ":has_friends", 0),
	(try_for_agents, ":agent_no"),
	(eq, ":has_friends", 0),
	(agent_is_human, ":agent_no"),
	(agent_is_alive, ":agent_no"),
	(agent_get_team, ":team_no", ":agent_no"),
	(neq, ":team_no", ":player_team"),
	(neg|teams_are_enemies, ":team_no", ":player_team"),
	(try_end),
(eq, ":has_friends", 1),
(assign, "$block_player_ship_control", 1),
(try_end),
]),
]
player_only_drowning =(	#VC-3182
  1, 0, 0, [],[
    (try_begin),
      (store_mission_timer_a, ":cur_time"),
      (gt, ":cur_time", 5),
      (set_fixed_point_multiplier, 100),
      (get_player_agent_no, ":agent"),
      (agent_is_alive,":agent"),
      (agent_is_active,":agent"),
      (agent_get_position,pos6,":agent"),
      (position_get_z, ":deep", pos6),
      (lt, ":deep", -200),
      (agent_set_hit_points, ":agent", 0, 1),
      (agent_deliver_damage_to_agent, ":agent", ":agent" ,1),
    (end_try),
])
vc_weather = vc_water + vc_wind + vc_seasons + thunder_storm + improved_lighting

##BEAN BEGIN - Deathcam
bean_common_init_deathcam = (
   0, 0, ti_once,
   [],
   [
        (assign, "$deathcam_on", 0),
        (assign, "$deathcam_death_pos_x", 0),
        (assign, "$deathcam_death_pos_y", 0),
        (assign, "$deathcam_death_pos_z", 0),

        (assign, "$deathcam_mouse_last_x", 5000),
        (assign, "$deathcam_mouse_last_y", 3750),

        (assign, "$deathcam_mouse_last_notmoved_x", 5000),
        (assign, "$deathcam_mouse_last_notmoved_y", 3750),
        (assign, "$deathcam_mouse_notmoved_x", 5000), #Center screen (10k fixed pos)
        (assign, "$deathcam_mouse_notmoved_y", 3750),
        (assign, "$deathcam_mouse_notmoved_counter", 0),

        (assign, "$deathcam_total_rotx", 0),

        (assign, "$deathcam_sensitivity_x", 400), #4:3 ratio may be best
        (assign, "$deathcam_sensitivity_y", 300), #If modified, change values in common_move_deathcam

        (assign, "$deathcam_prsnt_was_active", 0),

        (assign, "$deathcam_keyboard_rotation_x", 0),
        (assign, "$deathcam_keyboard_rotation_y", 0),
        (assign, "$deathcam_flip_y_multiplier", 1),

        (get_player_agent_no, ":player_agent"),
        (agent_get_team, "$deathcam_player_team", ":player_agent"),
   ]
)

bean_common_start_deathcam = (
    0, 1, ti_once, #1 second delay before the camera activates
    [
        (main_hero_fallen),
        (eq, "$deathcam_on", 0),
    ],
    [
        (set_fixed_point_multiplier, 10000),
        (assign, "$deathcam_on", 1),

        (display_message, "@You were defeated.", 0xFF0000),
        (display_message, "@Rotate with the mouse. Move with standard keys."),
        #(display_message, "@Shift/Control for Up/Down. Space Bar to increase speed."),
        #(display_message, "@Numpad Plus/Minus to change sensitivity. Numpad to rotate."),
        #(display_message, "@Home to reset position. End to flip Y rotation"),

        (mission_cam_get_position, pos1), #Death pos
        (position_get_x, reg3, pos1),
        (position_get_y, reg4, pos1),
        (position_get_z, reg5, pos1),
        (assign, "$deathcam_death_pos_x", reg3),
        (assign, "$deathcam_death_pos_y", reg4),
        (assign, "$deathcam_death_pos_z", reg5),
        (position_get_rotation_around_z, ":rot_z", pos1),

        (init_position, pos47),
        (position_copy_origin, pos47, pos1), #Copy X,Y,Z pos
        (position_rotate_z, pos47, ":rot_z"), #Copying X-Rotation is likely possible, but I haven't figured it out yet

        (mission_cam_set_mode, 1, 0, 0), #Manual?

        (mission_cam_set_position, pos47),

        (team_give_order, "$deathcam_player_team", grc_everyone, mordr_charge),
   ]
)

bean_common_move_deathcam = (
    0, 0, 0,
    [
        (eq, "$deathcam_on", 1),
        (this_or_next|game_key_is_down, gk_move_forward),
        (this_or_next|game_key_is_down, gk_move_backward),
        (this_or_next|game_key_is_down, gk_move_left),
        (this_or_next|game_key_is_down, gk_move_right),
        (this_or_next|key_is_down, key_left_shift),
        (this_or_next|key_is_down, key_left_control),
        (this_or_next|key_is_down, key_numpad_minus),
        (this_or_next|key_is_down, key_numpad_plus),
        (this_or_next|key_clicked, key_home),
        (key_clicked, key_end),
    ],
    [
        (set_fixed_point_multiplier, 10000),
        (mission_cam_get_position, pos47),

        (try_begin),
        (key_clicked, key_home),
            (position_set_x, pos47, "$deathcam_death_pos_x"),
            (position_set_y, pos47, "$deathcam_death_pos_y"),
            (position_set_z, pos47, "$deathcam_death_pos_z"),
        (try_end),

        (assign, ":move_x", 0),
        (assign, ":move_y", 0),
        (assign, ":move_z", 0),

        (try_begin),
        (game_key_is_down, gk_move_forward),
            (val_add, ":move_y", 10),
        (try_end),
        (try_begin),
        (game_key_is_down, gk_move_backward),
            (val_add, ":move_y", -10),
        (try_end),

        (try_begin),
        (game_key_is_down, gk_move_right),
            (val_add, ":move_x", 10),
        (try_end),
        (try_begin),
        (game_key_is_down, gk_move_left),
            (val_add, ":move_x", -10),
        (try_end),

        (try_begin),
        (key_is_down, key_left_shift),
            (val_add, ":move_z", 10),
        (try_end),
        (try_begin),
        (key_is_down, key_left_control),
            (val_add, ":move_z", -10),
        (try_end),

        (try_begin),
        (key_is_down, key_space),
            (val_mul, ":move_x", 4),
            (val_mul, ":move_y", 4),
            (val_mul, ":move_z", 2),
        (try_end),

        (try_begin),
        (key_is_down, key_end),
            (try_begin),
            (eq, "$deathcam_flip_y_multiplier", 1),
                (assign, "$deathcam_flip_y_multiplier", -1),
                (display_message, "@Y-Rotation Inverted"),
            (else_try),
                (assign, "$deathcam_flip_y_multiplier", 1),
                (display_message, "@Y-Rotation Normal"),
            (try_end),
        (try_end),

        (position_move_x, pos47, ":move_x"),
        (position_move_y, pos47, ":move_y"),
        (position_move_z, pos47, ":move_z"),

        (mission_cam_set_position, pos47),

        (try_begin),
        (key_is_down, key_numpad_minus),
        (ge, "$deathcam_sensitivity_x", 4), #Negative check.
        (ge, "$deathcam_sensitivity_y", 3),
            (val_sub, "$deathcam_sensitivity_x", 4),
            (val_sub, "$deathcam_sensitivity_y", 3),
            (store_mod, reg6, "$deathcam_sensitivity_x", 100), #25% increments
            (store_mod, reg7, "$deathcam_sensitivity_y", 75),
            (try_begin),
            (eq, reg6, 0),
            (eq, reg7, 0),
                (assign, reg8, "$deathcam_sensitivity_x"),
                (assign, reg9, "$deathcam_sensitivity_y"),
                (display_message, "@Sensitivity - 25% ({reg8}, {reg9})"),
            (try_end),
        (else_try),
        (key_is_down, key_numpad_plus),
            (val_add, "$deathcam_sensitivity_x", 4),
            (val_add, "$deathcam_sensitivity_y", 3),
            (store_mod, reg6, "$deathcam_sensitivity_x", 100), #25% increments
            (store_mod, reg7, "$deathcam_sensitivity_y", 75),
            (try_begin),
            (eq, reg6, 0),
            (eq, reg7, 0),
                (assign, reg8, "$deathcam_sensitivity_x"),
                (assign, reg9, "$deathcam_sensitivity_y"),
                (display_message, "@Sensitivity + 25% ({reg8}, {reg9})"),
            (try_end),
        (try_end),
   ]
)

bean_common_rotate_deathcam = (
    0, 0, 0,
    [
        (eq, "$deathcam_on", 1),
    ],
    [
        (set_fixed_point_multiplier, 10000), #Extra Precision

        (try_begin),
        (this_or_next|is_presentation_active, "prsnt_battle"), #Opened (mouse must move)
        (this_or_next|key_clicked, key_escape), #Menu
        (this_or_next|key_clicked, key_q), #Notes, etc
        (key_clicked, key_tab), #Retreat
        (eq, "$deathcam_prsnt_was_active", 0),
            (assign, "$deathcam_prsnt_was_active", 1),
            (assign, "$deathcam_mouse_last_notmoved_x", "$deathcam_mouse_notmoved_x"),
            (assign, "$deathcam_mouse_last_notmoved_y", "$deathcam_mouse_notmoved_y"),
        (try_end),

        (assign, ":continue", 0),

        (try_begin),
        (neg|is_presentation_active, "prsnt_battle"),
            (mouse_get_position, pos1), #Get and set mouse position
            (position_get_x, reg1, pos1),
            (position_get_y, reg2, pos1),

            (mission_cam_get_position, pos47),

            (try_begin),
            (neq, "$deathcam_prsnt_was_active", 1),
                (try_begin), #Check not moved
                (eq, reg1, "$deathcam_mouse_last_x"),
                (eq, reg2, "$deathcam_mouse_last_y"),
                (this_or_next|neq, reg1, "$deathcam_mouse_notmoved_x"),
                (neq, reg2, "$deathcam_mouse_notmoved_y"),
                    (val_add, "$deathcam_mouse_notmoved_counter", 1),
                    (try_begin), #Notmoved for n cycles
                    (ge, "$deathcam_mouse_notmoved_counter", 15),
                        (assign, "$deathcam_mouse_notmoved_counter", 0),
                        (assign, "$deathcam_mouse_notmoved_x", reg1),
                        (assign, "$deathcam_mouse_notmoved_y", reg2),
                    (try_end),
                (else_try), #Has moved
                    (assign, ":continue", 1),
                    (assign, "$deathcam_mouse_notmoved_counter", 0),
                (try_end),
                (assign, "$deathcam_mouse_last_x", reg1), #Next cycle, this pos = last pos
                (assign, "$deathcam_mouse_last_y", reg2),
            (else_try), #prsnt was active
                (try_begin),
                (neq, reg1, "$deathcam_mouse_last_x"), #Is moving
                (neq, reg2, "$deathcam_mouse_last_y"),
                    (store_sub, ":delta_x2", reg1, "$deathcam_mouse_last_notmoved_x"), #Store pos difference
                    (store_sub, ":delta_y2", reg2, "$deathcam_mouse_last_notmoved_y"),
                (is_between, ":delta_x2", -10, 11), #when engine recenters mouse, there is a small gap
                (is_between, ":delta_y2", -10, 11), #usually 5 pixels, but did 10 to be safe.
                    (assign, "$deathcam_prsnt_was_active", 0),
                    (assign, "$deathcam_mouse_notmoved_x", "$deathcam_mouse_last_notmoved_x"),
                    (assign, "$deathcam_mouse_notmoved_y", "$deathcam_mouse_last_notmoved_y"),
                (else_try),
                    (assign, "$deathcam_mouse_notmoved_x", reg1),
                    (assign, "$deathcam_mouse_notmoved_y", reg2),
                (try_end),
                    (assign, "$deathcam_mouse_last_x", reg1), #Next cycle, this pos = last pos
                    (assign, "$deathcam_mouse_last_y", reg2),
            (try_end),
        (try_end),

        (assign, ":delta_x", 0),
        (assign, ":delta_y", 0),
        (assign, ":rotating_horizontal", 0),
        (assign, ":rotating_vertical", 0),

        (try_begin),
        (key_is_down, key_numpad_4),
            (try_begin),
            (ge, "$deathcam_keyboard_rotation_x", 0),
                (assign, "$deathcam_keyboard_rotation_x", -20),
            (try_end),
            (val_add, "$deathcam_keyboard_rotation_x", -1),
            (assign, ":continue", 2),
            (assign, ":rotating_horizontal", -1),
        (else_try),
        (key_is_down, key_numpad_6),
            (try_begin),
            (le, "$deathcam_keyboard_rotation_x", 0),
                (assign, "$deathcam_keyboard_rotation_x", 20),
            (try_end),
            (val_add, "$deathcam_keyboard_rotation_x", 1),
            (assign, ":continue", 2),
            (assign, ":rotating_horizontal", 1),
        (else_try),
            (assign, "$deathcam_keyboard_rotation_x", 0),
            (assign, ":rotating_horizontal", 0),
        (try_end),

        (try_begin),
        (key_is_down, key_numpad_8),
            (try_begin),
            (le, "$deathcam_keyboard_rotation_y", 0),
                (assign, "$deathcam_keyboard_rotation_y", 15),
            (try_end),
            (val_add, "$deathcam_keyboard_rotation_y", 1),
            (assign, ":continue", 2),
            (assign, ":rotating_vertical", 1),
        (else_try),
        (this_or_next|key_is_down, key_numpad_2),
        (key_is_down, key_numpad_5),
            (try_begin),
            (ge, "$deathcam_keyboard_rotation_y", 0),
                (assign, "$deathcam_keyboard_rotation_y", -15),
            (try_end),
            (val_add, "$deathcam_keyboard_rotation_y", -1),
            (assign, ":continue", 2),
            (assign, ":rotating_vertical", -1),
        (else_try),
            (assign, "$deathcam_keyboard_rotation_y", 0),
            (assign, ":rotating_vertical", 0),
        (try_end),

        (try_begin),
        (eq, ":continue", 1),
            (store_sub, ":delta_x", reg1, "$deathcam_mouse_notmoved_x"), #Store pos difference
            (store_sub, ":delta_y", reg2, "$deathcam_mouse_notmoved_y"),
        (else_try),
        (eq, ":continue", 2),
            (try_begin),
            (neq, ":rotating_horizontal", 0),
                (val_clamp, "$deathcam_keyboard_rotation_x", -80, 80),
                (assign, ":delta_x", "$deathcam_keyboard_rotation_x"),
            (try_end),

            (try_begin),
            (neq, ":rotating_vertical", 0),
                (val_clamp, "$deathcam_keyboard_rotation_y", -45, 45),
                (assign, ":delta_y", "$deathcam_keyboard_rotation_y"),
            (try_end),
        (try_end),

        (try_begin),
        (ge, ":continue", 1),
            (val_mul, ":delta_x", "$deathcam_sensitivity_x"),
            (val_mul, ":delta_y", "$deathcam_sensitivity_y"),
            (val_mul, ":delta_y", "$deathcam_flip_y_multiplier"),

            (val_clamp, ":delta_x", -80000, 80001), #8
            (val_clamp, ":delta_y", -60000, 60001), #6

            (store_mul, ":neg_rotx", "$deathcam_total_rotx", -1),
            (position_rotate_x_floating, pos47, ":neg_rotx"), #Reset x axis to initial state

            (position_rotate_y, pos47, 90), #Barrel roll by 90 degrees to inverse x/z axis
            (position_rotate_x_floating, pos47, ":delta_x"), #Rotate simulated z axis, Horizontal
            (position_rotate_y, pos47, -90), #Reverse

            (position_rotate_x_floating, pos47, "$deathcam_total_rotx"), #Reverse

            (position_rotate_x_floating, pos47, ":delta_y"), #Vertical
            (val_add, "$deathcam_total_rotx", ":delta_y"), #Fix yaw
            (mission_cam_set_position, pos47),
        (try_end),
    ]
)

##BEAN END - Deathcam

poisoned_arrows_hit = (ti_on_agent_hit, 0, 0, [], [

        (store_trigger_param, ":victim", 1),
        (store_trigger_param, ":attacker", 2),
        (store_trigger_param, ":missile", 5),

        (eq, ":missile", "itm_poisoned_arrows"),
        # (try_begin),
            # (agent_get_slot, ":is_poisoned", ":victim", slot_agent_is_poisoned),
        (get_player_agent_no, ":player"),
        (agent_get_horse, ":p_horse", ":player"),
        (try_begin),
            (eq, ":attacker", ":player"),
            # (neq, ":is_poisoned", 1),
            (try_begin),
                (neg|agent_is_human, ":victim"),
                (display_message, "@You have poisoned a horse!", 0x3F8000),
                (agent_set_slot, ":victim", slot_agent_is_poisoned, 3),
            (else_try),
                (display_message, "@You have poisoned the enemy!", 0x3F8000),
                (agent_set_slot, ":victim", slot_agent_is_poisoned, 3),
            (try_end),
        (else_try),
            (eq, ":victim", ":player"),
            # (neq, ":is_poisoned", 1),
            (display_message, "@You are poisoned!", 0x3F8000),
            (mission_cam_set_screen_color, 0xFF000000),
            (mission_cam_animate_to_screen_color, 0x4D000000, 2000),
            (agent_set_slot, ":victim", slot_agent_is_poisoned, 3),
        (else_try),
            (eq, ":victim", ":p_horse"),
            # (neq, ":is_poisoned", 1),
            (display_message, "@Your horse is poisoned!", 0x3F8000),
            (agent_set_slot, ":victim", slot_agent_is_poisoned, 3),
        (else_try),
            # (neq, ":is_poisoned", 1),
            (agent_set_slot, ":victim", slot_agent_is_poisoned, 3),
        (try_end),
        # (try_end),
     ])
poisoned_arrows_damage = (6, 0, 0, [], [
    (try_for_agents,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_get_slot, ":is_poisoned", ":cur_agent", slot_agent_is_poisoned),
        (ge, ":is_poisoned", 1),
        (val_sub, ":is_poisoned", 1),
        (try_begin),
            (store_agent_hit_points,reg22,":cur_agent", 0),
            (val_sub,reg22, 7),
            (agent_set_hit_points,":cur_agent",reg22, 0),

            #debug message
            # (str_store_agent_name, s1, ":cur_agent"),
            # (display_message, "@{s1} has {reg22} hp"),

            (le,reg22, 1),
            (remove_agent,":cur_agent"),
        (try_end),
        (try_begin),
            (neg|agent_is_non_player, ":cur_agent"),
            (mission_cam_set_screen_color, 0xFF000000),
            (mission_cam_animate_to_screen_color, 0x4D000000, 2000),
            (display_message, "@The poison decreases your health!", 0x3F8000),
        #debug message
        # (else_try),
            # (str_store_agent_name, s1, ":cur_agent"),
            # (display_message, "@The poison decreases {s1} health!"),
        (try_end),

        (try_begin),
            (eq, ":is_poisoned", 0),
            (try_begin),
                (neg|agent_is_non_player, ":cur_agent"),
                (display_message, "@You are no longer poisoned", color_good_news),
            #debug message
            # (else_try),
                # (str_store_agent_name, s1, ":cur_agent"),
                # (display_message, "@{s1} is no longer poisoned", color_good_news),
            (try_end),
        (try_end),
        (agent_set_slot, ":cur_agent", slot_agent_is_poisoned, ":is_poisoned"),
    (try_end),
     ])

#madsci put banner check in small_battle_check because the game doesnt like two conflicting triggers
small_battle_check = (ti_on_agent_spawn, 0, 0,
    [
    ],
    [
        (store_trigger_param_1, ":agent_no"),
	(try_begin),
    	(agent_get_troop_id, ":troop_no", ":agent_no"),
    	(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":agent_no", ":troop_no"),
	(try_end),

	(try_begin),
        (store_add, ":total_size", "$g_friend_fit_for_battle", "$g_enemy_fit_for_battle"),
        (le, ":total_size", 100),
	(assign, ":agent_to_move", ":agent_no"),
        (agent_is_active, ":agent_to_move"),

        (get_scene_boundaries, pos10, pos11),
        (set_fixed_point_multiplier, 100),
        (position_get_x, ":scene_max_x", pos11),
        (position_get_y, ":scene_max_y", pos11),
        (val_add, ":scene_max_x", 2400), # 2400 has been subtracted automatically because of barriers from outer terrain
        (val_add, ":scene_max_y", 2400),
        (val_div, ":scene_max_x", 2),
        (val_div, ":scene_max_y", 2),
        (position_set_x, pos11, ":scene_max_x"),
        (position_set_y, pos11, ":scene_max_y"),

        (agent_get_position, pos10, ":agent_to_move"),
        (call_script, "script_point_y_toward_position", pos10, pos11),

        (position_get_x, ":x", pos10),
        (store_random_in_range, ":x_addition", -150, 150),
        (val_add, ":x", ":x_addition"),
        (position_set_x, pos10, ":x"),

        (get_distance_between_positions, ":y_to_move", pos10, pos11),
        (val_div, ":y_to_move", 7),
        (val_mul, ":y_to_move", 5),
        (position_move_y, pos10, ":y_to_move"),

        (agent_set_position, ":agent_to_move", pos10),
	(try_end),
])


#tocan's template triggers
tocan_walkers = [
  (0, 0, ti_once, [],
    [
          (neg|is_currently_night),
          (call_script, "script_tocan_spawn_agent"),
  ]),

  (1, 6, 0, [(neg|is_currently_night),],
    [

      (try_for_agents, ":agent"),
        (neg|agent_is_human, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_slot_eq, ":agent", slot_agent_walker_occupation, 1),
        (store_random_in_range, ":rand", 0, 2),
        (eq, ":rand", 0),
        (store_random_in_range, ":rand", 32, 40),
        (entry_point_get_position, pos1, ":rand"),
        (agent_set_scripted_destination, ":agent", pos1, 0),
      (end_try),

      (try_for_agents, ":agent"),
        (agent_is_human, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_slot_eq, ":agent", slot_agent_walker_occupation, 1),
        # (agent_get_troop_id, ":troop", ":agent"),
        # (is_between,":troop","trp_dancer_girl","trp_spawns_end"),
        (store_random_in_range, ":rand", 0, 2),
        (eq, ":rand", 0),
        (store_random_in_range, ":rand", 32, 40),
        (entry_point_get_position, pos1, ":rand"),
        (agent_set_scripted_destination, ":agent", pos1, 0),
      (end_try),
  ]),

  # (3, 0, 0, [(neg|is_currently_night),],  #VC-2352 sound
    # [
      # (store_random_in_range, ":rand", 0, 5),
      # (eq, ":rand", 0),
      # (assign, ":sound_played", 0),
      # (try_for_agents, ":agent"),
        # (eq, ":sound_played", 0),
        # (neg|agent_is_human, ":agent"),
        # (agent_is_alive, ":agent"),
        # (agent_get_item_id, ":item", ":agent"),
        # (eq, ":item", "itm_animal_pig"),
        # (store_random_in_range, ":rand", 0, 3),
        # (eq, ":rand", 0),
        # (agent_play_sound, ":agent", "snd_pig"),
        # (assign, ":sound_played", 1),
      # (end_try),
  # ]),
]

  #Weapon, Armor and helm randomization
equipment_randomization = (ti_on_agent_spawn, 0, 0, [],
    [
    (store_trigger_param_1, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_non_player, ":agent_no"),
    (agent_get_troop_id, ":troop", ":agent_no"),
    (neg|troop_is_hero,":troop"),

    #RANDOMIZE ARMOR
    (try_begin),
        (agent_get_item_slot, ":cur_armor", ":agent_no", ek_body),
        (troop_get_inventory_capacity, ":end_cond", ":troop"),
        (assign, ":result", -1),
        (assign, ":slot_no", 0),
        (try_for_range, ":i_slot", 0, ":end_cond"),
            (troop_get_inventory_slot, ":item_id", ":troop", ":i_slot"),
            (gt,":item_id",0),
            (item_get_type, ":item_type", ":item_id"),
            (eq, ":item_type", itp_type_body_armor),
            (troop_get_inventory_slot_modifier, ":item_imod", ":troop", ":i_slot"),
            (troop_set_slot, "trp_temp_array_b", ":slot_no", ":item_id"),
            (troop_set_slot, "trp_temp_array_a", ":slot_no", ":item_imod"),
            (val_add, ":slot_no", 1),
        (try_end),
        (try_for_range, ":unused", 0, 2),
            (call_script, "script_shuffle_troop_slots",  "trp_temp_array_b",0,":slot_no"),
        (try_end),
        (gt, ":slot_no", 0),
        (store_mul, ":slot10", ":slot_no",10),
        (try_for_range, ":unused", 0, 6),
            (store_random_in_range, ":result", 0, ":slot10"),
        (try_end),
        (val_div, ":result", 10),
        (try_begin),
            (gt, ":slot_no", 6),
            (store_div, ":half", ":slot_no", 2),
            (eq, ":result", ":half"),
            #     (display_log_message, "@Half!"),
            (store_random_in_range, ":rand", -2,3),
            (val_add, ":result", ":rand"),
        (try_end),
        (neq, ":result", -1),
        (store_random_in_range, ":imod", 0, ":slot_no"),
        (troop_get_slot, ":cur_slot", "trp_temp_array_b", ":result"),
        (troop_get_slot, ":cur_imod", "trp_temp_array_a", ":imod"),
        (neq, ":cur_slot", ":cur_armor"),
        (try_begin),
            (gt, ":cur_armor", -1),
            (agent_unequip_item, ":agent_no",":cur_armor"),
        (try_end),
        (agent_equip_item, ":agent_no",":cur_slot",ek_body, ":cur_imod"),
    (try_end),

##RANDOMIZE HELMS
    (try_begin),
        (agent_get_item_slot, ":cur_helm", ":agent_no", ek_head),
        (gt, ":cur_helm", -1),
        (troop_get_inventory_capacity, ":end_cond", ":troop"),
        (assign, ":result", -1),
        (assign, ":slot_no", 0),
        (try_for_range, ":i_slot", 0, ":end_cond"),
            (troop_get_inventory_slot, ":item_id", ":troop", ":i_slot"),
            (gt,":item_id",0),
            (item_get_type, ":item_type", ":item_id"),
            (eq, ":item_type", itp_type_head_armor),
            (troop_get_inventory_slot_modifier, ":item_imod", ":troop", ":i_slot"),
            (troop_set_slot, "trp_temp_array_b", ":slot_no", ":item_id"),
            (troop_set_slot, "trp_temp_array_a", ":slot_no", ":item_imod"),
            (val_add, ":slot_no", 1),
        (try_end),
        (try_for_range, ":unused", 0, 2),
            (call_script, "script_shuffle_troop_slots",  "trp_temp_array_b",0,":slot_no"),
        (try_end),
        (gt, ":slot_no", 0),
        (store_mul, ":slot10", ":slot_no",10),
        (try_for_range, ":unused", 0, 6),
            (store_random_in_range, ":result", 0, ":slot10"),
        (try_end),
        (val_div, ":result", 10),
        (try_begin),
            (gt, ":slot_no", 6),
            (store_div, ":half", ":slot_no", 2),
            (eq, ":result", ":half"),
            #            (display_log_message, "@Half!"),
            (store_random_in_range, ":rand", -2,3),
            (val_add, ":result", ":rand"),
        (try_end),
        (neq, ":result", -1),
        (store_random_in_range, ":imod", 0, ":slot_no"),
        (troop_get_slot, ":cur_slot", "trp_temp_array_b", ":result"),
        (troop_get_slot, ":cur_imod", "trp_temp_array_a", ":imod"),
        (neq, ":cur_slot", ":cur_helm"),
        (try_begin),
            (gt, ":cur_helm", -1),
            (agent_unequip_item, ":agent_no",":cur_helm"),
        (try_end),
        (agent_equip_item, ":agent_no",":cur_slot",ek_head, ":cur_imod"),

        # (str_store_item_name, s24, ":cur_helm"),
        # (str_store_item_name, s23, ":cur_slot"),
        # (assign, reg24, ":cur_helm"),
        # (assign, reg23, ":cur_slot"),
        # (assign, reg25, ":agent_no"),
        # (assign, reg26, ":result"),

        # (display_log_message, "@{!}{reg25} - Removed {s24}({reg24}), equipped {s23} ({reg23}), slot is {reg26}"),
    (try_end),

    (assign, ":number_of_onehanded_weapons", 0),
    (assign, ":number_of_twohanded_weapons", 0),

    #REMOVE DUPLOCATE WEAPONS
    (try_for_range, ":item_slot_number", ek_item_0, ek_head),
        (agent_get_item_slot, ":cur_item", ":agent_no", ":item_slot_number"),
        (troop_get_inventory_capacity, ":end_cond", ":troop"),

        (try_begin),
            (gt, ":cur_item", -1),#is valid
            (item_get_type, ":item_type", ":cur_item"),
            (try_begin),
                (eq, ":item_type", itp_type_one_handed_wpn),
                (val_add, ":number_of_onehanded_weapons", 1),
            (else_try),
                (eq, ":item_type", itp_type_two_handed_wpn),
                (val_add, ":number_of_twohanded_weapons", 1),
            (try_end),
            (try_begin),
                (eq, ":item_type", itp_type_one_handed_wpn),
                (gt, ":number_of_onehanded_weapons", 1),
                (agent_unequip_item, ":agent_no",":cur_item"),

                (try_begin),
                    (ge, "$cheat_mode", 1),
                    (str_store_troop_name, s25, ":troop"),
                    (str_store_item_name, s24, ":cur_item"),
                    (assign, reg23, ":item_slot_number"),
                    (assign, reg25, ":agent_no"),
                    (assign, reg26, ":result"),

                    #(display_log_message, "@{!}{s25}{reg25} - Removed {s24} ({reg23})"),
                (try_end),
            (try_end),
            (try_begin),
                (eq, ":item_type", itp_type_two_handed_wpn),
                (gt, ":number_of_twohanded_weapons", 1),
                (agent_unequip_item, ":agent_no",":cur_item"),

                (try_begin),
                    (ge, "$cheat_mode", 1),
                    (str_store_troop_name, s25, ":troop"),
                    (str_store_item_name, s24, ":cur_item"),
                    (assign, reg23, ":item_slot_number"),
                    (assign, reg25, ":agent_no"),
                    (assign, reg26, ":result"),

                    #(display_log_message, "@{!}{s25}{reg25} - Removed {s24} ({reg23})"),
                (try_end),
            (try_end),
        (else_try),#ADD MORE THROWING WEAPONS IF THE SLOT IS EMPTY
            (assign, ":c", 0),#HAS NO BOW
            (assign, ":break", "itm_torch_old"),
            (try_for_range, ":r", "itm_hunting_bow", ":break"),
                (agent_has_item_equipped, ":agent_no", ":r"),
                (assign, ":c", 1),
                (assign, ":break", -1),
            (try_end),
            (eq, ":c", 0),
            (troop_get_inventory_capacity, ":end_cond", ":troop"),
            (assign, ":result", -1),
            (assign, ":slot_no", 0),
            (try_for_range, ":i_slot", 0, ":end_cond"),
                (troop_get_inventory_slot, ":item_id", ":troop", ":i_slot"),
                (gt,":item_id",0),
                (item_get_type, ":item_type", ":item_id"),
                (eq, ":item_type", itp_type_thrown),
                (troop_get_inventory_slot_modifier, ":item_imod", ":troop", ":i_slot"),
                (troop_set_slot, "trp_temp_array_b", ":slot_no", ":item_id"),
                (troop_set_slot, "trp_temp_array_a", ":slot_no", ":item_imod"),
                (val_add, ":slot_no", 1),
            (try_end),
            (try_for_range, ":unused", 0, 2),
                (call_script, "script_shuffle_troop_slots",  "trp_temp_array_b",0,":slot_no"),
            (try_end),
            (gt, ":slot_no", 0),
            (store_mul, ":slot10", ":slot_no",10),
            (try_for_range, ":unused", 0, 6),
                (store_random_in_range, ":result", 0, ":slot10"),
            (try_end),
            (val_div, ":result", 10),
            (try_begin),
                (gt, ":slot_no", 6),
                (store_div, ":half", ":slot_no", 2),
                (eq, ":result", ":half"),
                #     (display_log_message, "@Half!"),
                (store_random_in_range, ":rand", -2,3),
                (val_add, ":result", ":rand"),
            (try_end),
            (neq, ":result", -1),
            (store_random_in_range, ":imod", 0, ":slot_no"),
            (troop_get_slot, ":cur_slot", "trp_temp_array_b", ":result"),
            (troop_get_slot, ":cur_imod", "trp_temp_array_a", ":imod"),
            (neq, ":cur_slot", ":cur_item"),
            (agent_equip_item, ":agent_no",":cur_slot",ek_head, ":cur_imod"),

            (try_begin),
                (ge, "$cheat_mode", 1),
                (str_store_item_name, s23, ":cur_slot"),
                (assign, reg23, ":cur_slot"),
                (assign, reg25, ":agent_no"),
                (assign, reg26, ":result"),
                (str_store_troop_name, s25, ":troop"),
                #(display_log_message, "@{!}{s25} ({reg25}) - equipped {s23} ({reg23}), slot is {reg26}"),
            (try_end),
        (try_end),
    (try_end),
  ])

bodyguard_triggers = [
 (ti_after_mission_start, 0, ti_once, [(neq, "$g_mt_mode", tcm_disguised)], #condition for not sneaking in; to exclude prison-breaks, etc change to (eq, "$g_mt_mode", tcm_default")
   [
    #Get number of bodyguards
    (store_skill_level, ":leadership", skl_leadership, "trp_player"),
    (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
    (val_div, ":leadership", 3),
    (val_div, ":renown", 400),
    (store_add, ":max_guards", ":renown", ":leadership"),
    (val_min, ":max_guards", 4),

    (ge, ":max_guards", 1),

    #Get player info
    (get_player_agent_no, ":player"),
    (agent_get_team, ":playerteam", ":player"),
    (agent_get_horse, ":use_horse", ":player"), #If the player spawns with a horse, the bodyguard will too.

    #Prepare Scene/Mission Template
    (assign, ":entry_point", 0),
    (assign, ":mission_tpl", 0),
    (try_begin),
        (party_slot_eq, "$current_town", slot_party_type, spt_village),
        (assign, ":entry_point", 11), #Village Elder's Entry
        (assign, ":mission_tpl", "mt_village_center"),
    (else_try),
        (this_or_next|eq, "$talk_context", tc_prison_break),
        (this_or_next|eq, "$talk_context", tc_escape),
        (eq, "$talk_context", tc_town_talk),
        (assign, ":entry_point", 24), #Prison Guard's Entry
        (try_begin),
            (party_slot_eq, "$current_town", slot_party_type, spt_castle),
            (assign, ":mission_tpl", "mt_castle_visit"),
        (else_try),
            (assign, ":mission_tpl", "mt_town_center"),
        (try_end),
    (else_try),
        (eq, "$talk_context", tc_tavern_talk),
        (assign, ":entry_point", 17), #First NPC Tavern Entry
    (try_end),
    (try_begin),
        (neq, "$talk_context", tc_tavern_talk),
        (gt, ":use_horse", 0),
        (mission_tpl_entry_set_override_flags, ":mission_tpl", ":entry_point", 0),
    (try_end),
    (store_current_scene, ":cur_scene"),
    (modify_visitors_at_site, ":cur_scene"),

    #Find and Spawn Bodyguards
    (assign, ":bodyguard_count", 0),
    (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),
    (try_for_range, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":troop_id", "p_main_party", ":i"),
        (neq, ":troop_id", "trp_player"),
        (troop_is_hero, ":troop_id"),
        (neg|troop_is_wounded, ":troop_id"),
        (val_add, ":bodyguard_count", 1),

        (try_begin), #For prison-breaks
            (this_or_next|eq, "$talk_context", tc_escape),
            (eq, "$talk_context", tc_prison_break),
            (troop_set_slot, ":troop_id", slot_troop_will_join_prison_break, 1),
        (try_end),
        (add_visitors_to_current_scene, ":entry_point", ":troop_id", 1),

        (eq, ":bodyguard_count", ":max_guards"),
        (assign, ":num_of_stacks", 0), #Break Loop
    (try_end), #Stack Loop
    (gt, ":bodyguard_count", 0), #If bodyguards spawned...
    (set_show_messages, 0),
    (team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
    (set_show_messages, 1),
   ]),

 (ti_on_agent_spawn, 0, 0, [],
   [
    (store_trigger_param_1, ":agent"),
    (agent_get_troop_id, ":troop", ":agent"),
    (neq, ":troop", "trp_player"),
    (troop_is_hero, ":troop"),
    (main_party_has_troop, ":troop"),

    (get_player_agent_no, ":player"),
    (agent_get_team, ":playerteam", ":player"),
    (agent_get_position,pos1,":player"),

    (agent_set_team, ":agent", ":playerteam"),
    (agent_set_division, ":agent", 8),
    (agent_add_relation_with_agent, ":agent", ":player", 1),
    (agent_set_is_alarmed, ":agent", 1),
    (store_random_in_range, ":shift", 1, 3),
    (val_mul, ":shift", 100),
    (position_move_y, pos1, ":shift"),
    (store_random_in_range, ":shift", 1, 3),
    (store_random_in_range, ":shift_2", 0, 2),
    (val_mul, ":shift_2", -1),
    (try_begin),
        (neq, ":shift_2", 0),
        (val_mul, ":shift", ":shift_2"),
    (try_end),
    (position_move_x, pos1, ":shift"),
    (agent_set_position, ":agent", pos1),
   ]),

 (ti_on_agent_killed_or_wounded, 0, 0, [],
    [
     (store_trigger_param_1, ":dead_agent"),

     (agent_get_troop_id, ":troop", ":dead_agent"),
     (neq, ":troop", "trp_player"),
     (troop_is_hero, ":troop"),
     (main_party_has_troop, ":troop"),
     (party_wound_members, "p_main_party", ":troop", 1),
    ]),
 ]

miracles = (3,0,ti_once,[
  ],[
  (try_begin),
  (gt,"$piety",25), #player needs over 25 piety #TEST FOR 5

  (store_random_in_range, ":random_1",0,100), #first check - at least 15% chance of miracle happening

  (lt, ":random_1", 16), #TEST 100 USUALLY 16
  (store_random_in_range, ":random_2",0,12), #second check - used to determine specific miracle - either defense, speed, damage or healing
  (get_player_agent_no, ":player_agent"), #the player

  (try_begin), #defense
  (is_between, ":random_2", 0,4),
    (try_for_agents, ":cur_agent"),#effect
      (agent_is_human, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_active,":cur_agent"),
      (agent_is_ally, ":cur_agent"),
      (agent_set_damage_modifier, ":cur_agent", 95),
    (end_try),
    (display_message, "@Your faith increases you and your troops' defense!", color_good_news),
   (else_try), #speed
    (is_between, ":random_2", 3,6),
    (try_for_agents, ":cur_agent"),#effect
      (agent_is_human, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_ally, ":cur_agent"),
      (agent_set_speed_modifier, ":cur_agent", 110),
    (end_try),
    (display_message, "@Your faith increases you and your troops' speed!", color_good_news),
  (else_try), #damage
    (is_between, ":random_2", 4,8),
    (try_for_agents, ":cur_agent"),#effect
      (agent_is_human, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_active,":cur_agent"),
      (agent_is_ally, ":cur_agent"),
      (agent_set_damage_modifier, ":cur_agent", 110),
    (end_try),
    (display_message, "@Your faith increases you and your troops' strength!", color_good_news),
  (else_try), #healing
  (is_between, ":random_2", 8,12),
    (store_troop_health, ":health", "trp_player"),
    (le, ":health", 90),
    (display_message, "@Your faith heals you!", color_good_news),
    (agent_set_hit_points, ":player_agent", 100),
    (troop_set_health, "trp_player", 100),
  (try_end),
  (try_end),
  ])


#passable allies by dalion on taleworld's forums
passable_allies = (0, 0, 0,
    [
    (neg|main_hero_fallen),
    (key_is_down, key_left_control),
    ],
    [
    (set_fixed_point_multiplier, 1),
    (get_player_agent_no, ":player"),
    (agent_get_position, pos1, ":player"),
    (agent_get_team, ":p_team", ":player"),
    (try_for_agents, ":agent", pos1, 1),
        (agent_is_alive, ":agent"),
        (agent_is_human, ":agent"),
        (agent_is_non_player, ":agent"),
        (agent_get_team, ":a_team", ":agent"),
        (neg|teams_are_enemies, ":a_team", ":p_team"),
        (agent_get_speed, pos2, ":player"),
        (position_get_y, ":forward_momentum", pos2),
        (position_get_x, ":sideway_momentum", pos2),
        (convert_to_fixed_point, ":forward_momentum"),
        (convert_to_fixed_point, ":sideway_momentum"),
        (try_begin),
            (lt, ":forward_momentum", 0), # backwards moving speed is higher somehow, so we divide it in half
            (val_div, ":forward_momentum", 2),
        (try_end),
        (val_div, ":sideway_momentum", 2), # so is sideways moving speed
        (position_move_y, pos1, ":forward_momentum"),
        (position_move_x, pos1, ":sideway_momentum"),
        (agent_set_position, ":player", pos1),
    (try_end),
    ])


#tavern animations
dedal_tavern_animations = (
  ti_on_agent_spawn,1,0,[
    (eq, "$talk_context", tc_tavern_talk),
    (store_trigger_param_1,":agent"),
    (agent_get_troop_id,":troop",":agent"),
    (try_begin),
      (is_between,":troop","trp_musican_male","trp_musicans_end"),
      (try_begin),
        (agent_has_item_equipped,":agent","itm_dedal_lutnia"),
        (agent_set_stand_animation, ":agent", "anim_lute_sitting"),
        (agent_set_animation, ":agent", "anim_lute_sitting"),
        (agent_play_sound,":agent","snd_dedal_tavern_lute"),
      (else_try),
        (agent_has_item_equipped,":agent","itm_dedal_lira"),
        (agent_set_stand_animation, ":agent", "anim_lyre_sitting"),
        (agent_set_animation, ":agent", "anim_lyre_sitting"),
        (agent_play_sound,":agent","snd_dedal_tavern_lyre"),
      (try_end),
      (store_random_in_range,":r",0,300),
      (agent_set_animation_progress,":agent",":r"),
    (else_try),
      (is_between,":troop",tavern_minstrels_begin,tavern_minstrels_end),
      (try_begin),
        (agent_has_item_equipped,":agent","itm_dedal_lutnia"),
        (agent_set_stand_animation, ":agent", "anim_lute_standing"),
        (agent_set_animation, ":agent", "anim_lute_standing"),
        (agent_play_sound,":agent","snd_dedal_tavern_lute"),
      (else_try),
        (agent_has_item_equipped,":agent","itm_dedal_lira"),
        (agent_set_stand_animation, ":agent", "anim_lyre_standing"),
        (agent_set_animation, ":agent", "anim_lyre_standing"),
        (agent_play_sound,":agent","snd_dedal_tavern_lyre"),
      (try_end),
      (store_random_in_range,":r",0,300),
      (agent_set_animation_progress,":agent",":r"),
    (else_try),
      (is_between,":troop",walkers_begin,walkers_end),
      (try_begin),
        (agent_has_item_equipped,":agent","itm_tavern_cup"),
        (agent_set_stand_animation, ":agent", "anim_sitting_drinking_low"),
        (agent_set_animation, ":agent", "anim_sitting_drinking_low"),
        (store_random_in_range,":r",0,300),
      (else_try),
        (agent_set_stand_animation, ":agent", "anim_sitting_low"),
        (agent_set_animation, ":agent", "anim_sitting_low"),
        (store_random_in_range,":r",0,300),
      (try_end),
      (agent_set_animation_progress,":agent",":r"),
    (try_end),
  ],
  [])

custom_commander_critical_strike =(
  ti_on_agent_hit, 0, 0, [(eq, "$sp_criticos", 1),
],
    [
      (store_trigger_param_1, ":inflicted_agent"),
      (store_trigger_param_2, ":dealer_agent"),
      (store_trigger_param_3, ":inflicted_damage"),

    (set_trigger_result, -1),
    (gt, ":inflicted_damage", 0),
    (set_trigger_result, ":inflicted_damage"),
      (get_player_agent_no, ":player_agent"),
      (try_begin),
        (agent_is_human, ":dealer_agent"),
        (assign, ":dealer_item_id", reg0),
        (gt, ":dealer_item_id", -1),

        (try_begin),
          ## knock_back between humans with melee weapons
          (agent_is_human, ":inflicted_agent"),
          (agent_get_position, pos1, ":inflicted_agent"),
          (agent_get_position, pos2, ":dealer_agent"),
          (try_begin),
            (position_is_behind_position, pos2, pos1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_polearm),
            # dest damage ratio is 1/2
            (assign, ":dest_damage", ":inflicted_damage"),
            (val_div, ":dest_damage", 2),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            (val_sub, ":inflicted_agent_hp", ":dest_damage"),
            (val_max, ":inflicted_agent_hp", 0),
            (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
            # messages for player
            (assign, reg1, ":dest_damage"),
            (try_begin),
              (eq, ":dealer_agent", ":player_agent"),
              (display_message, "@Delivered {reg1} extra damage from behind!", 0xFF0000),
            (else_try),
              (eq, ":inflicted_agent", ":player_agent"),
              (display_message, "@Received {reg1} extra damage from behind!", 0xFF0000),
            (try_end),
          (try_end),
        (else_try),
          # inflicted_agent is horse, dealer_troop is on foot and uses polearm or thrust
          (neg|agent_is_human, ":inflicted_agent"),
          (agent_get_horse, ":dealer_agent_horse_id", ":dealer_agent"),
          (eq, ":dealer_agent_horse_id", -1),
          (agent_get_action_dir, ":action_dir", ":dealer_agent"),
          (item_get_type, ":item_type", ":dealer_item_id"),

          (assign, ":extra_damage_rate", 0),
          (try_begin),
            (eq, ":item_type", itp_type_polearm),
            (try_begin),
              (eq, ":action_dir", 0),
              (assign, ":extra_damage_rate", 180), #chief incrementa
    (store_random_in_range, ":random_no", 1, 100),
    (try_begin), #el caballo retrocede chief
      (le, ":random_no", 50),
      (agent_set_animation, ":inflicted_agent","anim_horse_rear"),
    (try_end),
            (else_try),
              (assign, ":extra_damage_rate", 120), #chief incrementa
            (try_end),
          (else_try),
            (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            (eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":action_dir", 0),
            (assign, ":extra_damage_rate", 75),
          (try_end),
          (gt, ":extra_damage_rate", 0),
          (store_mul, ":extra_damage", ":inflicted_damage", ":extra_damage_rate"),
          (val_div, ":extra_damage", 100),
          (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
          (val_sub, ":inflicted_agent_hp", ":extra_damage"),
          (val_max, ":inflicted_agent_hp", 0),
          (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
          # messages for player
          (assign, reg1, ":extra_damage"),
          (try_begin),
            (eq, ":dealer_agent", ":player_agent"),
            (try_begin),
              (agent_get_rider, ":rider_agent", ":inflicted_agent"),
              (gt, ":rider_agent", -1),
              (display_message, "@Delivered {reg1} extra damage to horse."),
            (else_try),
              (display_message, "@Delivered {reg1} extra damage."),
            (try_end),
          (try_end),
          (try_begin),
            (agent_get_horse, ":player_horse_id", ":player_agent"),
            (eq, ":player_horse_id", ":inflicted_agent"),
            (display_message, "@Horse received {reg1} extra damage."),
          (try_end),
        (try_end),
      (try_end),
    ])

improved_horse_archer_ai = [

  (0, 0, ti_once, [
  ], [
    (ge, "$cheat_mode", 1),
    (assign, "$g_tracker", -1),
  ]),

  (1, 0, 0, [
    (eq,"$g_battle_won",0),
  ], [
    (set_fixed_point_multiplier, 100),
    (try_for_agents, ":agent"),
        (agent_is_active, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_is_human, ":agent"),
        (agent_is_non_player, ":agent"),
        (try_begin),
            (agent_slot_eq, ":agent", slot_agent_is_running_away, 0), #Isn't routing.
            (agent_get_horse, ":horse", ":agent"),
            (gt, ":horse", 0), #mounted
            (agent_get_ammo, ":ammo_left", ":agent"),
            (gt, ":ammo_left", 0),
            (assign, ":ranged", 0),
            (try_for_range, ":r", "itm_hunting_bow", "itm_light_throwing_axes"),
                (agent_has_item_equipped, ":agent", ":r"),
                (assign, ":ranged", 1),
            (try_end),

            (eq, ":ranged", 1),
            (agent_get_team, ":team", ":agent"),
            (agent_get_division, ":division", ":agent"),

            (team_get_weapon_usage_order, ":weapon_usage_order", ":team", ":division"),
            (team_get_movement_order, ":movement_order", ":team", ":division"),
            (team_get_hold_fire_order, ":hold_fire", ":team", ":division"),
            (neq, ":hold_fire", aordr_hold_your_fire),
            (neq, ":weapon_usage_order", wordr_use_melee_weapons),
            (eq, ":movement_order", mordr_charge),

            ##equip script
            ##mounted troops use bows n shit
            (try_begin),
                (assign, ":c", 1),
                (try_begin),
                    (agent_get_wielded_item, ":item", ":agent", 0),
                    (is_between, ":item", 1, "itm_items_end"),
                    (item_get_type, ":type", ":item"),
                    (this_or_next|eq, ":type", itp_type_thrown),
                    (eq, ":type", itp_type_bow),
                    (assign, ":c", 0),#block if already equipped
                (try_end),
                (eq, ":c", 1),
                (try_for_range, reg0, 0, 4),
                    (agent_get_item_slot, ":item", ":agent", reg0),
                    (is_between, ":item", 1, "itm_items_end"),
                    #(gt, ":item", 0),
                    (item_get_type, ":type", ":item"),
                    (this_or_next|eq, ":type", itp_type_thrown),
                    (eq, ":type", itp_type_bow),
                    (agent_set_wielded_item, ":agent", ":item"),
                    (assign, reg0, -1), ##break
                (try_end),
            (try_end),

            (agent_get_wielded_item, ":item", ":agent", 0),
		        (gt, ":item", -1), #madsci
            (item_get_type, ":type", ":item"),
            (this_or_next|eq, ":type", itp_type_thrown),
            (eq, ":type", itp_type_bow),

            (call_script, "script_get_first_closest_enemy_distance", ":agent", ":team", 200), # Find distance of nearest 3 enemies
            (assign, ":nearest_enemy", reg18),
            (assign, ":closest_agent", reg19),
            (gt, ":closest_agent", -1),

            (try_begin),
                (assign, ":radious", 8000),
                (assign, ":nearest_enemy_range", 8500),
                # (assign, ":skrimish_angle", 10),
                (try_begin),
                    (eq, ":type", itp_type_thrown),
                    (assign, ":nearest_enemy_range", 7500),
                    (assign, ":radious", 7000),
                (try_end),
                (call_script, "script_horse_archer_skirmish", ":agent", ":closest_agent", ":nearest_enemy", ":radious", ":nearest_enemy_range"),
                (try_begin), ##shooot more often
                    (gt, ":nearest_enemy", 200),
                    (lt, ":nearest_enemy", 7500),
                    (store_random_in_range, ":random", 0, 10),
                    (le, ":random", 2),
                    (agent_get_attack_action, ":action", ":agent"),
                    (eq, ":action", 0), #free
                    (agent_get_combat_state, ":agent_cs", ":agent"),
                    (neq, ":agent_cs", 7), #NEG does not see target
                    (this_or_next|eq, ":type", itp_type_thrown),
                    (eq, ":type", itp_type_bow),
                    #(eq, ":type", itp_type_crossbow),
                    (agent_set_attack_action, ":agent", 0, 0),
                (try_end),
            (try_end),
        (else_try), #clear horse archer skirmisher ai
            (agent_slot_eq, ":agent", slot_agent_is_in_scripted_mode, 1),
            (agent_set_slot, ":agent", slot_agent_is_in_scripted_mode, 0),
            (agent_clear_scripted_mode, ":agent"),
            (call_script, "script_equip_best_melee_weapon", ":agent", 0, 0, 0),
            # (agent_force_rethink, ":agent"),
        (try_end),
    (try_end),
  ])
]

#battle notifications
common_battle_prepare = (
  ti_once, 0, 0, [(eq, "$Battle_not_On", 1)],
  [
#  (assign, "$rageused", 0), #reset every battle
#  (assign, "$kill", 0), #reset first blood
#  (assign, "$g_stop_ballista_fire", 0),
#  (assign, "$notificationmode", 0),
#  (assign, "$refill", 0),
  (assign, "$dead_enemies", 0),
  (assign, "$dead_enemiest", 0),
  (assign, "$dead_friendlies", 0),
  (assign, "$dead_friendliest", 0),
  ])

common_battle_notifications = (
  20, 0, 0, [(eq, "$Battle_not_On", 1)],
  [
  (assign, reg1, "$dead_friendlies"),
  (assign, reg2, "$dead_enemies"),
  (assign, reg3, "$dead_friendliest"),
  (assign, reg4, "$dead_enemiest"),
  (set_show_messages, 1),
  (display_message, "@fresh casualties: {reg1}",0xC85D46),
  (display_message, "@fresh killed hostiles: {reg2}",0x85C846),
    (try_begin),
    (gt, "$dead_friendlies", "$dead_enemies"),
    (assign, ":difference", "$dead_friendlies"),
    (val_sub, ":difference", "$dead_enemies"),
    (try_begin),
      (gt, ":difference", 10),
      (display_message, "@We are taking serious losses",0xC85D46),
    (else_try),  #smaller then 10
      (gt, ":difference", 5),
      (display_message, "@We are taking losses",0xC85D46),
    (else_try),
      (display_message, "@We are taking slight losses",0xC85D46),
    (try_end),
  (else_try),
    (eq, "$dead_friendlies", "$dead_enemies"),
    (display_message, "@The balance of powers is equal",0xDFD848),
  (else_try),
    (lt, "$dead_friendlies", "$dead_enemies"),
    (assign, ":difference", "$dead_enemies"),
    (val_sub, ":difference", "$dead_friendlies"),
    (try_begin),
      (gt, ":difference", 10),
      (display_message, "@We are taking enemy lives rapidly",0x85C846),
    (else_try),  #smaller then 10
      (gt, ":difference", 5),
      (display_message, "@We are taking enemy lives",0x85C846),
    (else_try),
      (display_message, "@We are taking enemy lives slowly",0x85C846),
    (try_end),
  (try_end),
  (display_message, "@Total balance: {reg3} losses, {reg4} kills",0xDFD848),
  (set_show_messages, 0),
  (assign, "$dead_friendlies", 0), #reset values
  (assign, "$dead_enemies", 0),
    ])

common_bearer_down = ( #also functions to check how many death hostiles and friendlies
  ti_on_agent_killed_or_wounded, 0, 0, [(eq, "$Battle_not_On", 1)],
  [
  (store_trigger_param, ":dead", 1),
  (agent_is_human, ":dead"),
  (try_begin),
    (agent_is_ally, ":dead"),
    (val_add, "$dead_friendlies", 1),
    (val_add, "$dead_friendliest", 1),
  (else_try),
    # (agent_get_troop_id, ":troop", ":dead"),
    (val_add, "$dead_enemies", 1),
    (val_add, "$dead_enemiest", 1),
  (try_end),
  ])


battle_notifications = [
    common_battle_prepare,
    common_battle_notifications,
    common_bearer_down,
]

immersive_troops = ( #sounds troops will make in battle?
  4, 0, 0,
  [
    (store_mission_timer_a, ":cur_time"),
    (gt, ":cur_time", 1),#
    (lt, ":cur_time", 180),#No more specials after 180 seconds

    # (store_current_scene,":cur_scene"),
    # (neg|is_between, ":cur_scene", "scn_salt_mine", "scn_mp_addon_maps_end"), #only random scenes in lead_chargue

    (neg|conversation_screen_is_active),
    (neg|is_presentation_active, "prsnt_battle"),
    (neg|is_presentation_active, "prsnt_order_display"),
  ],
  [
    (try_for_agents, ":agent"),
      (agent_is_human, ":agent"),
      (agent_is_alive, ":agent"),
      (agent_is_active,":agent"),
      (agent_get_horse,":agent_mounted",":agent"),
      (eq,":agent_mounted",-1), #no mounted
      #  (agent_is_ally, ":agent"), #only allies.

      (agent_get_troop_id, ":troop_id", ":agent"),
      (neq,":troop_id","trp_player"),

      (neg|troop_is_hero, ":troop_id"),
      (troop_get_type, ":is_female", ":troop_id"),
      (val_mod, ":is_female", 2),
      (neq, ":is_female", 1),

      ##        (get_player_agent_no, ":player_agent"),
      ##        (agent_get_team, ":agent_team_p", ":player_agent"),
      ##        (agent_get_team, ":agent_team", ":agent"),
      ##        (eq, ":agent_team_p", ":agent_team"),


      (agent_get_animation, ":agent_anl", ":agent", 0),
      (agent_get_animation, ":agent_anu", ":agent", 1),

      ##        (agent_get_animation, reg0, ":agent", 0),
      ##        (agent_get_animation, reg1, ":agent", 1),
      ##        (str_store_troop_name,s5,":troop_id"),
      ##        (display_message, "@{s5} animation id: low body {reg0} , upper body {reg1}"),

      (agent_get_party_id, ":agent_party", ":agent"),
      (try_begin),
        (gt, ":agent_party", -1),
        (party_get_num_companions, ":num_men", ":agent_party"),
      (else_try),
        (assign, ":num_men", 41),
      (try_end),
      #   (agent_get_simple_behavior, ":agent_sb", ":agent"),
      (agent_get_combat_state, ":agent_cs", ":agent"),
      (try_begin),
        ##          (this_or_next|eq, ":agent_cs", 0),
        ##          (eq, ":agent_cs", 8),
        # (this_or_next|eq, ":agent_sb", aisb_hold),
        (le, ":agent_cs", 0),#scripted mode

        (store_random_in_range, ":rand", 0, 350),
#        (try_begin),
#          (le, ":rand", 12),
#          (agent_play_sound, ":agent", "snd_man_cough"),
        (try_begin),
          (le, ":rand", 8),
          (ge, ":num_men", 40),
          (agent_play_sound, ":agent", "snd_man_warcry"),
          (call_script,"script_agent_perform_shield_taunt", ":agent"),
          ##          (else_try),
          ##            (le, ":rand", 12),
          ##            (agent_play_sound, ":agent", "snd_inmersive_troops_exp"),
        (else_try),
          (le, ":rand", 10),
          (eq, ":agent_anl", 8),#
          (this_or_next|eq, ":agent_anu", 320),#
          (eq, ":agent_anu", -1),#
          (call_script,"script_agent_perform_warcry", ":agent"),
        (else_try),
          (le, ":rand", 23),
          (eq, ":agent_anl", 8),#v
          (this_or_next|eq, ":agent_anu", 320),#
          (eq, ":agent_anu", -1),#
          (call_script,"script_agent_perform_shield_taunt", ":agent"),
#        (else_try),
#          (le, ":rand", 25),
#          (eq, ":agent_anl", 8),#
#          (eq, ":agent_anu", -1),#
#          (call_script, "script_agent_perform_horn", ":agent"),
        (else_try),
          (le, ":rand", 26),
          (agent_play_sound, ":agent", "snd_man_warcry"),
        (else_try),
        (try_end),
      (try_end),
    (try_end),
])

##diplomacy begin

ai_horn = [ #3 triggers

  (ti_on_agent_spawn, 0, 0, [], # give horn to hornman if he has no horn
    [
      (store_trigger_param, ":agent_no", 1),
      (agent_get_troop_id, ":troop_id", ":agent_no"),
      (try_begin),
        (eq, ":troop_id", "trp_hornman"),
        (neg|agent_has_item_equipped, ":agent_no", "itm_horn"),
        (agent_get_item_slot,  ":item", ":agent_no", 3),
        (try_begin),
          (gt, ":item", 0),
          (agent_unequip_item, ":agent_no", ":item"),
        (end_try),
        (agent_equip_item, ":agent_no", "itm_horn"),
      (end_try),
  ]),

  (3, 0, ti_once, [],
    [
      (try_for_agents, ":agent"),
        (agent_get_troop_id, ":agent_troop", ":agent"),
        (eq, ":agent_troop", "trp_hornman"), #hornman
        (store_random_in_range, ":rand", 0, 2),
        (eq, ":rand", 1),
        (call_script, "script_agent_perform_horn", ":agent"),
      (end_try),
  ]),


  (ti_on_order_issued, 0, 0,
    [
      (store_trigger_param, ":order_no", 1),
      (assign, reg7, ":order_no"),
      (eq, ":order_no", mordr_charge),
    ],
    [
      (try_for_agents, ":agent"),
        (agent_get_troop_id, ":agent_troop", ":agent"),
        (eq, ":agent_troop", "trp_hornman"),  #hornman
        (store_random_in_range, ":rand", 0, 2),
        (eq, ":rand", 1),
        (call_script, "script_agent_perform_horn", ":agent"),
      (end_try),
  ]),
]

#1257 AD Flag Carriers + more
freelancer_trigger1 = (
  1, 0, ti_once,
  [
    (neq, "$g_battle_result", 0),
    #tom
    (get_player_agent_no,":agent"),
    (agent_is_alive, ":agent"),
    (agent_get_troop_id, ":troop_id", ":agent"),
    (eq, ":troop_id", "trp_player"),
    #tom
  ],
  [ #+freelancer - Keep Loot Picked up
    #(eq, "$freelancer_state", 1), #tom - loot anytime
    (call_script, "script_freelancer_keep_field_loot"),
  ])

freelancer_trigger2 = (ti_on_agent_spawn, 0, 0, [(eq, "$freelancer_state", 1)], #+Freelancer
[
    (get_player_agent_no, ":player"),
    (ge, ":player", 0),
  (agent_is_active, ":player"),
  (store_trigger_param_1, ":agent_no"),
  (eq, ":player", ":agent_no"),
  (agent_get_team, ":player_team", ":player"),
  (team_set_order_listener, ":player_team", -1),
    (val_add, ":player_team", 2),
    (agent_set_team, ":player", ":player_team"),
    #(call_script, "script_agent_reassign_team", ":agent_no"),
])

shield_taunt_trigger =  (
  0, 1.5, 0,
  [
  (key_clicked, key_t),
  (get_player_agent_no, ":player"),
  (agent_is_alive, ":player"),
  (agent_set_animation, ":player", "anim_shield_taunt_1", 1),
  (agent_play_sound,":player","snd_shield_hit_metal_wood"),
  ],

  [
    (get_player_agent_no, ":player"),
  (agent_get_team, ":team", ":player"),
  (agent_get_position, pos1, ":player"),
  (try_for_agents, ":agent"),
    (agent_is_alive, ":agent"),
    (agent_is_human, ":agent"),
    (agent_get_team, ":agent_team", ":agent"),
    (agent_get_wielded_item,":item",":agent",1),
    (gt,":item",0),#has shield
    (agent_get_wielded_item,":item",":agent",0),
    (gt,":item",0),#has weapon
    (item_get_type,":item_type",":item"),
    (this_or_next | eq,":item_type",itp_type_polearm),
    (eq,":item_type",itp_type_one_handed_wpn),
    (agent_get_horse,":horse",":agent"),
    (eq,":horse",-1),#not on horse
    (eq, ":agent_team", ":team"),
    (agent_get_position, pos0, ":agent"),
    (get_distance_between_positions_in_meters,":distance",pos0, pos1),
    (lt, ":distance", 40),
    (agent_set_animation, ":agent", "anim_shield_taunt_1", 1),
    (agent_play_sound, ":agent", "snd_man_warcry"),
    (agent_play_sound,":agent","snd_shield_hit_metal_wood"),
    (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),
    #(assign, reg0, ":courage"),
    #(display_message, "@we have {reg0} courage"),
    (val_add, ":courage", 5),
    (val_min, ":courage", 9600),
    #(assign, reg0, ":courage"),
    #(display_message, "@now we have {reg0} courage"),
    (agent_set_slot, ":agent", slot_agent_courage_score, ":courage"),
    #(display_message,  "@huzzah!"),
  (try_end),
  (display_message,  "@Huzzah! You encourage your nearby troops."),
  ])


cheer_trigger =  (
  0, 1.5, 0,
  [
  (key_clicked, key_t),
  (get_player_agent_no, ":player"),
  (agent_is_alive, ":player"),
  (agent_set_animation, ":player", "anim_cheer", 1),
  (agent_play_sound, ":player", "snd_man_victory"),
  ],

  [
    (get_player_agent_no, ":player"),
  (agent_get_team, ":team", ":player"),
  (agent_get_position, pos1, ":player"),
  (try_for_agents, ":agent"),
    (agent_is_alive, ":agent"),
    (agent_is_human, ":agent"),
    (agent_get_team, ":agent_team", ":agent"),
    (eq, ":agent_team", ":team"),
    (agent_get_position, pos0, ":agent"),
    (get_distance_between_positions_in_meters,":distance",pos0, pos1),
    (lt, ":distance", 20),
    (agent_set_animation, ":agent", "anim_cheer", 1),
    (agent_play_sound, ":agent", "snd_man_victory"),
    (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),
    #(assign, reg0, ":courage"),
    #(display_message, "@we have {reg0} courage"),
    (val_add, ":courage", 5),
    (val_min, ":courage", 9600),
    #(assign, reg0, ":courage"),
    #(display_message, "@now we have {reg0} courage"),
    (agent_set_slot, ":agent", slot_agent_courage_score, ":courage"),
    #(display_message,  "@huzzah!"),
  (try_end),
  (display_message,  "@Huzzah! You encourage your nearby troops."),
  ]

  )


player_ability = (

  0, 0, 0, [
  (key_clicked, key_t), #common warcry
  ],
  [
    (try_begin),
        (eq, "$player_ability", 0),
        (get_player_agent_no, ":player"),
        (agent_is_alive, ":player"),
        (agent_set_animation, ":player", "anim_cheer", 1),
        (agent_play_sound, ":player", "snd_man_victory"),
        (get_player_agent_no, ":player"),
        (agent_get_team, ":team", ":player"),
        (agent_get_position, pos1, ":player"),
        (try_for_agents, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_is_human, ":agent"),
        (agent_get_team, ":agent_team", ":agent"),
        (eq, ":agent_team", ":team"),
        (agent_get_position, pos0, ":agent"),
        (get_distance_between_positions_in_meters,":distance",pos0, pos1),
        (lt, ":distance", 20),
        (agent_set_animation, ":agent", "anim_cheer", 1),
        (agent_play_sound, ":agent", "snd_man_victory"),
        (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),
        #(assign, reg0, ":courage"),
        #(display_message, "@we have {reg0} courage"),
        (val_add, ":courage", 5),
        (val_min, ":courage", 9600),
        #(assign, reg0, ":courage"),
        #(display_message, "@now we have {reg0} courage"),
        (agent_set_slot, ":agent", slot_agent_courage_score, ":courage"),
        #(display_message,  "@huzzah!"),
        (try_end),
        (display_message,  "@Huzzah! You encourage your nearby troops."),
    (else_try),
        (eq, "$player_ability", 1), #berserk
        (call_script,"script_berserk_trigger"),
    (try_end),
  ])


fallen_leader = (ti_on_agent_killed_or_wounded, 0, 0, [], # LEADER FALLEN
    [
      (store_trigger_param, ":inflicted_agent_id", 1),

      (agent_is_human, ":inflicted_agent_id"),
      (agent_get_troop_id, ":agent_troop", ":inflicted_agent_id"),
      (troop_is_hero, ":agent_troop"),
      (agent_get_party_id, ":agent_party", ":inflicted_agent_id"),
      (neq, ":agent_party", -1),
      (party_stack_get_troop_id, ":party_leader_troop", ":agent_party", 0),
      (eq, ":agent_troop", ":party_leader_troop"),

      (try_begin),
        (get_player_agent_no, ":player_agent"),
        (eq, ":inflicted_agent_id", ":player_agent"),
        (display_message, "@You fall and your troops panic!", color_terrible_news),
        (assign, ":ally_delta_courage", -700),
        (assign, ":enemy_delta_courage", 500),
      (else_try),
        (agent_is_ally, ":inflicted_agent_id"),
        (display_message, "@Our side lost a leader. Our troops panic!", color_terrible_news),
        (assign, ":ally_delta_courage", -100),
        (assign, ":enemy_delta_courage", 50),
      (else_try),
        (display_message, "@The enemy lost a leader. Their troops panic!", color_good_news),
        (play_sound, "snd_team_scored_a_point"),
        (assign, ":ally_delta_courage", 500),
        (assign, ":enemy_delta_courage", -1000),  #16.01.15
      (end_try),

      (try_begin),
        # APPLY ALL DELTA COURRAGE
        (try_for_agents, ":agent"),
          (agent_is_alive, ":agent"),
          (agent_is_human, ":agent"),
          (agent_get_slot, ":agent_courage_score", ":agent", slot_agent_courage_score),
          # (str_store_agent_name, s1,":agent"),
          # (assign, reg1, ":agent_courage_score"),
          (try_begin),
            (agent_is_ally, ":agent"),
            (val_add, ":agent_courage_score", ":ally_delta_courage"),
            # (assign, reg2, ":ally_delta_courage"),
            # (assign, reg3, ":agent_courage_score"),
            # (display_message, "@{s1} {reg1} + {reg2} = {reg3}"),
          (else_try),
            (val_add, ":agent_courage_score", ":enemy_delta_courage"),
            # (assign, reg2, ":enemy_delta_courage"),
            # (assign, reg3, ":agent_courage_score"),
            # (display_message, "@{s1} {reg1} + {reg2} = {reg3}"),
          (end_try),
          (val_max, ":agent_courage_score", 0),         #not < 0
          (agent_set_slot, ":agent", slot_agent_courage_score, ":agent_courage_score"),
        (end_try),
      (end_try),
  ])

custom_commander_hero_wounded =(
  ti_on_agent_killed_or_wounded, 0, 0, [],
    [
      (store_trigger_param_1, ":wounded_agent_no"),
      (store_trigger_param_2, ":killer_agent_no"),

      (get_player_agent_no, ":player_agent"),
      (agent_get_troop_id, ":player_troop", ":player_agent"),

      (try_begin),
        (eq, ":killer_agent_no", ":player_agent"),
        (agent_is_human, ":wounded_agent_no"),
        (agent_get_troop_id, ":wounded_troop", ":wounded_agent_no"),
         (troop_slot_eq, ":wounded_troop", slot_troop_occupation, slto_kingdom_hero),
        (try_begin),
          (troop_is_hero, ":wounded_troop"),
          (store_character_level, ":troop_level", ":wounded_troop"),
          (store_character_level, ":player_level", ":player_troop"),
          (store_sub, ":renown_change", ":troop_level", ":player_level"),
          (val_max, ":renown_change", 0),
          (val_div, ":renown_change", 4),
          (try_begin),
            (agent_is_ally, ":wounded_agent_no"),
            (val_mul, ":renown_change", -1),
          (try_end),
          (call_script,"script_change_troop_renown", ":player_troop", ":renown_change"),
        (try_end),
      (else_try),
        (eq, ":wounded_agent_no", ":player_agent"),
        (agent_is_human, ":killer_agent_no"),
        (agent_get_troop_id, ":killer_troop", ":killer_agent_no"),
        (try_begin),
          (troop_is_hero, ":killer_troop"),
          (store_character_level, ":troop_level", ":killer_troop"),
          (store_character_level, ":player_level", ":player_troop"),
          (store_sub, ":renown_change", ":troop_level", ":player_level"),
          (val_min, ":renown_change", 0),
          (val_div, ":renown_change", 4),
          (call_script,"script_change_troop_renown", ":player_troop", ":renown_change"),
        (try_end),
      (try_end),
    ])

enhanced_common_battle_triggers = [
  player_ability,
  custom_commander_critical_strike,
  custom_commander_hero_wounded,
  miracles,
  equipment_randomization,

  # berserker_ai_mode
  (ti_on_agent_spawn, 0, 0, [],
    [
      (store_trigger_param_1, ":agent_no"),
      (agent_get_troop_id, ":troop_id", ":agent_no"),
      (this_or_next|eq,":troop_id","trp_cynocephalus"), #cynocephalus
      (eq,":troop_id","trp_berserker_leader"), #cynocephalus leader
      (agent_set_slot,":agent_no",slot_agent_berserk_modeon,0),
  ]),

  (0, 20, 0,
    [
      (store_mission_timer_a, ":cur_time"),
      (gt, ":cur_time", 15),#
    ],
    [
      (try_for_agents, ":agent"),
        (agent_is_human, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_is_active,":agent"),
        (agent_slot_eq,":agent",slot_agent_berserk_modeon,0),
        (agent_get_troop_id, ":troop_id", ":agent"),
        (this_or_next|eq,":troop_id","trp_cynocephalus"), #cynocephalus
        (eq,":troop_id","trp_berserker_leader"), #cynocephalus leader
        (store_random_in_range, ":rand", 0, 25),
        (le, ":rand", 1),#
        (call_script, "script_berserkermode_fortroop_on", ":agent"),
      (try_end),
  ]),

  (ti_on_agent_hit, 0, 0,
    [
      (store_mission_timer_a, ":cur_time"),
      (gt, ":cur_time", 20),
    ],
    [
      (assign, ":reg0_backup", reg0),
      (store_trigger_param, ":inflicted_agent_id", 1),
      # (store_trigger_param, ":dealer_agent_id", 2),
      # (store_trigger_param, ":inflicted_damage", 3),

      (agent_is_active,":inflicted_agent_id"),
      (agent_is_human, ":inflicted_agent_id"),
      (agent_is_alive, ":inflicted_agent_id"),

      (agent_get_troop_id, ":troop_id", ":inflicted_agent_id"),
      (this_or_next|eq,":troop_id","trp_cynocephalus"), #cynocephalus
      (eq,":troop_id","trp_berserker_leader"), #cynocephalus leader

      (agent_slot_eq,":inflicted_agent_id",slot_agent_berserk_modeon,0),
      (store_random_in_range, ":rand", 0, 4),
      (ge, ":rand", 1),
      (call_script, "script_berserkermode_fortroop_on", ":inflicted_agent_id"),
      (assign, reg0, ":reg0_backup"),
  ]),

  (0, 15, 0, #berserker mode drop
    [
      (store_mission_timer_a, ":cur_time"),
      (gt, ":cur_time", 10),#
    ],
    [
      (try_for_agents, ":agent"),
        (agent_is_human, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_is_active,":agent"),
        (agent_slot_eq,":agent",slot_agent_berserk_modeon,1),
        (agent_get_troop_id, ":troop_id", ":agent"),
        (this_or_next|eq,":troop_id","trp_cynocephalus"), #cynocephalus
        (eq,":troop_id","trp_berserker_leader"), #cynocephalus leader
        (call_script, "script_berserk_cooldown_modeai_tigger", ":agent"),
      (try_end),
  ]),


] + improved_horse_archer_ai

enhanced_common_siege_triggers = [
  custom_commander_critical_strike,
  custom_commander_hero_wounded,
  equipment_randomization,
]

#JacobHinds New Morale System Triggers:
#routing soldiers recover morale by 30 every 3 seconds.
jacobhinds_morale_recover = (
  3, 0, 0, [
    (eq, "$g_battle_won", 0)], #no recovery once battle is over
  [
    (try_for_agents, ":agent"),
      (agent_is_alive, ":agent"),
      (agent_is_human, ":agent"),
      (gt, ":agent", 1),

      (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),

      #Morale recovery based on number of ready troops on the battlefield, routing or not (prevents rush morale shock exploit)
      (assign, ":strength", 0),
      (try_begin),
        (agent_is_ally, ":agent"),
        (store_add, ":strength", "$j_num_us_ready", "$j_num_allies_ready"),
      (else_try),
        (assign, ":strength", "$j_num_enemies_ready"),
      (try_end),

      #If battle ratio/2 is higher, use that
      #allows winning army to rally troops
      #remember to check for possible reinforcement exploits.
      (try_begin),
        (agent_is_ally, ":agent"),
        (store_div, ":half_ratio", "$battle_ratio", 2),
        (gt, ":half_ratio", ":strength"),
        (assign, ":strength", "$battle_ratio"),
      (else_try),
        (store_div, ":half_ratio", "$battle_ratio", -2),
        (gt, ":strength", ":half_ratio"),
        (assign, ":strength", "$battle_ratio"),
      (try_end),

      #tweaking
      (val_mul, ":strength", 4),
      (val_div, ":strength", 1),

      (val_add, ":courage", ":strength"),
      (agent_set_slot, ":agent", slot_agent_courage_score, ":courage"),
    (try_end),
  ],
            )
jacobhinds_battle_ratio_init = (
#proportionalises battle ratio by adding ABS of ratio to both sides when they spawn
  0, 0, ti_once, [],
  [
    (call_script, "script_cf_calculate_battle_ratio"),
  ],
            )

jacobhinds_battle_ratio_spawn_bonus = (
#proportionalises battle ratio by adding absolute value of ratio to both sides when they spawn
  ti_on_agent_spawn, 0.1, 0, [],
  [
    (store_trigger_param_1, ":agent"),

    (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),
    (try_begin),
      (ge, "$battle_ratio", 0),
      (val_add, ":courage", "$battle_ratio"),
    (else_try),
      (val_sub, ":courage", "$battle_ratio"),
    (try_end),
    (agent_set_slot, ":agent", slot_agent_courage_score, ":courage"),
  ],
            )

jacobhinds_battle_ratio_calculate = (
  10, 0, 0, [],
  [
    (call_script, "script_cf_calculate_battle_ratio"),
  ],
            )
# agent_assign_rank_depth = (ti_on_order_issued, 0, 0, [], [

    # # (store_trigger_param_1,":order"),
    # # (store_trigger_param_2,":agent"),

# #  (is_between, ":order", mordr_form_1_ranks, mordr_form_5_ranks_plus_one),

# #  (val_sub, ":order", mordr_form_0_rank),
# #  (agent_set_slot, ":agent", slot_agent_rank_depth, ":order"),

  # ])

agent_assign_rank_closeness = (ti_on_order_issued, 0, 0, [], [

    (store_trigger_param_1,":order"),
    (store_trigger_param_2,":agent"),

  (agent_get_slot, ":closeness", ":agent", slot_agent_rank_closeness),
  (try_begin),
    (eq, ":order", mordr_stand_closer),
    (val_add, ":closeness", 1),
  (else_try),
    (eq, ":order", mordr_spread_out),
    (val_sub, ":closeness", 1),
  (try_end),

  (val_clamp, ":closeness", -1, 3), #just an assumption based on observation; the loosest formation is only 1 below the defualt
  (agent_set_slot, ":agent", slot_agent_rank_closeness, ":closeness"),

  ])
jacobhinds_ranged_melee_morale_penalty = (
#ranged units get morale penalties for being in melee, eventually routing
#for now defined by guarantee_ranged
  1, 0, 0, [(eq, "$g_ranged_moral_penality", 1)],
  [
    (try_for_agents, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_get_troop_id, ":troop_id", ":agent_no"),
      (troop_is_guarantee_ranged, ":troop_id"),

      #put your exemptions here (e.g. javelinmen, heavy archers, peltast-types, grenadiers, heavy infantry --  i.e. any unit which is guarantee_ranged which you don't want to rout in melee)
      (this_or_next|neq, ":troop_id", "trp_pictish_skirmisher"),
      (this_or_next|neq, ":troop_id", "trp_sassanid_archer"),
      (this_or_next|neq, ":troop_id", "trp_sagittarius"),
      (this_or_next|neq, ":troop_id", "trp_roman_slinger"),
      (this_or_next|neq, ":troop_id", "trp_armenian_bowman"),
      (this_or_next|neq, ":troop_id", "trp_slav_skirmisher"),
      (this_or_next|neq, ":troop_id", "trp_suanian_archer"),
      (this_or_next|neq, ":troop_id", "trp_miles_prima_isaura_sagitarria"),
      (this_or_next|neq, ":troop_id", "trp_miles_sagittarii_venatores"),
      (this_or_next|neq, ":troop_id", "trp_caucasian_archer"),
      (this_or_next|neq, ":troop_id", "trp_nubian_archer"),
      (this_or_next|neq, ":troop_id", "trp_latro_vasconius"),
      (neq, ":troop_id", "trp_caucasian_alan_skirmisher"),

      (agent_get_simple_behavior, ":behaviour", ":agent_no"),
      (eq, ":behaviour", aisb_melee),

      #is troop in a square?
      #calculate square id
      (agent_get_team, ":team", ":agent_no"),
      (agent_get_division, ":division", ":agent_no"),

      (store_mul, ":square_id", ":team", 10),
      (val_add, ":square_id", ":division"),
      (val_add, ":square_id", 1),

#      (troop_slot_eq, "trp_jacobhinds_form_musket_square_size", ":square_id", 0),

      #closer ranks means less morale shock
      (agent_get_slot, ":rank_depth", ":agent_no", slot_agent_rank_depth),
      (val_mul, ":rank_depth", 200),

      (agent_ai_get_cached_enemy, ":enemy_agent", ":agent_no", 0),
      (agent_slot_eq, ":enemy_agent", slot_agent_is_running_away, 0),

      (agent_get_slot, ":courage", ":agent_no", slot_agent_courage_score),
      (val_sub, ":courage", 3000),
      (val_add, ":courage", ":rank_depth"),
      (agent_set_slot, ":agent_no", slot_agent_courage_score, ":courage"),
    (try_end),

  ],
            )
jacobhinds_rout_check = (
   5, 0, 0, [],
   [
      (try_for_agents, ":agent"),
         (agent_is_alive, ":agent"),
         (agent_is_human, ":agent"),
         (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),
         (agent_get_slot, ":routing", ":agent", slot_agent_is_running_away),
         (assign, reg0, ":courage"),
         (assign, reg1, "$battle_ratio"),
         (assign, reg2, ":routing"),
         (str_store_string, s1, "@{reg2?routing:steady}"),
         (agent_get_troop_id, ":troop", ":agent"),
         (str_store_troop_name, s0, ":troop"),
         (display_message, "@Fear = {reg0} {s0} ({s1})"),
      (try_end),
   ],
                  )

#madsci this morale system should be replaced with the one from VC because it performs much better in big battles
jacobhinds_morale_triggers = [
  # agent_assign_rank_depth,#currently unused
  #agent_assign_rank_closeness,
  #jacobhinds_battle_ratio_init,
  #jacobhinds_battle_ratio_spawn_bonus,
  #jacobhinds_battle_ratio_calculate,
  #jacobhinds_morale_recover,
  #jacobhinds_ranged_melee_morale_penalty,
]
#End of New morale system

#Volley
order_volley_triggers = [
    (0, 0, 1, [(key_clicked, key_for_volley)], [(call_script, "script_order_volley_begin_end")]),
    (1, 0, 0, [(call_script, "script_cf_order_volley_check")], [
        (try_for_range, ":team", 0, 4),
            (try_for_range, ":division", 0, 9),
                (store_add, ":slot", slot_team_d0_order_volley, ":division"),
                (team_slot_ge, ":team", ":slot", 1),
                (team_get_slot, ":volley_counter", ":team", ":slot"),
                (val_add, ":volley_counter", 1),
                (team_set_slot, ":team", ":slot", ":volley_counter"),
            (try_end),
        (try_end),

        (try_for_agents, ":agent"),
            (agent_is_non_player, ":agent"),
            (agent_slot_ge, ":agent", slot_agent_volley_fire, 1),
            (agent_get_ammo, ":ammo", ":agent", 1),
            (gt, ":ammo", 0),

            (agent_get_team, ":team", ":agent"),
            (agent_get_division, ":division", ":agent"),
            (store_add, ":slot", slot_team_d0_order_volley, ":division"),
            (team_get_slot, ":volley_counter", ":team", ":slot"),

            (agent_get_slot, ":volley_wpn_type", ":agent", slot_agent_volley_fire),
            (try_begin),
                (eq, ":volley_wpn_type", itp_type_bow),
                (assign, ":delay", 3),
            (else_try),
                (eq, ":volley_wpn_type", itp_type_crossbow),
                (assign, ":delay", 5),
            (try_end),
            (agent_get_combat_state, ":cs", ":agent"),
            (this_or_next|eq, ":cs", 1),
            (eq, ":cs", 3),

            (store_mod, reg0, ":volley_counter", ":delay"),
            (try_begin),
                (eq, reg0, 0),
                (agent_set_attack_action, ":agent", 0, 0), #Fire
            (else_try),
                (agent_set_attack_action, ":agent", 0, 1), #Ready and Aim
            (try_end),
        (try_end),
     ]),

    (1, 0, ti_once, [(neq, "$g_battle_result", 0)], [   #Disable Volley @ end of battle
        (try_for_range, ":team", 0, 4),
            (try_for_range, ":slot", slot_team_d0_order_volley, slot_team_d0_order_volley + 9),
                (team_set_slot, ":team", ":slot", 0),
            (try_end),
        (try_end)
     ]),
]

#Skirmish Mode
order_skirmish_triggers = [
     (0, 0, 1, [(key_clicked, key_for_skirmish)], [(call_script, "script_order_skirmish_begin_end")]),
     (0.5, 0, 0, [(call_script, "script_cf_order_skirmish_check")], [(call_script, "script_order_skirmish_skirmish")]),
     (ti_after_mission_start, 0, 0, [], [
          (get_player_agent_no, ":player"),
          (agent_get_party_id, ":player_party", ":player"),
          (try_for_range, ":i", slot_party_skirmish_d0, slot_party_skirmish_d8 + 1),
               (party_set_slot, ":player_party", ":i", 0),
          (try_end),]),
]

#Formations and AI
AI_triggers = [
  # Trigger file: AI_before_mission_start
  (ti_before_mission_start, 0, 0, [], [
      (assign, "$ranged_clock", 0),
      (assign, "$clock_reset", 0),
      (assign, "$teams_last_fighting", 0),
      (init_position, Team0_Cavalry_Destination),
      (init_position, Team1_Cavalry_Destination),
      (init_position, Team2_Cavalry_Destination),
      (init_position, Team3_Cavalry_Destination),

      (try_begin),
        (eq, "$player_deploy_troops", 0),
        (assign, "$battle_phase", BP_Setup),
      (else_try),
        (assign, "$battle_phase", BP_Ready),  #deployment triggers must advance battle phase
      (try_end)
  ]),

  # Trigger file: AI_after_mission_start
  (0, 0, ti_once, [
      (call_script, "script_cf_division_data_available"),
      ], [
      (set_fixed_point_multiplier, 100),
      (try_for_range, ":team", 0, 4),
        (call_script, "script_battlegroup_get_position", pos0, ":team", grc_everyone),
        (position_get_x, reg0, pos0),
        (team_set_slot, ":team", slot_team_starting_x, reg0),
        (position_get_y, reg0, pos0),
        (team_set_slot, ":team", slot_team_starting_y, reg0),

        #prevent confusion over AI not using formations for archers
        (neq, ":team", "$fplayer_team_no"),
        (store_add, ":slot", slot_team_d0_formation, grc_archers),
        (team_set_slot, ":team", ":slot", formation_none),

        #set up by spawn point until BP_Setup
        (call_script, "script_field_start_position", ":team"),  #returns pos2
        (copy_position, pos1, pos2),
        (team_get_leader, ":ai_leader", ":team"),
        (call_script, "script_division_reset_places"),

        (try_for_range, ":division", 0, 9),
          (call_script, "script_battlegroup_place_around_pos1", ":team", ":division", ":ai_leader"),
        (try_end),
      (try_end),
  ]),

  # Trigger file: AI_setup
  (0, 0, ti_once, [
      (call_script, "script_cf_division_data_available"),
      (ge, "$battle_phase", BP_Setup),  #wait 'til player deploys
      ],[
      (call_script, "script_field_tactics", 1),
  ]),

  # Trigger file: AI_regular_trigger
  (.1, 0, 0, [
      (gt, "$last_player_trigger", 0),
      (ge, "$battle_phase", BP_Setup),

      (store_mission_timer_c_msec, reg0),
      (val_sub, reg0, "$last_player_trigger"),
      (ge, reg0, 250),  #delay to offset from formations trigger (trigger delay does not work right)
      ], [
      (val_add, "$last_player_trigger", 500),

      (try_begin),  #catch moment fighting starts
        (eq, "$clock_reset", 0),
        (call_script, "script_cf_any_fighting"),
        (call_script, "script_cf_count_casualties"),
        (assign, "$battle_phase", BP_Fight),
      (try_end),

      (set_fixed_point_multiplier, 100),
      (call_script, "script_store_battlegroup_data"),

      (try_begin),  #reassess ranged position when fighting starts
        (ge, "$battle_phase", BP_Fight),  #we have to do it this way because BP_Fight may be set in ways other than casualties
        (eq, "$clock_reset", 0),
        (call_script, "script_field_tactics", 1),
        (assign, "$ranged_clock", 0),
        (assign, "$clock_reset", 1),

      (else_try), #at longer intervals after setup...
        (ge, "$battle_phase", BP_Jockey),
        (store_mul, ":five_sec_modulus", 5, Reform_Trigger_Modulus),
        (val_div, ":five_sec_modulus", formation_reform_interval),
        (store_mod, reg0, "$ranged_clock", ":five_sec_modulus"),
        # (eq, reg0, 0),  #MOTO uncomment this line if archers too fidgety

        #reassess archer position
        (call_script, "script_field_tactics", 1),

        #catch reinforcements and set divisions to be retyped with new troops
        (try_begin),
          (neg|team_slot_eq, 0, slot_team_reinforcement_stage, "$defender_reinforcement_stage"),
          (team_set_slot, 0, slot_team_reinforcement_stage, "$defender_reinforcement_stage"),
          (try_for_range, ":division", 0, 9),
            (store_add, ":slot", slot_team_d0_type, ":division"),
            (team_set_slot, 0, ":slot", sdt_unknown),
            (team_set_slot, 2, ":slot", sdt_unknown),
          (try_end),
        (try_end),
        (try_begin),
          (neg|team_slot_eq, 1, slot_team_reinforcement_stage, "$attacker_reinforcement_stage"),
          (team_set_slot, 1, slot_team_reinforcement_stage, "$attacker_reinforcement_stage"),
          (try_for_range, ":division", 0, 9),
            (store_add, ":slot", slot_team_d0_type, ":division"),
            (team_set_slot, 1, ":slot", sdt_unknown),
            (team_set_slot, 3, ":slot", sdt_unknown),
          (try_end),
        (try_end),

      (else_try),
        (call_script, "script_field_tactics", 0),
      (try_end),

      (try_begin),
        (eq, "$battle_phase", BP_Setup),
        (assign, ":not_in_setup_position", 0),
        (try_for_range, ":bgteam", 0, 4),
          (neq, ":bgteam", "$fplayer_team_no"),
          (team_slot_ge, ":bgteam", slot_team_size, 1),
          (call_script, "script_battlegroup_get_position", pos1, ":bgteam", grc_archers),
          (team_get_order_position, pos0, ":bgteam", grc_archers),
          (get_distance_between_positions, reg0, pos0, pos1),
          (gt, reg0, 500),
          (assign, ":not_in_setup_position", 1),
        (try_end),
        (eq, ":not_in_setup_position", 0),  #all AI reached setup position?
        (assign, "$battle_phase", BP_Jockey),
      (try_end),

      (val_add, "$ranged_clock", 1),
  ]),

  # Trigger file: AI_hero_fallen
  #if AI to take over for mods with post-player battle action
  (0, 0, ti_once, [
      (main_hero_fallen),
      (eq, AI_Replace_Dead_Player, 1),
      ], [
      (set_show_messages, 0),
      #undo special player commands
      (team_set_order_listener, "$fplayer_team_no", grc_everyone),
      (team_give_order, "$fplayer_team_no", grc_everyone, mordr_use_any_weapon),
      (team_give_order, "$fplayer_team_no", grc_everyone, mordr_fire_at_will),

      #clear all scripted movement (for now)
      (call_script, "script_player_order_formations", mordr_retreat),
      (set_show_messages, 1),

      (try_for_agents, ":agent"), #reassign agents to the divisions AI uses
        (agent_is_alive, ":agent"),
        (call_script, "script_agent_fix_division", ":agent"),
      (try_end),
  ]),
] #end AI triggers
#Formations
common_after_mission_start = (
  ti_after_mission_start, 0, ti_once, [], [
    (get_player_agent_no, "$fplayer_agent_no"),
    (try_begin),
      (eq, "$fplayer_agent_no", -1),
      (assign, "$fplayer_team_no", -1),
    (else_try),
      (agent_get_group, "$fplayer_team_no", "$fplayer_agent_no"),
    (try_end),
    # (agent_get_horse, ":horse", "$fplayer_agent_no"),
    # (agent_set_slot, "$fplayer_agent_no", slot_agent_horse, ":horse"),
    (set_fixed_point_multiplier, 100),
    (get_scene_boundaries, pos2, pos3),
    (position_get_x, "$g_bound_right", pos3),
    (position_get_y, "$g_bound_top", pos3),
    (position_get_x, "$g_bound_left", pos2),
    (position_get_y, "$g_bound_bottom", pos2),
])

utility_triggers = [  #1 trigger
  common_after_mission_start,
]

#to prevent presentations from starting while old ones are still running
common_presentation_switcher = (
  .05, 0, 0, [
    (neq, "$switch_presentation_new", 0), #we can safely ignore prsnt_game_start
    (neg|is_presentation_active, "$switch_presentation_old"),
    ], [
    (start_presentation, "$switch_presentation_new"),
    (assign, "$switch_presentation_old", "$switch_presentation_new"), #this makes the heroic assumption that all presentations use this system
    (assign, "$switch_presentation_new", 0),
])

battle_panel_triggers = [ #4 triggers
  common_presentation_switcher,

  (ti_on_agent_spawn, 0, 0, [], [
      (store_trigger_param_1, ":agent_no"),
      (agent_set_slot, ":agent_no", slot_agent_map_overlay_id, 0),
  ]),

  (0, 0, 0, [
      (game_key_clicked, gk_view_orders)
  ],[
      (try_begin),
        (is_presentation_active, "prsnt_battle"),
        (presentation_set_duration, 0),

      (else_try),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_battle"),
      (try_end),
  ]),

  # (0.1, 0, 0, [ this is left from Native code
      # (is_presentation_active, "prsnt_battle")
  # ],[
      # (call_script, "script_update_order_panel_statistics_and_map"),
  # ]),
]

extended_battle_menu = [  #15 triggers
  # Trigger file: extended_battle_menu_init
  (ti_before_mission_start ,0, ti_once, [], [
      (assign, "$gk_order", 0), #tracks the first tier order given
      (assign, "$gk_order_hold_over_there", HOT_no_order),  #used to determine if F1 key is being held down
      (assign, "$native_opening_menu", 0),  #tracks whether the first tier battle menu would normally be showing
      (assign, "$g_presentation_active", 0),    #used here to track whether prsnt_battle is overridden when fake battle menu starts
  ]),

  common_presentation_switcher,

  # Trigger file: extended_battle_menu_division_selection
  (0,0,.1, [
      (this_or_next|game_key_clicked, gk_group0_hear),
      (this_or_next|game_key_clicked, gk_group1_hear),
      (this_or_next|game_key_clicked, gk_group2_hear),
      (this_or_next|game_key_clicked, gk_group3_hear),
      (this_or_next|game_key_clicked, gk_group4_hear),
      (this_or_next|game_key_clicked, gk_group5_hear),
      (this_or_next|game_key_clicked, gk_group6_hear),
      (this_or_next|game_key_clicked, gk_group7_hear),
      (this_or_next|game_key_clicked, gk_group8_hear),
      (this_or_next|game_key_clicked, gk_reverse_order_group),  #shows up as "unknown 6" on Native screen
      (this_or_next|game_key_clicked, gk_everyone_around_hear),
      (game_key_clicked, gk_everyone_hear),
      (neg|main_hero_fallen),
      ],[
      (assign, "$gk_order", 0),
      (try_begin),
        (is_presentation_active, "prsnt_battle"),
        (assign, "$g_presentation_active", 1),
      (try_end),
      (try_begin),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_order_display"),
      (try_end),
      (assign, "$native_opening_menu", 1),
      (try_begin),
        (eq, "$battle_phase", BP_Deploy),
        (try_for_range, ":division", 0, 9),
          (class_is_listening_order, "$fplayer_team_no", ":division"),
          (store_add, ":slot", slot_team_d0_formation, ":division"),
          (team_get_slot, ":formation", "$fplayer_team_no", ":slot"),
          (set_show_messages, 0),
          (call_script, "script_formation_to_native_order", "$fplayer_team_no", ":division", ":formation"), #force Native formation update to delink listening/non-listening
          (set_show_messages, 1),
        (try_end),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_tab_out
  # (ti_tab_pressed, 0, 0, [
  # (is_presentation_active, "prsnt_order_display"),
  # ],[
  # (assign, "$gk_order", 0),
  # (assign, "$native_opening_menu", 0),
  # (presentation_set_duration, 0),
  # ]),

  # Trigger file: extended_battle_menu_esc_or_die_out
  (0, 0, 0, [
      (this_or_next|main_hero_fallen),
      (key_is_down, key_escape),
      (is_presentation_active, "prsnt_order_display"),
      ],[
      (presentation_set_duration, 0),
      (assign, "$native_opening_menu", 0),
  ]),

  (0, 0, 0, [
      (this_or_next|main_hero_fallen),
      (key_is_down, key_escape),
      (neq, "$gk_order", 0),
      ],[
      (assign, "$gk_order", 0),
  ]),

  # Trigger file: extended_battle_menu_hold_F1
  (.1, 0, 0, [
      (neq, "$when_f1_first_detected", 0),
      # (store_application_time, reg0), #real time for when game time is slowed for real deployment
      (store_mission_timer_c_msec, reg0),
      (val_sub, reg0, "$when_f1_first_detected"),
      (ge, reg0, 250),  #check around .3 seconds later (Native trigger delay does not work right)
      (eq, "$gk_order", gk_order_1),    #next trigger set MOVE menu?
      ],[
      (assign, "$when_f1_first_detected", 0),

      (try_begin),
        (game_key_is_down, gk_order_1), #BUT player is holding down key?
        (assign, "$gk_order_hold_over_there", HOT_F1_held),
        (assign, "$gk_order", 0),

        (store_and, reg0, "$first_time", first_time_hold_F1),
        (try_begin),
          (eq, reg0, 0),
          (val_or, "$first_time", first_time_hold_F1),
          (eq, "$g_is_quick_battle", 0),
          (dialog_box, "str_division_placement", "@Division Placement"),
        (try_end),

      (else_try),
        (eq, "$gk_order_hold_over_there", HOT_F1_pressed),
        (assign, "$gk_order_hold_over_there", HOT_no_order),
        (assign, "$gk_order", 0),
        (call_script, "script_player_order_formations", mordr_hold),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F1
  (0, 0, 0, [
      (game_key_clicked, gk_order_1),
      (neg|main_hero_fallen)
      ], [
      # (store_application_time, "$when_f1_first_detected"),
      (store_mission_timer_c_msec, "$when_f1_first_detected"),
      (try_begin),
        (neq, "$gk_order", gk_order_1),
        (neq, "$gk_order", gk_order_2),
        (neq, "$gk_order", gk_order_3),
        (assign, "$gk_order", gk_order_1),
        (assign, "$native_opening_menu", 0),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0), #clear main menu additions
        (assign, "$gk_order_hold_over_there", HOT_no_order),
      (else_try),
        (eq, "$gk_order", gk_order_1),  #HOLD
        (assign, "$gk_order_hold_over_there", HOT_F1_pressed),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #ADVANCE
        (assign, "$gk_order", 0),
        (presentation_set_duration, 0), #clear F2 menu additions
        (call_script, "script_player_order_formations", mordr_advance),
      (else_try),
        (eq, "$gk_order", gk_order_3),  #HOLD FIRE
        (assign, "$gk_order", 0),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F2
  (0, 0, 0, [
      (game_key_clicked, gk_order_2),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (neq, "$gk_order", gk_order_1),
        (neq, "$gk_order", gk_order_2),
        (neq, "$gk_order", gk_order_3),
        (assign, "$gk_order", gk_order_2),
        (assign, "$native_opening_menu", 0),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_order_display"),
      (else_try),
        (eq, "$gk_order", gk_order_1),  #FOLLOW
        (assign, "$gk_order", 0),
        (call_script, "script_player_order_formations", mordr_follow),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #FALL BACK
        (assign, "$gk_order", 0),
        (presentation_set_duration, 0), #clear F2 menu additions
        (call_script, "script_player_order_formations", mordr_fall_back),
      (else_try),
        (eq, "$gk_order", gk_order_3),  #FIRE AT WILL
        (assign, "$gk_order", 0),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F3
  (0, 0, 0, [
      (game_key_clicked, gk_order_3),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (neq, "$gk_order", gk_order_1),
        (neq, "$gk_order", gk_order_2),
        (neq, "$gk_order", gk_order_3),
        (assign, "$gk_order", gk_order_3),
        (assign, "$native_opening_menu", 0),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0), #clear main menu additions
      (else_try),
        (eq, "$gk_order", gk_order_1),  #CHARGE
        (assign, "$gk_order", 0),
        (call_script, "script_player_order_formations", mordr_charge),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #SPREAD OUT
        (assign, "$gk_order", 0),
        (presentation_set_duration, 0), #clear F2 menu additions
        (call_script, "script_player_order_formations", mordr_spread_out),
      (else_try),
        (eq, "$gk_order", gk_order_3),  #BLUNT WEAPONS
        (assign, "$gk_order", 0),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F4
  (0, 0, 0, [
      (game_key_clicked, gk_order_4),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (eq, "$gk_order", 0),
        (try_begin),
          (eq, "$FormAI_off", 0),
          (assign, "$gk_order", gk_order_4),
          (try_begin),
            (is_presentation_active, "prsnt_battle"),
            (assign, "$g_presentation_active", 1),
          (try_end),
          (presentation_set_duration, 0),
          (assign, "$switch_presentation_new", "prsnt_order_display"),

          (store_and, reg0, "$first_time", first_time_formations),
          (try_begin),
            (eq, reg0, 0),
            (val_or, "$first_time", first_time_formations),
            (eq, "$g_is_quick_battle", 0),
            (dialog_box, "str_formations", "@Complex Formations"),
          (try_end),

        (else_try),
          (display_message, "@Formations turned OFF in options menu"),
          (eq, "$native_opening_menu", 1),
          (try_begin),
            (is_presentation_active, "prsnt_battle"),
            (assign, "$g_presentation_active", 1),
          (try_end),
          (presentation_set_duration, 0),
          (assign, "$switch_presentation_new", "prsnt_order_display"),
        (try_end),
      (else_try),
        (eq, "$gk_order", gk_order_1),  #STAND GROUND
        (assign, "$gk_order", 0),
        (call_script, "script_player_order_formations", mordr_stand_ground),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #STAND CLOSER
        (assign, "$gk_order", 0),
        (presentation_set_duration, 0), #clear F2 menu additions
        (call_script, "script_player_order_formations", mordr_stand_closer),
      (else_try),
        (eq, "$gk_order", gk_order_3),  #ANY WEAPON
        (assign, "$gk_order", 0),
      (else_try),
        (eq, "$gk_order", gk_order_4),  #FORMATION - RANKS
        (assign, "$gk_order", 0),
        (call_script, "script_division_reset_places"),
        (try_for_range, ":division", 0, 9),
          (class_is_listening_order, "$fplayer_team_no", ":division"),
          (store_add, ":slot", slot_team_d0_target_team, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", -1),
          (store_add, ":slot", slot_team_d0_size, ":division"),
          (team_slot_ge, "$fplayer_team_no", ":slot", 1),
          (store_add, ":slot", slot_team_d0_fclock, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", 1),
          (call_script, "script_player_attempt_formation", ":division", formation_ranks, 1),
        (try_end),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F5
  (0, 0, 0, [
      (game_key_clicked, gk_order_5),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (eq, "$gk_order", 0),   #Redisplay
        (eq, "$native_opening_menu", 1),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_order_display"),
      (else_try),
        (eq, "$gk_order", gk_order_1),  #RETREAT
        (assign, "$gk_order", 0),
        (call_script, "script_player_order_formations", mordr_retreat),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #MOUNT
        (assign, "$gk_order", 0),
        (presentation_set_duration, 0), #clear F2 menu additions
      (else_try),
        (eq, "$gk_order", gk_order_4), #FORMATION - SHIELDWALL
        (assign, "$gk_order", 0),
        (call_script, "script_division_reset_places"),
        (try_for_range, ":division", 0, 9),
          (class_is_listening_order, "$fplayer_team_no", ":division"),
          (store_add, ":slot", slot_team_d0_target_team, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", -1),
          (store_add, ":slot", slot_team_d0_size, ":division"),
          (team_slot_ge, "$fplayer_team_no", ":slot", 1),
          (store_add, ":slot", slot_team_d0_fclock, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", 1),
          (call_script, "script_player_attempt_formation", ":division", formation_shield, 1),
        (try_end),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F6
  (0, 0, 0, [
      (game_key_clicked, gk_order_6),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (eq, "$gk_order", 0),   #Redisplay
        (eq, "$native_opening_menu", 1),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_order_display"),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #DISMOUNT
        (assign, "$gk_order", 0),
        (presentation_set_duration, 0), #clear F2 menu additions
        (call_script, "script_player_order_formations", mordr_dismount),
      (else_try),
        (eq, "$gk_order", gk_order_4), #FORMATION - WEDGE
        (assign, "$gk_order", 0),
        (call_script, "script_division_reset_places"),
        (try_for_range, ":division", 0, 9),
          (class_is_listening_order, "$fplayer_team_no", ":division"),
          (store_add, ":slot", slot_team_d0_target_team, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", -1),
          (store_add, ":slot", slot_team_d0_size, ":division"),
          (team_slot_ge, "$fplayer_team_no", ":slot", 1),
          (store_add, ":slot", slot_team_d0_fclock, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", 1),
          (call_script, "script_player_attempt_formation", ":division", formation_wedge, 1),
        (try_end),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F7
  (0, 0, 0, [
      (key_clicked, key_f7),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (eq, "$gk_order", 0),   #Redisplay
        (eq, "$native_opening_menu", 1),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_order_display"),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #MEMORIZE DIVISION PLACEMENTS
        (call_script, "script_memorize_division_placements"),

      (else_try),
        (eq, "$gk_order", gk_order_4), #FORMATION - SQUARE
        (assign, "$gk_order", 0),
        (call_script, "script_division_reset_places"),
        (try_for_range, ":division", 0, 9),
          (class_is_listening_order, "$fplayer_team_no", ":division"),
          (store_add, ":slot", slot_team_d0_target_team, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", -1),
          (store_add, ":slot", slot_team_d0_size, ":division"),
          (team_slot_ge, "$fplayer_team_no", ":slot", 1),
          (store_add, ":slot", slot_team_d0_fclock, ":division"),
          (team_set_slot, "$fplayer_team_no", ":slot", 1),
          (call_script, "script_player_attempt_formation", ":division", formation_square, 1),
        (try_end),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_F8
  (0, 0, 0, [
      (key_clicked, key_f8),
      (neg|main_hero_fallen)
      ], [
      (try_begin),
        (eq, "$gk_order", 0),   #Redisplay
        (eq, "$native_opening_menu", 1),
        (try_begin),
          (is_presentation_active, "prsnt_battle"),
          (assign, "$g_presentation_active", 1),
        (try_end),
        (presentation_set_duration, 0),
        (assign, "$switch_presentation_new", "prsnt_order_display"),
      (else_try),
        (eq, "$gk_order", gk_order_2),  #FORGET DIVISION PLACEMENTS (WILL USE DEFAULT)
        (call_script, "script_default_division_placements"),
      (else_try),
        (eq, "$gk_order", gk_order_4), #FORMATION - CANCEL
        (assign, "$gk_order", 0),
        (call_script, "script_player_order_formations", mordr_charge),
      (try_end),
  ]),

  # Trigger file: extended_battle_menu_restore_prsnt_battle
  (0.7, 0, 0, [
      (eq, "$g_presentation_active", 1),
      (neg|is_presentation_active, "prsnt_order_display"),
      (eq, "$gk_order", 0),
      ],[
      (presentation_set_duration, 0),
      (assign, "$switch_presentation_new", "prsnt_battle"),
      (assign, "$g_presentation_active", 0),
  ]),
]#end extended battle menu

#These triggers acquire division data
common_division_data = [  #4 triggers
  # Trigger file: common_division_data_ti_before_mission_start
  (ti_before_mission_start, 0, 0, [], [
      (assign, "$last_player_trigger", -2),
      (try_for_range, ":team", 0, 4),
        (team_set_slot, ":team", slot_team_size, 0),
        (try_for_range, ":division", 0, 9),
          (store_add, ":slot", slot_team_d0_type, ":division"),
          (team_set_slot, ":team", ":slot", sdt_unknown),
        (try_end),
      (try_end),
  ]),

  # Trigger file: common_division_data_ti_after_mission_start
  (0, .2, ti_once, [(mission_tpl_are_all_agents_spawned)], [    #only 300 or so agents are spawned by ti_after_mission_start
      (try_for_agents, ":agent"),
        (agent_is_human, ":agent"),
        (try_begin),
          (multiplayer_get_my_player, ":player"),
          (player_is_active, ":player"),
          (player_get_agent_id, ":player_agent", ":player"),
          (eq, ":agent", ":player_agent"),
          (assign, "$fplayer_agent_no", ":player_agent"),
          (player_get_team_no,  "$fplayer_team_no", ":player"),
        (else_try),
          (agent_is_non_player, ":agent"),
          (agent_get_group, ":team", ":agent"),
          (gt, ":team", -1),    #not a MP spectator
          (call_script, "script_agent_fix_division", ":agent"), #Division fix
        (try_end),
      (try_end),

      (try_begin),
        (neg|game_in_multiplayer_mode),
        (set_fixed_point_multiplier, 100),
        (call_script, "script_store_battlegroup_data"),

        #get modal team faction
        (store_sub, ":num_kingdoms", kingdoms_end, kingdoms_begin),
        (store_mul, ":end", 4, ":num_kingdoms"),
        (try_for_range, ":slot", 0, ":end"),
          (team_set_slot, scratch_team, ":slot", 0),
        (try_end),
        (try_for_agents, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_get_group, ":cur_team", ":cur_agent"),
          (agent_get_troop_id, ":cur_troop", ":cur_agent"),
          (store_troop_faction, ":cur_faction", ":cur_troop"),
          (is_between, ":cur_faction", kingdoms_begin, kingdoms_end),
          (store_mul, ":slot", ":cur_team", ":num_kingdoms"),
          (val_sub, ":cur_faction", kingdoms_begin),
          (val_add, ":slot", ":cur_faction"),
          (team_get_slot, ":count", scratch_team, ":slot"),
          (val_add, ":count", 1),
          (team_set_slot, scratch_team, ":slot", ":count"),
        (try_end),

        (try_for_range, ":team", 0, 4),
          (team_slot_ge, ":team", slot_team_size, 1),
          (team_get_leader, ":fleader", ":team"),
          (try_begin),
            (ge, ":fleader", 0),
            (agent_get_troop_id, ":fleader_troop", ":fleader"),
            (store_troop_faction, ":team_faction", ":fleader_troop"),
          (else_try),
            (assign, ":team_faction", 0),
            (assign, ":modal_count", 0),
            (store_mul, ":begin", ":team", ":num_kingdoms"),
            (store_add, ":end", ":begin", ":num_kingdoms"),
            (try_for_range, ":slot", ":begin", ":end"),
              (team_get_slot, ":count", scratch_team, ":slot"),
              (gt, ":count", ":modal_count"),
              (assign, ":modal_count", ":count"),
              (store_sub, ":team_faction", ":begin", ":slot"),
              (val_add, ":team_faction", kingdoms_begin),
            (try_end),
          (try_end),
          (team_set_slot, ":team", slot_team_faction, ":team_faction"),
        (try_end),
      (try_end),

      (val_add, "$last_player_trigger", 1), #signal .5 sec trigger to start
  ]),

  #catch spawning agents after initial setup
  (ti_on_agent_spawn, 0, 0, [(call_script, "script_cf_division_data_available")], [
      (store_trigger_param_1, ":agent"),
      (call_script, "script_agent_fix_division", ":agent"), #Division fix
  ]),

  # Trigger file: common_division_data_regular_trigger
  (0.5, 0, 0, [
      (neq, "$last_player_trigger", -2),
      (neg|main_hero_fallen),
      ],[
      (set_fixed_point_multiplier, 100),
      (store_mission_timer_c_msec, "$last_player_trigger"),

      (try_begin),  #set up revertible types for type check
        (try_for_range, ":team", 0, 4),
          (try_for_range, ":division", 0, 9),
            (store_add, ":slot", slot_team_d0_type, ":division"),
            (this_or_next|team_slot_eq, ":team", ":slot", sdt_skirmisher),
            (team_slot_eq, ":team", ":slot", sdt_harcher),
            (team_set_slot, ":team", ":slot", sdt_unknown),
          (try_end),
        (try_end),
      (try_end),

      (call_script, "script_store_battlegroup_data"),
  ]),
]#end common division data

#These triggers process non-Native orders to divisions
#divorced from whatever command or AI interface (the back end)
division_order_processing = [ #4 triggers
  # Trigger file: division_order_processing_before_mission_start
  (ti_before_mission_start, 0, ti_once, [], [
      (assign, "$g_division_order_processing", 1),  #flag showing these functions are active

      (try_for_range, ":team", 0, 4),
        (try_for_range, reg0, slot_team_d0_target_team, slot_team_d0_target_team+9),
          (team_set_slot, ":team", reg0, -1),
        (try_end),

        #represent Native initial state
        (try_begin),
          (eq, Native_Formations_Implementation, WFaS_Implementation),
          (try_for_range, reg0, slot_team_d0_formation, slot_team_d0_formation+9),
            (team_set_slot, ":team", reg0, formation_2_row),
          (try_end),
          (try_for_range, reg0, slot_team_d0_formation_num_ranks, slot_team_d0_formation_num_ranks+9),
            (team_set_slot, ":team", reg0, 2),
          (try_end),
          (try_for_range, reg0, slot_team_d0_formation_space, slot_team_d0_formation_space+9),
            (team_set_slot, ":team", reg0, 1),
          (try_end),

        (else_try),
          (try_for_range, reg0, slot_team_d0_formation, slot_team_d0_formation+9),
            (team_set_slot, ":team", reg0, formation_none),
          (try_end),
        (try_end),

        (try_for_range, reg0, slot_team_d0_move_order, slot_team_d0_move_order+9),
          (team_set_slot, ":team", reg0, mordr_charge),
        (try_end),
      (try_end),
  ]),

  # Trigger file: division_order_processing_one_second
  (1, 0, 0, [
      (eq, "$g_battle_result", 0),
      (call_script, "script_cf_division_data_available"),
      ],[
      (set_fixed_point_multiplier, 100),

      (call_script, "script_team_get_position_of_enemies", Enemy_Team_Pos, "$fplayer_team_no", grc_everyone),
      (assign, ":num_enemies", reg0),

      (try_begin),
        (gt, ":num_enemies", 0),
        (call_script, "script_process_player_division_positioning"),
      (try_end),

      # (try_begin),
      # (call_script, "script_cf_order_active_check", slot_team_d0_order_skirmish),
      # (call_script, "script_order_skirmish_skirmish"),
      # (try_end),

      (val_add, "$last_player_trigger", 500),
  ]),

  (ti_tab_pressed, 0, 0, [
      (this_or_next|main_hero_fallen),
      (eq, "$g_battle_won", 1),
      ],[
      (assign, "$g_division_order_processing", 0),
  ]),

  (ti_question_answered, 0, 0, [
      (store_trigger_param_1, ":answer"),
      (eq, ":answer", 0),
      ], [
      (assign, "$g_division_order_processing", 0),
  ]),
]#end division order processing

#These triggers allow player to set up troops before a battle
real_deployment = [ #3 triggers
  # Trigger file: real_deployment_after_mission_start
  (ti_after_mission_start, 0, 0, [
      (this_or_next|eq, "$g_is_quick_battle", 1),
      (neq, "$player_deploy_troops", 0),
      ],[
      # (call_script, "script_init_overhead_camera"),
      (assign, "$battle_phase", BP_Init),
      (assign, "$player_deploy_troops", 0),
  ]),

  # Trigger file: real_deployment_init
  (0, 0, ti_once, [
      (eq, "$battle_phase", BP_Init),
      (call_script, "script_cf_division_data_available"),
      # (eq, "$g_division_order_processing", 1),    #division_order_processing inits are done
      ],[
      # (assign, "$g_battle_command_presentation", bcp_state_order_groups),
      # (rebuild_shadow_map),
      (try_begin),
        (eq, "$g_division_order_processing", 1),    #division_order_processing inits are done
        (gt, "$fplayer_team_no", -1),

        #place divisions
        (set_fixed_point_multiplier, 100),
        (call_script, "script_division_reset_places"),
        (call_script, "script_field_start_position", "$fplayer_team_no"),   #returns pos2
        (copy_position, Target_Pos, pos2),

        (try_for_range_backwards, ":division", 0, 9),
          (store_add, ":slot", slot_team_d0_size, ":division"),
          (team_slot_ge, "$fplayer_team_no", ":slot", 1),   #division exists
          (store_add, ":slot", slot_faction_d0_mem_relative_x_flag, ":division"),
          (faction_get_slot, ":formation_is_memorized", "fac_player_faction", ":slot"),
          (store_add, ":slot", slot_team_d0_formation_space, ":division"),
          (team_get_slot, ":current_spacing", "$fplayer_team_no", ":slot"),

          (try_begin),
            (neq, ":formation_is_memorized", 0),
            (store_add, ":slot", slot_faction_d0_mem_formation, ":division"),
            (faction_get_slot, ":formation", "fac_player_faction", ":slot"),
            (store_add, ":slot", slot_team_d0_formation, ":division"),
            (team_set_slot, "$fplayer_team_no", ":slot", ":formation"), #do this here to prevent script_player_attempt_formation from resetting spacing

            (store_add, ":slot", slot_faction_d0_mem_formation_space, ":division"),
            (faction_get_slot, ":memorized_spacing", "fac_player_faction", ":slot"),

            #bring unformed divisions into sync with formations' minimum
            (set_show_messages, 0),
            (try_begin),
              (ge, ":memorized_spacing", ":current_spacing"),
              (try_for_range, reg0, ":current_spacing", ":memorized_spacing"),
                (team_give_order, "$fplayer_team_no", ":division", mordr_spread_out),
              (try_end),
            (else_try),
              (try_for_range, reg0, ":memorized_spacing", ":current_spacing"),
                (team_give_order, "$fplayer_team_no", ":division", mordr_stand_closer),
              (try_end),
            (try_end),
            (set_show_messages, 1),
            (store_add, ":slot", slot_team_d0_formation_space, ":division"),
            (team_set_slot, "$fplayer_team_no", ":slot", ":memorized_spacing"),

            (try_begin),
              (gt, ":formation", formation_none),
              (assign, reg1, ":division"),
              (str_store_class_name, s2, reg1),
              (val_add, reg1, 1),
              (display_message, "@Division {reg1} {s2} goes to its memorized position..."),
              (call_script, "script_player_attempt_formation", ":division", ":formation", 0),
            (else_try),
              (call_script, "script_formation_to_native_order", "$fplayer_team_no", ":division", ":formation"),
              (call_script, "script_battlegroup_place_around_leader", "$fplayer_team_no", ":division", "$fplayer_agent_no"),

              (eq, Native_Formations_Implementation, WB_Implementation),
              (assign, reg0, ":memorized_spacing"),
              (assign, reg1, ":division"),
              (str_store_class_name, s2, reg1),
              (val_add, reg1, 1),
              (try_begin),
                (ge, reg0, 0),
                (display_message, "@Division {reg1} {s2} forms line (memorized)."),
              (else_try),
                (val_mul, reg0, -1),
                (val_add, reg0, 1),
                (display_message, "@Division {reg1} {s2} forms {reg0} lines (memorized)."),
              (try_end),
            (try_end),

          (else_try),
            (team_set_order_listener, "$fplayer_team_no", ":division"), #pick one division to listen; otherwise player agent gets moved as if part of infantry
            (store_add, ":slot", slot_team_d0_type, ":division"),

            (eq, "$FormAI_off", 0),
            (team_slot_eq, "$fplayer_team_no", ":slot", sdt_cavalry),
            (call_script, "script_player_attempt_formation", ":division", formation_wedge, 2),

          (else_try),
            (eq, "$FormAI_off", 0),
            (neg|team_slot_eq, "$fplayer_team_no", ":slot", sdt_archer),
            (neg|team_slot_eq, "$fplayer_team_no", ":slot", sdt_harcher),
            (call_script, "script_get_default_formation", "$fplayer_team_no"),  #defined only for infantry
            (assign, ":formation", reg0),
            (gt, ":formation", formation_none),
            (call_script, "script_player_attempt_formation", ":division", ":formation", 2),

            #Native defaults
          (else_try),
            (call_script, "script_pick_native_formation", "$fplayer_team_no", ":division"),
            (assign, ":formation", reg0),
            (assign, ":ranks", reg1),
            (store_add, ":slot", slot_team_d0_formation, ":division"),
            (team_set_slot, "$fplayer_team_no", ":slot", ":formation"),
            (store_add, ":slot", slot_team_d0_formation_num_ranks, ":division"),
            (team_set_slot, "$fplayer_team_no", ":slot", ":ranks"),
            (copy_position, pos1, Target_Pos),
            (call_script, "script_battlegroup_place_around_pos1", "$fplayer_team_no", ":division", "$fplayer_agent_no"),
            (call_script, "script_formation_to_native_order", "$fplayer_team_no", ":division", ":formation"),   #also forces reset for agent_get_position_in_group

            # (eq, Native_Formations_Implementation, WB_Implementation),    info overload?
            # (assign, reg0, ":current_spacing"),
            # (assign, reg1, ":division"),
            # (str_store_class_name, s2, reg1),
            # (val_add, reg1, 1),
            # (try_begin),
            # (ge, reg0, 0),
            # (display_message, "@Division {reg1} {s2} forms line."),
            # (else_try),
            # (val_mul, reg0, -1),
            # (val_add, reg0, 1),
            # (display_message, "@Division {reg1} {s2} forms {reg0} lines."),
            # (try_end),
          (try_end),
        (try_end),  #division loop

        # #Tactics-Based number of orders and placement limit
        # (try_begin),
        # (eq, "$g_is_quick_battle", 1),
        # (assign, ":num_orders", 3),
        # (else_try),
        # (party_get_skill_level, reg0, "p_main_party", "skl_tactics"),
        # (assign, ":num_orders", reg0),
        # (try_end),
        # # (team_set_slot, 6, slot_team_mv_temp_placement_counter, ":num_orders"), DEPRECATED

        # (store_add, ":times_ten_meters", ":num_orders", 2),   #this makes base placement radius 20m
        # (store_mul, "$division_placement_limit", ":times_ten_meters", 1000),
        # (call_script, "script_team_get_position_of_enemies", pos1, "$fplayer_team_no", grc_everyone),
        # (call_script, "script_battlegroup_get_position", pos2, "$fplayer_team_no", grc_everyone),
        # (get_distance_between_positions, reg0, pos1, pos2),
        # (val_div, reg0, 3),
        # (val_min, "$division_placement_limit", reg0), #place no closer than 1/3 the distance between

        # #make placement border
        # (store_mul, ":num_dashes", 2, "$division_placement_limit"),
        # (val_mul, ":num_dashes", 314, "$division_placement_limit"),
        # (val_div, ":num_dashes", 100*400),    #number of 4-meters in circumference
        # (store_div, ":hundredths_degree", 36000, ":num_dashes"),
        # (agent_get_position, pos1, "$fplayer_agent_no"),
        # (try_for_range, reg1, 0, ":num_dashes"),
        # (position_rotate_z_floating, pos1, ":hundredths_degree"),
        # (copy_position, pos0, pos1),
        # (position_move_y, pos0, "$division_placement_limit"),
        # (position_move_x, pos0, -100),    #center the 200cm dash to avoid sawtooth effect
        # (position_set_z_to_ground_level, pos0),
        # (position_move_z, pos0, 50),
        # (set_spawn_position, pos0),
        # (spawn_scene_prop, "spr_deployment_boundary"),
        # (prop_instance_set_scale, reg0, 2000, 10000, 1),  #going for 2 meter dash
        # (try_end),
      (try_end),    #valid player team
      # ]),

      # # Trigger file: real_deployment_stop_time
      # (0, 0, ti_once, [
      # (eq, "$g_battle_command_presentation", bcp_state_order_groups), #wait til the above trigger fires
      # ],[
      (assign, "$battle_phase", BP_Deploy),
      # (set_fixed_point_multiplier, 1000),
      # (party_get_slot, reg0, "p_main_party", slot_party_pref_rdep_time_scale),
      # (try_begin),
      # (eq, reg0, 1),
      # (mission_set_time_speed, 5),
      # (else_try),
      # (eq, reg0, 2),
      # (mission_set_time_speed, 10),
      # (else_try),
      # (mission_set_time_speed, 1),
      # (try_end),
  ]),

  # # Trigger file: real_deployment_process_divisions
  # (0, 0, 0, [
  # (eq, "$battle_phase", BP_Deploy),
  # # (team_slot_ge, 6, slot_team_mv_temp_placement_counter, 1), ## Error Check to be sure placements remain
  # ],[
  # (set_fixed_point_multiplier, 100),
  # (try_begin),
  # (eq, "$BCP_mouse_state", HOT_F1_held),
  # (prop_instance_get_position, pos1, "$g_objects_selector"),
  # (set_show_messages, 0),
  # (try_for_range, ":division", 0, 9),
  # (store_add, ":slot", slot_team_d0_size, ":division"),
  # (team_slot_ge, "$fplayer_team_no", ":slot", 1), #division exists
  # (class_is_listening_order, "$fplayer_team_no", ":division"),
  # (team_set_order_position, "$fplayer_team_no", ":division", pos1),
  # (try_end),
  # (call_script, "script_process_place_divisions"),
  # (set_show_messages, 1),
  # (try_end),
  # (call_script, "script_process_player_division_positioning"),
  # (call_script, "script_prebattle_agents_set_start_positions", "$fplayer_team_no")
  # ]),

  # Trigger file: real_deployment_end
  (0, 0, ti_once, [
      (eq, "$battle_phase", BP_Deploy),
      # (this_or_next|eq, "$g_battle_command_presentation", bcp_state_off),
      # (neg|team_slot_ge, 6, slot_team_mv_temp_placement_counter, 1),
      ],[
      (assign, "$battle_phase", BP_Setup),
      # (set_fixed_point_multiplier, 10),
      # (mission_set_time_speed, 10),
      # (assign, "$g_battle_command_presentation", bcp_state_off),
      # (try_begin),
      # (is_presentation_active, "prsnt_battle_command"),
      # (presentation_set_duration, 0),
      # (try_end),
      # (assign, "$BCP_pointer_available", 0),
      # # (scene_prop_set_visibility, "$g_objects_selector", 0),
      (get_player_agent_no, ":agent"),
      (gt, ":agent", -1),
      (agent_get_team, reg0, ":agent"),
      # (team_set_order_listener, reg0, -1),
      (team_set_order_listener, reg0, grc_everyone),
      # (try_for_prop_instances, ":prop_instance", "spr_deployment_boundary"),
      # (scene_prop_fade_out, ":prop_instance", 2),
      # (try_end),
      # (assign, "$g_custom_camera_regime", normal_camera),
      # (mission_cam_set_mode, 0, 1000, 1)
  ]),

  # # Trigger file: real_deployment_rebuild_shadows
  # (0, 2, ti_once, [
  # (ge, "$battle_phase", BP_Setup),
  # ],[
  # (try_for_prop_instances, ":prop_instance", "spr_deployment_boundary"),
  # (scene_prop_set_visibility, ":prop_instance", 0),
  # (try_end),
  # (rebuild_shadow_map),
  # ]),
]

formations_triggers = [ #4 triggers
  # Trigger file: formations_before_mission_start
  (ti_before_mission_start, 0, 0, [], [
      (try_for_range, ":team", 0, 4),
        (try_for_range, ":division", 0, 9),
          (store_add, ":slot", slot_team_d0_speed_limit, ":division"),
          (team_set_slot, ":team", ":slot", 10),
          (store_add, ":slot", slot_team_d0_fclock, ":division"),
          (team_set_slot, ":team", ":slot", 1),
        (try_end),
      (try_end),

      (call_script, "script_init_noswing_weapons"),
  ]),

  #kludge formation superiority
  (ti_on_agent_hit, 0, 0, [
      (store_trigger_param, ":missile", 5),
      (le, ":missile", 0),
      (store_trigger_param, ":inflicted_agent_id", 1),
      (agent_is_active,":inflicted_agent_id"),
      (agent_is_human, ":inflicted_agent_id"),
      (agent_is_alive, ":inflicted_agent_id"),
    ], [
      (store_trigger_param, ":inflicted_agent_id", 1),
      (store_trigger_param, ":dealer_agent_id", 2),
      (store_trigger_param, ":inflicted_damage", 3),

      (try_begin),
        (neq, ":inflicted_agent_id", "$fplayer_agent_no"),
        (neq, ":dealer_agent_id", "$fplayer_agent_no"),

        (agent_get_team, ":inflicted_team", ":inflicted_agent_id"),
        (agent_get_division, ":inflicted_division", ":inflicted_agent_id"),
        (store_add, ":slot", slot_team_d0_formation, ":inflicted_division"),
        (team_get_slot, ":inflicted_formation", ":inflicted_team", ":slot"),

        (agent_get_team, ":dealer_team", ":dealer_agent_id"),
        (agent_get_division, ":dealer_division", ":dealer_agent_id"),
        (store_add, ":slot", slot_team_d0_formation, ":dealer_division"),
        (team_get_slot, ":dealer_formation", ":dealer_team", ":slot"),

        (try_begin),
          (eq, ":inflicted_formation", 0),
          (neq, ":dealer_formation", 0),

          (store_add, ":slot", slot_team_d0_percent_in_place, ":dealer_division"),
          (team_slot_ge, ":dealer_team", ":slot", 80),

          (store_add, ":slot", slot_team_d0_formation_space, ":dealer_division"),
          (team_get_slot, ":spacing", ":dealer_team", ":slot"),

          (try_begin),
            (eq, ":spacing", 0),
            (val_mul, ":inflicted_damage", 6),
          (else_try),
            (eq, ":spacing", 1),
            (val_mul, ":inflicted_damage", 5),
          (else_try),
            (val_mul, ":inflicted_damage", 4),
          (try_end),
          (val_div, ":inflicted_damage", 2),

        (else_try),
          (neq, ":inflicted_formation", 0),
          (eq, ":dealer_formation", 0),

          (store_add, ":slot", slot_team_d0_percent_in_place, ":inflicted_division"),
          (team_slot_ge, ":inflicted_team", ":slot", 80),

          (store_add, ":slot", slot_team_d0_formation_space, ":inflicted_division"),
          (team_get_slot, ":spacing", ":inflicted_team", ":slot"),

          (val_mul, ":inflicted_damage", 2),
          (try_begin),
            (eq, ":spacing", 0),
            (val_div, ":inflicted_damage", 6),
          (else_try),
            (eq, ":spacing", 1),
            (val_div, ":inflicted_damage", 5),
          (else_try),
            (val_div, ":inflicted_damage", 4),
          (try_end),

          (val_max, ":inflicted_damage", 1),
        (try_end),
      (try_end),

      (set_trigger_result, ":inflicted_damage"),
  ]),

  # Trigger file: formations_victory_trigger
  (2, 0, ti_once, [
      (eq, "$g_battle_won", 1),
      ],[
      (try_for_range, ":division", 0, 9),
        (store_add, ":slot", slot_team_d0_size, ":division"),
        (team_slot_ge, "$fplayer_team_no", ":slot", 1),
        (call_script, "script_formation_end", "$fplayer_team_no", ":division"),
      (try_end),
  ]),

  # Trigger file: formations_on_agent_killed_or_wounded
  (ti_on_agent_killed_or_wounded, 0, 0, [], [   #prevent leaving noswing weapons around for player to pick up
      (store_trigger_param_1, ":dead_agent_no"),
      (call_script, "script_switch_from_noswing_weapons", ":dead_agent_no"),
  ]),
]
#end formations

unarmed_agent_damage = (
  ti_on_agent_hit, 0, 0,
  [
    (eq, reg0, -1), #unarmed/fists damage
    (store_trigger_param_2, ":attacker"),
    (agent_get_troop_id, ":troop_no", ":attacker"),
    (troop_is_hero, ":troop_no"), #bots normally do not punch/kick
    #should probably do distance check for close-range vs delivered damage?
  ],
  [
    # (store_trigger_param_1, ":defender"),
    (store_trigger_param_2, ":attacker"),
    (store_trigger_param_3, ":damage"),
    # (gt, ":damage", 0), #not a glance

    # (agent_get_attack_action, ":action", ":attacker"),
    (agent_get_animation, ":animation1", ":attacker", 0), #lower body
    # (agent_get_animation, ":animation2", ":attacker",1),
    (assign, ":armor", 0), #used for the base damage
    (assign, ":weight", 0), #modifier
    (try_begin), #kicks
      (eq, ":animation1", "anim_kick_right_leg"),
      (agent_get_item_slot, ":item_no", ":attacker", ek_foot),
      (gt, ":item_no", -1),
      (item_get_leg_armor, ":armor", ":item_no"),
      (item_get_weight, ":weight", ":item_no"),
      (val_div, ":armor", 3),
      (store_div, ":offset", 500, ":weight"),
      (val_sub, ":armor", ":offset"),
    (else_try), #punches (without weapon wielded)
      (agent_get_wielded_item, ":weapon", ":attacker", 0),
      (eq, ":weapon", -1),
      (agent_get_item_slot, ":item_no", ":attacker", ek_gloves),
      (gt, ":item_no", -1),
      (item_get_body_armor, ":armor", ":item_no"),
      (item_get_weight, ":weight", ":item_no"),
      (val_sub, ":armor", 2), #leather glove base
      (val_mul, ":armor", ":weight"), #weight of 1 = 100
      (val_div, ":armor", 100),
    (try_end),
    #get item modifiers from troop?
    #add ironflesh/athletics skill bonus?
    (val_clamp, ":armor", 0, 10), #not too much damage
    (val_add, ":damage", ":armor"),
    # (assign, reg1, ":armor"),
    # (assign, reg2, ":weight"),
    # (display_message, "@{reg1} armor {reg2} weight"),
    (store_trigger_param_3, ":original_damage"),
    (neq, ":original_damage", ":damage"),
    (set_trigger_result, ":damage"),

  ],
)

dplmc_random_mixed_gender = (ti_on_agent_spawn, 0, 0, [
  (ge, "$g_disable_condescending_comments", 4),
],
  [
  (store_trigger_param_1, ":agent_no"),
  (agent_is_human, ":agent_no"),
  (agent_get_troop_id, ":troop_no", ":agent_no"),
  (neg|troop_is_hero, ":troop_no"),
  (neg|is_between, ":troop_no", "trp_follower_woman", "trp_caravan_master"), #always female
  #SB : check non-native troop genders

  #get individual faction chances
  (store_faction_of_troop, ":faction_no", ":troop_no"),
  (try_begin), #TODO: this affects the next agent to spawn as well if custom ratio skewed too high
    (agent_get_party_id, ":party_no", ":agent_no"),
    (party_is_active, ":party_no"),
    (store_faction_of_party, ":party_faction", ":party_no"),
    # (eq, ":party_faction", "$players_kingdom"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":party_faction"),
    (ge, reg0, DPLMC_FACTION_STANDING_LEADER),
    (assign, ":faction_no", "fac_player_supporters_faction"),
  (try_end),
  (faction_get_slot, ":ratio", ":faction_no", slot_faction_gender_ratio),
  (store_random_in_range, ":gender", -100, ":ratio"),
  (try_begin),
    (le, ":gender", 0),
    (troop_set_type, ":troop_no", tf_male),
  (else_try),
    (troop_set_type, ":troop_no", tf_female),
  (try_end),

  ])

dplmc_horse_cull = [
    #sets up the spawn timer
    (ti_on_agent_spawn, 0, 0,
      [ (this_or_next|multiplayer_is_server),
        (neg|game_in_multiplayer_mode),
        (store_trigger_param_1, ":agent_no"),
        (neg|agent_is_human, ":agent_no"), #horse agent
        ],
      [ (store_trigger_param_1, ":horse_no"),
        # (store_trigger_param_2, ":horse_no"),

        (agent_get_rider, ":agent_no", ":horse_no"),
        (try_begin),
          (agent_is_non_player, ":agent_no"), #default period for npcs
          (agent_set_slot, ":horse_no", slot_agent_bought_horse, 0), #default duration
        (else_try),
          (agent_set_slot, ":horse_no", slot_agent_bought_horse, 210),
        (try_end),
        # (str_store_agent_name, s1, ":agent_no"),
        # (agent_get_item_id, ":horse_id", ":horse_no"),
        # (str_store_item_name, s2, ":horse_id"),
        # (display_message, "@{s1} spawned on {s2}"),
      ]),
    #restart it when horses are mounted again
    (ti_on_agent_mount, 0, 0, [(this_or_next|multiplayer_is_server),(neg|game_in_multiplayer_mode)],
      [ (store_trigger_param_1, ":agent_no"),
        (store_trigger_param_2, ":horse_no"),

        (try_begin),
          (agent_is_non_player, ":agent_no"), #default period for npcs
          (agent_set_slot, ":horse_no", slot_agent_bought_horse, 0), #reset the timer
        (else_try),
          (agent_set_slot, ":horse_no", slot_agent_bought_horse, 210), #couple minutes longer for players
        (try_end),
        # (str_store_agent_name, s1, ":agent_no"),
        # (agent_get_item_id, ":horse_id", ":horse_no"),
        # (str_store_item_name, s2, ":horse_id"),
        # (display_message, "@{s1} mounted {s2}"),
      ]),
    #the main "workhorse" of the trigger, set to intervals of 5/10/30 or have a server setting
    (10, 0, 0, [(this_or_next|multiplayer_is_server),(neg|game_in_multiplayer_mode),(eq, "$g_dplmc_horse_speed", 0),],
      [
        (set_fixed_point_multiplier, 1000),
        (try_begin),
          (neg|game_in_multiplayer_mode),
          (assign, ":horse_cull", 30),
        (else_try), #re-use some global
          (assign, ":horse_cull", "$g_horses_are_avaliable"),
        (try_end),
        (try_for_agents, ":horse_no"),
          (agent_is_alive, ":horse_no"),
          (neg|agent_is_human, ":horse_no"),
          (agent_get_rider, ":rider_no", ":horse_no"),
          (lt, ":rider_no", 0),
          (agent_get_slot, ":horse_timer", ":horse_no", slot_agent_bought_horse),
          # (str_store_agent_name, s2, ":horse_no"),
          # (assign, reg2, ":horse_timer"),
          # (display_message, "@{s2} at {reg2} seconds"),
          (try_begin),
            (le, ":horse_timer", -90), #a minute and a half
            #add in a try_for_agent loop so players chasing horses won't be pissed off when it despawns
            (agent_get_position, pos1, ":horse_no"),
            (assign, ":player_agent", -1),
            #better way is to actually check player agent (SP) or iterate through all player_get_agent_id (MP)
            (try_for_agents, ":agent_no", pos1, 5000), #5 meter radius
              (neq, ":agent_no", ":horse_no"),
              (eq, ":player_agent", -1),
              (neg|agent_is_non_player, ":agent_no"),
              (agent_is_alive, ":agent_no"),
              (agent_is_human, ":agent_no"),
              (agent_get_horse, ":player_horse", ":agent_no"),
              (lt, ":player_horse", 0), #dismounted, needs a new one or just want meatshields
              (assign, ":player_agent", ":agent_no"),
            (try_end),
            (eq, ":player_agent", -1), #nobody (important) nearby
            (agent_fade_out, ":horse_no"),
          (else_try),
            (val_sub, ":horse_timer", ":horse_cull"),
            (agent_set_slot, ":horse_no", slot_agent_bought_horse, ":horse_timer"),
            (try_begin), #force runaway half-way through
              (le, ":horse_timer", -60),
              (agent_start_running_away, ":horse_no"),
            (try_end),
          (try_end),
        (try_end),
      ]),

]
dplmc_horse_speed = (
  1, 0, 0, [(eq, "$g_dplmc_horse_speed", 0),],
  [
  (try_for_agents, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_get_horse, ":horse_agent", ":agent_no"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (store_agent_hit_points, ":horse_hp",":horse_agent"),
      (store_sub, ":lost_hp", 100, ":horse_hp"),
      (try_begin),
        (le, ":lost_hp", 15),
        (val_div, ":lost_hp", 2),
        (store_add, ":speed_factor", 100, ":lost_hp"),
      (else_try),
        (val_mul, ":lost_hp", 2),
        (val_div, ":lost_hp", 3),
        (store_sub, ":speed_factor", 115, ":lost_hp"),
      (try_end),
      (agent_get_troop_id, ":agent_troop", ":agent_no"),
      (store_skill_level, ":skl_level", skl_riding, ":agent_troop"),
      (store_mul, ":speed_multi", ":skl_level", 2),
      (val_add, ":speed_multi", 100),
      (val_mul, ":speed_factor", ":speed_multi"),
      (val_div, ":speed_factor", 100),
      (agent_set_horse_speed_factor, ":agent_no", ":speed_factor"),
    (try_end),
  (try_end),
  ])

#alternate mouse camera
##BEAN BEGIN - Deathcam

common_move_deathcam = (
    0, 0, 0,
    [
        (eq, "$g_dplmc_cam_activated", camera_mouse),
        (this_or_next|game_key_is_down, gk_move_forward),
        (this_or_next|game_key_is_down, gk_move_backward),
        (this_or_next|game_key_is_down, gk_move_left),
        (this_or_next|game_key_is_down, gk_move_right),
        (this_or_next|key_is_down, "$g_cam_tilt_left"),
        (this_or_next|key_is_down, "$g_cam_tilt_right"),
        (this_or_next|key_is_down, "$g_camera_adjust_sub"),
        (this_or_next|key_is_down, "$g_camera_adjust_add"),
        (this_or_next|key_clicked, key_home),
        (game_key_is_down, gk_zoom),
    ],
    [
        (set_fixed_point_multiplier, 10000),
        (mission_cam_get_position, pos47),

        # (try_begin),
        # (key_clicked, key_home),
            # (position_set_x, pos47, "$deathcam_death_pos_x"),
            # (position_set_y, pos47, "$deathcam_death_pos_y"),
            # (position_set_z, pos47, "$deathcam_death_pos_z"),
        # (try_end),

        (assign, ":move_x", 0),
        (assign, ":move_y", 0),
        (assign, ":move_z", 0),

        (try_begin),
          (game_key_is_down, gk_move_forward),
          (val_add, ":move_y", 10),
        (else_try),
          (game_key_is_down, gk_move_backward),
          (val_add, ":move_y", -10),
        (try_end),

        (try_begin),
          (game_key_is_down, gk_move_right),
          (val_add, ":move_x", 10),
        (else_try),
          (game_key_is_down, gk_move_left),
          (val_add, ":move_x", -10),
        (try_end),

        (try_begin),
          (key_is_down, "$g_camera_adjust_add"),
          (val_add, ":move_z", 10),
        (else_try),
          (key_is_down, "$g_camera_adjust_sub"),
          (val_add, ":move_z", -10),
        (try_end),

        (try_begin),
          (game_key_is_down, gk_zoom),
          (val_mul, ":move_x", 4),
          (val_mul, ":move_y", 4),
          (val_mul, ":move_z", 2),
        (try_end),

        # (try_begin),
        # (key_is_down, key_end),
            # (try_begin),
            # (eq, "$deathcam_flip_y_multiplier", 1),
                # (assign, "$deathcam_flip_y_multiplier", -1),
                # (display_message, "@Y-Rotation Inverted"),
            # (else_try),
                # (assign, "$deathcam_flip_y_multiplier", 1),
                # (display_message, "@Y-Rotation Normal"),
            # (try_end),
        # (try_end),

        (position_move_x, pos47, ":move_x"),
        (position_move_y, pos47, ":move_y"),
        (position_move_z, pos47, ":move_z"),

        (mission_cam_set_position, pos47),

        (try_begin),
          (key_is_down, "$g_cam_tilt_left"),
          (ge, "$deathcam_sensitivity_x", 4), #Negative check.
          (ge, "$deathcam_sensitivity_y", 3),
          (val_sub, "$deathcam_sensitivity_x", 4),
          (val_sub, "$deathcam_sensitivity_y", 3),
          (store_mod, reg6, "$deathcam_sensitivity_x", 100), #25% increments
          (store_mod, reg7, "$deathcam_sensitivity_y", 75),
          (try_begin),
            (eq, reg6, 0),
            (eq, reg7, 0),
            (assign, reg8, "$deathcam_sensitivity_x"),
            (assign, reg9, "$deathcam_sensitivity_y"),
            (display_message, "@Sensitivity - 25% ({reg8}, {reg9})"),
          (try_end),
        (else_try),
          (key_is_down, "$g_cam_tilt_right"),
          (val_add, "$deathcam_sensitivity_x", 4),
          (val_add, "$deathcam_sensitivity_y", 3),
          (store_mod, reg6, "$deathcam_sensitivity_x", 100), #25% increments
          (store_mod, reg7, "$deathcam_sensitivity_y", 75),
          (try_begin),
            (eq, reg6, 0),
            (eq, reg7, 0),
            (assign, reg8, "$deathcam_sensitivity_x"),
            (assign, reg9, "$deathcam_sensitivity_y"),
            (display_message, "@Sensitivity + 25% ({reg8}, {reg9})"),
          (try_end),
      (try_end),
   ]
)

common_rotate_deathcam = (
    0, 0, 0,
    [
        (eq, "$g_dplmc_cam_activated", camera_mouse),
    ],
    [
        (set_fixed_point_multiplier, 10000), #Extra Precision

        (try_begin),
            (this_or_next|is_presentation_active, "prsnt_battle"), #Opened (mouse must move)
            (this_or_next|key_clicked, key_escape), #Menu
            (this_or_next|key_clicked, key_q), #Notes, etc
            (key_clicked, key_tab), #Retreat
            (eq, "$deathcam_prsnt_was_active", 0),
            (assign, "$deathcam_prsnt_was_active", 1),
            (assign, "$deathcam_mouse_last_notmoved_x", "$deathcam_mouse_notmoved_x"),
            (assign, "$deathcam_mouse_last_notmoved_y", "$deathcam_mouse_notmoved_y"),
        (try_end),

        (assign, ":continue", 0),

        (try_begin),
            (neg|is_presentation_active, "prsnt_battle"),
            (mouse_get_position, pos1), #Get and set mouse position
            (position_get_x, reg1, pos1),
            (position_get_y, reg2, pos1),

            (mission_cam_get_position, pos47),

            (try_begin),
            (neq, "$deathcam_prsnt_was_active", 1),
                (try_begin), #Check not moved
                (eq, reg1, "$deathcam_mouse_last_x"),
                (eq, reg2, "$deathcam_mouse_last_y"),
                (this_or_next|neq, reg1, "$deathcam_mouse_notmoved_x"),
                (neq, reg2, "$deathcam_mouse_notmoved_y"),
                    (val_add, "$deathcam_mouse_notmoved_counter", 1),
                    (try_begin), #Notmoved for n cycles
                    (ge, "$deathcam_mouse_notmoved_counter", 15),
                        (assign, "$deathcam_mouse_notmoved_counter", 0),
                        (assign, "$deathcam_mouse_notmoved_x", reg1),
                        (assign, "$deathcam_mouse_notmoved_y", reg2),
                    (try_end),
                (else_try), #Has moved
                    (assign, ":continue", 1),
                    (assign, "$deathcam_mouse_notmoved_counter", 0),
                (try_end),
                (assign, "$deathcam_mouse_last_x", reg1), #Next cycle, this pos = last pos
                (assign, "$deathcam_mouse_last_y", reg2),
            (else_try), #prsnt was active
                (try_begin),
                (neq, reg1, "$deathcam_mouse_last_x"), #Is moving
                (neq, reg2, "$deathcam_mouse_last_y"),
                    (store_sub, ":delta_x2", reg1, "$deathcam_mouse_last_notmoved_x"), #Store pos difference
                    (store_sub, ":delta_y2", reg2, "$deathcam_mouse_last_notmoved_y"),
                (is_between, ":delta_x2", -10, 11), #when engine recenters mouse, there is a small gap
                (is_between, ":delta_y2", -10, 11), #usually 5 pixels, but did 10 to be safe.
                    (assign, "$deathcam_prsnt_was_active", 0),
                    (assign, "$deathcam_mouse_notmoved_x", "$deathcam_mouse_last_notmoved_x"),
                    (assign, "$deathcam_mouse_notmoved_y", "$deathcam_mouse_last_notmoved_y"),
                (else_try),
                    (assign, "$deathcam_mouse_notmoved_x", reg1),
                    (assign, "$deathcam_mouse_notmoved_y", reg2),
                (try_end),
                    (assign, "$deathcam_mouse_last_x", reg1), #Next cycle, this pos = last pos
                    (assign, "$deathcam_mouse_last_y", reg2),
            (try_end),
        (try_end),

        (assign, ":delta_x", 0),
        (assign, ":delta_y", 0),
        (assign, ":rotating_horizontal", 0),
        (assign, ":rotating_vertical", 0),

        (try_begin),
          (key_is_down, "$g_camera_rot_left"),
          (try_begin),
            (ge, "$deathcam_keyboard_rotation_x", 0),
            (assign, "$deathcam_keyboard_rotation_x", -20),
          (try_end),
          (val_add, "$deathcam_keyboard_rotation_x", -1),
          (assign, ":continue", 2),
          (assign, ":rotating_horizontal", -1),
        (else_try),
          (key_is_down, "$g_camera_rot_right"),
          (try_begin),
            (le, "$deathcam_keyboard_rotation_x", 0),
            (assign, "$deathcam_keyboard_rotation_x", 20),
          (try_end),
          (val_add, "$deathcam_keyboard_rotation_x", 1),
          (assign, ":continue", 2),
          (assign, ":rotating_horizontal", 1),
        (else_try),
          (assign, "$deathcam_keyboard_rotation_x", 0),
          (assign, ":rotating_horizontal", 0),
        (try_end),

        (try_begin),
          (key_is_down, "$g_camera_rot_up"),
          (try_begin),
            (le, "$deathcam_keyboard_rotation_y", 0),
            (assign, "$deathcam_keyboard_rotation_y", 15),
          (try_end),
          (val_add, "$deathcam_keyboard_rotation_y", 1),
          (assign, ":continue", 2),
          (assign, ":rotating_vertical", 1),
        (else_try),
          (key_is_down, "$g_camera_rot_down"),
          (try_begin),
            (ge, "$deathcam_keyboard_rotation_y", 0),
            (assign, "$deathcam_keyboard_rotation_y", -15),
          (try_end),
          (val_add, "$deathcam_keyboard_rotation_y", -1),
          (assign, ":continue", 2),
          (assign, ":rotating_vertical", -1),
        (else_try),
          (assign, "$deathcam_keyboard_rotation_y", 0),
          (assign, ":rotating_vertical", 0),
        (try_end),

        (try_begin),
          (eq, ":continue", 1),
          (store_sub, ":delta_x", reg1, "$deathcam_mouse_notmoved_x"), #Store pos difference
          (store_sub, ":delta_y", reg2, "$deathcam_mouse_notmoved_y"),
        (else_try),
          (eq, ":continue", 2),
          (try_begin),
            (neq, ":rotating_horizontal", 0),
            (val_clamp, "$deathcam_keyboard_rotation_x", -80, 80),
            (assign, ":delta_x", "$deathcam_keyboard_rotation_x"),
          (try_end),

          (try_begin),
            (neq, ":rotating_vertical", 0),
            (val_clamp, "$deathcam_keyboard_rotation_y", -45, 45),
            (assign, ":delta_y", "$deathcam_keyboard_rotation_y"),
          (try_end),
        (try_end),

        (try_begin),
          (ge, ":continue", 1),
          (val_mul, ":delta_x", "$deathcam_sensitivity_x"),
          (val_mul, ":delta_y", "$deathcam_sensitivity_y"),
          # (val_mul, ":delta_y", "$deathcam_flip_y_multiplier"),

          (val_clamp, ":delta_x", -80000, 80001), #8
          (val_clamp, ":delta_y", -60000, 60001), #6

          (store_mul, ":neg_rotx", "$deathcam_total_rotx", -1),
          (position_rotate_x_floating, pos47, ":neg_rotx"), #Reset x axis to initial state

          (position_rotate_y, pos47, 90), #Barrel roll by 90 degrees to inverse x/z axis
          (position_rotate_x_floating, pos47, ":delta_x"), #Rotate simulated z axis, Horizontal
          (position_rotate_y, pos47, -90), #Reverse

          (position_rotate_x_floating, pos47, "$deathcam_total_rotx"), #Reverse

          (position_rotate_x_floating, pos47, ":delta_y"), #Vertical
          (val_add, "$deathcam_total_rotx", ":delta_y"), #Fix yaw
          (mission_cam_set_position, pos47),
        (try_end),
    ]
)
##BEAN END - Deathcam
#alternate follower camera


custom_commander_camera = (
  0, 0, 0, [
    (this_or_next|eq, "$g_dplmc_cam_activated", camera_follow),
    (neg|main_hero_fallen),

    # (this_or_next|main_hero_fallen),
    # (neg|is_camera_in_first_person),
  ],
  [
    (try_begin),
      (main_hero_fallen),
      (gt, "$dmod_current_agent", -1), #should be -1, but variable gets bugged
      # (agent_is_active, "$dmod_current_agent"),
      (assign, ":player_agent", "$dmod_current_agent"),
      (assign, ":duration", 500),
    (else_try),
      # (get_player_agent_no, ":player_agent"),
      (assign, ":player_agent", "$g_player_agent"),
      (assign, ":duration", 0),#instant
    (try_end),

    #compared to other deathcams these values are kept between missions
    (agent_is_active, ":player_agent", 0),
    (assign, ":continue", 0),
    (try_begin),
      (key_is_down, "$g_camera_adjust_add"),
      (val_add, "$g_camera_z", 5),
      (assign, ":continue", 1),
      (try_begin),
        (key_is_down, key_left_control),
        (val_add, "$g_camera_rotate_y", 5),
      (try_end),
    (else_try),
      (key_is_down, "$g_camera_adjust_sub"),
      (val_sub, "$g_camera_z", 5),
      (assign, ":continue", 1),
      (try_begin),
        (key_is_down, key_left_control),
        (val_sub, "$g_camera_rotate_y", 5),
      (try_end),
    (else_try),
      (key_is_down, "$g_camera_rot_up"),
      (val_add, "$g_camera_y", 5),
      (assign, ":continue", 1),
      (try_begin),
        (key_is_down, key_left_control),
        (val_add, "$g_camera_rotate_x", 5),
      (try_end),
    (else_try),
      (key_is_down, "$g_camera_rot_down"),
      (val_sub, "$g_camera_y", 5),
      (assign, ":continue", 1),
      (try_begin),
        (key_is_down, key_left_control),
        (val_sub, "$g_camera_rotate_x", 5),
      (try_end),
    (try_end),

    (try_begin),
      (key_is_down, key_left_control),
      (try_begin),
        (key_is_down, "$g_camera_rot_left"),
        (val_sub, "$g_camera_rotate_y", 5),
      (else_try),
        (key_is_down, "$g_camera_rot_right"),
        (val_add, "$g_camera_rotate_y", 5),
      (try_end),
    (try_end),
    (try_begin), #any key pressed, immediate update
      (eq, ":continue", 1),
      #no headless mode
      (set_camera_in_first_person, 0),
      (assign, ":duration", 0),
      (mission_cam_set_mode, 1),
    (try_end),

    (agent_get_look_position, pos47, ":player_agent"),
    #moving around x when following is pointless
    (position_move_z, pos47, "$g_camera_z"),
    (position_move_y, pos47, "$g_camera_y"),

    (position_rotate_z, pos47, "$g_camera_rotate_z"),
    #rot x is the only one that makes sense, other rotations tilt too much
    (position_rotate_x, pos47, "$g_camera_rotate_x"),
    (position_rotate_y, pos47, "$g_camera_rotate_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos47, 90),
      (val_div, ":duration", 2),#mounted agents need to refresh faster
    (try_end),

    #prevent clipping underground
    (position_get_distance_to_ground_level, ":height", pos47),
    (try_begin), #centimeters?
      (le, ":height", 0),
      (position_set_z_to_ground_level, pos47),
      (position_move_z, pos47, 15), #keep around knee height?
    (try_end),

    (try_begin), #if we don't cancel during first person, head disappears
      (call_script, "script_cf_cancel_camera_keys"),
      (neg|main_hero_fallen),
    (else_try),
      (gt, ":duration", 0), #if 0, won't animate at all
      # (eq, "$dmod_move_camera", 1),
      (mission_cam_animate_to_position, pos47, ":duration", 0),
    (else_try), #this allows moving with the troop every frame
      (mission_cam_set_position, pos47),
    (try_end),
  ])

deathcam_cycle_forwards = (0, 0.5, 1,[(this_or_next|key_clicked, key_mouse_scroll_up),(key_clicked, "$g_cam_tilt_left"),
        (main_hero_fallen),(eq, "$g_dplmc_cam_activated", camera_follow),
        ],
        [(call_script, "script_dmod_cycle_forwards"),])

deathcam_cycle_backwards = (0, 0.5, 1,[(this_or_next|key_clicked, key_mouse_scroll_down),(key_clicked, "$g_cam_tilt_right"),
        (main_hero_fallen),(eq, "$g_dplmc_cam_activated", camera_follow),
        ],
        [(call_script, "script_dmod_cycle_backwards"),])

#default keyboard camera
dplmc_death_camera = (
  0, 0, 0,
  [(eq, "$g_dplmc_battle_continuation", 0),
   (eq, "$g_dplmc_cam_activated", camera_keyboard),
  ],
  [
    #(agent_get_look_position, pos47, ":player_agent"),

    # (get_player_agent_no, ":player_agent"),
    # (agent_get_team, ":player_team", ":player_agent"),

    (mission_cam_get_position, pos47),

    (assign, ":camera_rotate_x", 0),
    (assign, ":camera_rotate_y", 0),
    (assign, ":camera_rotate_z", 0),
    (assign, ":camera_x", 0),
    (assign, ":camera_y", 0),
    (assign, ":camera_z", 0),

    (try_begin),
      (game_key_is_down, gk_move_left),
      (val_sub, ":camera_x", 10),
    (else_try),
      (game_key_is_down, gk_move_right),
      (val_add, ":camera_x", 10),
    (try_end),
    (position_move_x, pos47, ":camera_x"),

    (try_begin),
      (game_key_is_down, gk_move_forward),
      (val_add, ":camera_y", 10),
    (else_try),
      (game_key_is_down, gk_move_backward),
      (val_sub, ":camera_y", 10),
    (try_end),
    (position_move_y, pos47, ":camera_y"),

    (try_begin),
      (key_is_down, "$g_camera_adjust_add"),
      (val_add, ":camera_z", 10),
    (else_try),
      (key_is_down, "$g_camera_adjust_sub"),
      (val_sub, ":camera_z", 10),
    (try_end),
    (position_move_z, pos47, ":camera_z"),

    (try_begin),
      (key_is_down, "$g_camera_rot_left"),
      (val_add, ":camera_rotate_z", 1),
    (else_try),
      (key_is_down, "$g_camera_rot_right"),
      (val_sub, ":camera_rotate_z", 1),
    (try_end),
    (position_rotate_z, pos47, ":camera_rotate_z"),

    (try_begin),
      (key_is_down, "$g_cam_tilt_left"),
      (val_add, ":camera_rotate_y", 1),
    (else_try),
      (key_is_down, "$g_cam_tilt_right"),
      (val_sub, ":camera_rotate_y", 1),
    (try_end),
    (position_rotate_y, pos47, ":camera_rotate_y"),

    (try_begin),
      (key_is_down, "$g_camera_rot_up"),
      (val_add, ":camera_rotate_x", 1),
    (else_try),
      (key_is_down, "$g_camera_rot_down"),
      (val_sub, ":camera_rotate_x", 1),
    (try_end),
    (position_rotate_x, pos47, ":camera_rotate_x"),

    (try_begin),
      (call_script, "script_cf_cancel_camera_keys"),
    (else_try),
      (mission_cam_set_mode, 1),
      (mission_cam_set_position, pos47),
    (try_end),
  ])

##SB : new camera triggers
dplmc_battle_mode_triggers = [
    #dplmc_random_mixed_gender,
    dplmc_horse_speed,
    #common_move_deathcam,
	#common_rotate_deathcam,
    #custom_commander_camera,
#deathcam_cycle_forwards,
#deathcam_cycle_backwards,
    #dplmc_death_camera, #madsci
    passable_allies,
    poisoned_arrows_hit,
    poisoned_arrows_damage,
bean_common_init_deathcam,
bean_common_start_deathcam,
bean_common_move_deathcam,
bean_common_rotate_deathcam,
  ]
##diplomacy end

multiplayer_server_check_belfry_movement = (
  0, 0, 0, [],
  [
    (multiplayer_is_server),
    (set_fixed_point_multiplier, 100),

    (try_for_range, ":belfry_kind", 0, 2),
      (try_begin),
        (eq, ":belfry_kind", 0),
        (assign, ":belfry_body_scene_prop", "spr_belfry_a"),
      (else_try),
        (assign, ":belfry_body_scene_prop", "spr_belfry_b"),
      (try_end),

      (scene_prop_get_num_instances, ":num_belfries", ":belfry_body_scene_prop"),
      (try_for_range, ":belfry_no", 0, ":num_belfries"),
        (scene_prop_get_instance, ":belfry_scene_prop_id", ":belfry_body_scene_prop", ":belfry_no"),
        (prop_instance_get_position, pos1, ":belfry_scene_prop_id"), #pos1 holds position of current belfry
        (prop_instance_get_starting_position, pos11, ":belfry_scene_prop_id"),

        (store_add, ":belfry_first_entry_point_id", 11, ":belfry_no"), #belfry entry points are 110..119 and 120..129 and 130..139
        (try_begin),
          (eq, ":belfry_kind", 1),
          (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),
          (val_add, ":belfry_first_entry_point_id", ":number_of_belfry_a"),
        (try_end),

        (val_mul, ":belfry_first_entry_point_id", 10),
        (store_add, ":belfry_last_entry_point_id", ":belfry_first_entry_point_id", 10),

        (try_for_range, ":entry_point_id", ":belfry_first_entry_point_id", ":belfry_last_entry_point_id"),
          (entry_point_is_auto_generated, ":entry_point_id"),
          (assign, ":belfry_last_entry_point_id", ":entry_point_id"),
        (try_end),

        (assign, ":belfry_last_entry_point_id_plus_one", ":belfry_last_entry_point_id"),
        (val_sub, ":belfry_last_entry_point_id", 1),
        (assign, reg0, ":belfry_last_entry_point_id"),
        (neg|entry_point_is_auto_generated, ":belfry_last_entry_point_id"),

        (try_begin),
          (get_sq_distance_between_positions, ":dist_between_belfry_and_its_destination", pos1, pos11),
          (ge, ":dist_between_belfry_and_its_destination", 4), #0.2 * 0.2 * 100 = 4 (if distance between belfry and its destination already less than 20cm no need to move it anymore)

          (assign, ":max_dist_between_entry_point_and_belfry_destination", -1), #should be lower than 0 to allow belfry to go last entry point
          (assign, ":belfry_next_entry_point_id", -1),
          (try_for_range, ":entry_point_id", ":belfry_first_entry_point_id", ":belfry_last_entry_point_id_plus_one"),
            (entry_point_get_position, pos4, ":entry_point_id"),
            (get_sq_distance_between_positions, ":dist_between_entry_point_and_belfry_destination", pos11, pos4),
            (lt, ":dist_between_entry_point_and_belfry_destination", ":dist_between_belfry_and_its_destination"),
            (gt, ":dist_between_entry_point_and_belfry_destination", ":max_dist_between_entry_point_and_belfry_destination"),
            (assign, ":max_dist_between_entry_point_and_belfry_destination", ":dist_between_entry_point_and_belfry_destination"),
            (assign, ":belfry_next_entry_point_id", ":entry_point_id"),
          (try_end),

          (try_begin),
            (ge, ":belfry_next_entry_point_id", 0),
            (entry_point_get_position, pos5, ":belfry_next_entry_point_id"), #pos5 holds belfry next entry point target during its path
          (else_try),
            (copy_position, pos5, pos11),
          (try_end),

          (get_distance_between_positions, ":belfry_next_entry_point_distance", pos1, pos5),

          #collecting scene prop ids of belfry parts
          (try_begin),
            (eq, ":belfry_kind", 0),
            #belfry platform_a
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
            #belfry platform_b
            (scene_prop_get_instance, ":belfry_platform_b_scene_prop_id", "spr_belfry_platform_b", ":belfry_no"),
          (else_try),
            #belfry platform_a
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
          (try_end),

          #belfry wheel_1
          (store_mul, ":wheel_no", ":belfry_no", 3),
          (try_begin),
            (eq, ":belfry_body_scene_prop", "spr_belfry_b"),
            (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),
            (store_mul, ":number_of_belfry_a_wheels", ":number_of_belfry_a", 3),
            (val_add, ":wheel_no", ":number_of_belfry_a_wheels"),
          (try_end),
          (scene_prop_get_instance, ":belfry_wheel_1_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
          #belfry wheel_2
          (val_add, ":wheel_no", 1),
          (scene_prop_get_instance, ":belfry_wheel_2_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
          #belfry wheel_3
          (val_add, ":wheel_no", 1),
          (scene_prop_get_instance, ":belfry_wheel_3_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),

          (init_position, pos17),
          (position_move_y, pos17, -225),
          (position_transform_position_to_parent, pos18, pos1, pos17),
          (position_move_y, pos17, -225),
          (position_transform_position_to_parent, pos19, pos1, pos17),

          (assign, ":number_of_agents_around_belfry", 0),
          (get_max_players, ":num_players"),
          (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":agent_id", ":player_no"),
            (ge, ":agent_id", 0),
            (agent_get_team, ":agent_team", ":agent_id"),
            (eq, ":agent_team", 1), #only team2 players allowed to move belfry (team which spawns outside the castle (team1 = 0, team2 = 1))
            (agent_get_horse, ":agent_horse_id", ":agent_id"),
            (eq, ":agent_horse_id", -1),
            (agent_get_position, pos2, ":agent_id"),
            (get_sq_distance_between_positions_in_meters, ":dist_between_agent_and_belfry", pos18, pos2),

            (lt, ":dist_between_agent_and_belfry", multi_distance_sq_to_use_belfry), #must be at most 10m * 10m = 100m away from the player
            (neg|scene_prop_has_agent_on_it, ":belfry_scene_prop_id", ":agent_id"),
            (neg|scene_prop_has_agent_on_it, ":belfry_platform_a_scene_prop_id", ":agent_id"),

            (this_or_next|eq, ":belfry_kind", 1), #there is this_or_next here because belfry_b has no platform_b
            (neg|scene_prop_has_agent_on_it, ":belfry_platform_b_scene_prop_id", ":agent_id"),

            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_1_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_2_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_3_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|position_is_behind_position, pos2, pos19),
            (position_is_behind_position, pos2, pos1),
            (val_add, ":number_of_agents_around_belfry", 1),
          (try_end),

          (val_min, ":number_of_agents_around_belfry", 16),

          (try_begin),
            (scene_prop_get_slot, ":pre_number_of_agents_around_belfry", ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing),
            (scene_prop_get_slot, ":next_entry_point_id", ":belfry_scene_prop_id", scene_prop_next_entry_point_id),
            (this_or_next|neq, ":pre_number_of_agents_around_belfry", ":number_of_agents_around_belfry"),
            (neq, ":next_entry_point_id", ":belfry_next_entry_point_id"),

            (try_begin),
              (eq, ":next_entry_point_id", ":belfry_next_entry_point_id"), #if we are still targetting same entry point subtract
              (prop_instance_is_animating, ":is_animating", ":belfry_scene_prop_id"),
              (eq, ":is_animating", 1),

              (store_mul, ":sqrt_number_of_agents_around_belfry", "$g_last_number_of_agents_around_belfry", 100),
              (store_sqrt, ":sqrt_number_of_agents_around_belfry", ":sqrt_number_of_agents_around_belfry"),
              (val_min, ":sqrt_number_of_agents_around_belfry", 300),
              (assign, ":distance", ":belfry_next_entry_point_distance"),
              (val_mul, ":distance", ":sqrt_number_of_agents_around_belfry"),
              (val_div, ":distance", 100), #100 is because of fixed_point_multiplier
              (val_mul, ":distance", 4), #multiplying with 4 to make belfry pushing process slower,
                                                                 #with 16 agents belfry will go with 4 / 4 = 1 speed (max), with 1 agent belfry will go with 1 / 4 = 0.25 speed (min)
            (try_end),

            (try_begin),
              (ge, ":belfry_next_entry_point_id", 0),

              #up down rotation of belfry's next entry point
              (init_position, pos9),
              (position_set_y, pos9, -500), #go 5.0 meters back
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9),
              (position_get_distance_to_terrain, ":height_to_terrain_1", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at left part of belfry

              (init_position, pos9),
              (position_set_y, pos9, -500), #go 5.0 meters back
              (position_set_x, pos9, 300), #go 3.0 meters right
              (position_transform_position_to_parent, pos10, pos5, pos9),
              (position_get_distance_to_terrain, ":height_to_terrain_2", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at right part of belfry

              (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),
              (val_mul, ":height_to_terrain", 100), #because of fixed point multiplier

              (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 2 degrees. #ac sonra
              (init_position, pos20),
              (position_rotate_x_floating, pos20, ":rotate_angle_of_next_entry_point"),
              (position_transform_position_to_parent, pos23, pos5, pos20),

              #right left rotation of belfry's next entry point
              (init_position, pos9),
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
              (init_position, pos9),
              (position_set_x, pos9, 300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
              (store_sub, ":height_to_terrain_1", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

              (init_position, pos9),
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_set_y, pos9, -500), #go 5.0 meters forward
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
              (init_position, pos9),
              (position_set_x, pos9, 300), #go 3.0 meters left
              (position_set_y, pos9, -500), #go 5.0 meters forward
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
              (store_sub, ":height_to_terrain_2", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

              (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),
              (val_mul, ":height_to_terrain", 100), #100 is because of fixed_point_multiplier
              (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 25 degrees.
              (val_mul, ":rotate_angle_of_next_entry_point", -1),

              (init_position, pos20),
              (position_rotate_y_floating, pos20, ":rotate_angle_of_next_entry_point"),
              (position_transform_position_to_parent, pos22, pos23, pos20),
            (else_try),
              (copy_position, pos22, pos5),
            (try_end),

            (try_begin),
              (ge, ":number_of_agents_around_belfry", 1), #if there is any agents pushing belfry

              (store_mul, ":sqrt_number_of_agents_around_belfry", ":number_of_agents_around_belfry", 100),
              (store_sqrt, ":sqrt_number_of_agents_around_belfry", ":sqrt_number_of_agents_around_belfry"),
              (val_min, ":sqrt_number_of_agents_around_belfry", 300),
              (val_mul, ":belfry_next_entry_point_distance", 100), #100 is because of fixed_point_multiplier
              (val_mul, ":belfry_next_entry_point_distance", 3), #multiplying with 3 to make belfry pushing process slower,
                                                                 #with 9 agents belfry will go with 3 / 3 = 1 speed (max), with 1 agent belfry will go with 1 / 3 = 0.33 speed (min)
              (val_div, ":belfry_next_entry_point_distance", ":sqrt_number_of_agents_around_belfry"),
              #calculating destination coordinates of belfry parts
              #belfry platform_a
              (prop_instance_get_position, pos6, ":belfry_platform_a_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos1, pos6),
              (position_transform_position_to_parent, pos8, pos22, pos7),
              (prop_instance_animate_to_position, ":belfry_platform_a_scene_prop_id", pos8, ":belfry_next_entry_point_distance"),
              #belfry platform_b
              (try_begin),
                (eq, ":belfry_kind", 0),
                (prop_instance_get_position, pos6, ":belfry_platform_b_scene_prop_id"),
                (position_transform_position_to_local, pos7, pos1, pos6),
                (position_transform_position_to_parent, pos8, pos22, pos7),
                (prop_instance_animate_to_position, ":belfry_platform_b_scene_prop_id", pos8, ":belfry_next_entry_point_distance"),
              (try_end),
              #wheel rotation
              (store_mul, ":belfry_wheel_rotation", ":belfry_next_entry_point_distance", -25),
              #(val_add, "$g_belfry_wheel_rotation", ":belfry_wheel_rotation"),
              (assign, "$g_last_number_of_agents_around_belfry", ":number_of_agents_around_belfry"),

              #belfry wheel_1
              #(prop_instance_get_starting_position, pos13, ":belfry_wheel_1_scene_prop_id"),
              (prop_instance_get_position, pos13, ":belfry_wheel_1_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_1_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),

              #belfry wheel_2
              #(prop_instance_get_starting_position, pos13, ":belfry_wheel_2_scene_prop_id"),
              (prop_instance_get_position, pos13, ":belfry_wheel_2_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_2_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),

              #belfry wheel_3
              (prop_instance_get_position, pos13, ":belfry_wheel_3_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_3_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),

              #belfry main body
              (prop_instance_animate_to_position, ":belfry_scene_prop_id", pos22, ":belfry_next_entry_point_distance"),
            (else_try),
              (prop_instance_is_animating, ":is_animating", ":belfry_scene_prop_id"),
              (eq, ":is_animating", 1),

              #belfry platform_a
              (prop_instance_stop_animating, ":belfry_platform_a_scene_prop_id"),
              #belfry platform_b
              (try_begin),
                (eq, ":belfry_kind", 0),
                (prop_instance_stop_animating, ":belfry_platform_b_scene_prop_id"),
              (try_end),
              #belfry wheel_1
              (prop_instance_stop_animating, ":belfry_wheel_1_scene_prop_id"),
              #belfry wheel_2
              (prop_instance_stop_animating, ":belfry_wheel_2_scene_prop_id"),
              #belfry wheel_3
              (prop_instance_stop_animating, ":belfry_wheel_3_scene_prop_id"),
              #belfry main body
              (prop_instance_stop_animating, ":belfry_scene_prop_id"),
            (try_end),

            (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, ":number_of_agents_around_belfry"),
            (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, ":belfry_next_entry_point_id"),
          (try_end),
        (else_try),
          (le, ":dist_between_belfry_and_its_destination", 4),
          (scene_prop_slot_eq, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),

          (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),

          (try_begin),
            (eq, ":belfry_kind", 0),
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
          (else_try),
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
          (try_end),

          (prop_instance_get_starting_position, pos0, ":belfry_platform_a_scene_prop_id"),
          (prop_instance_animate_to_position, ":belfry_platform_a_scene_prop_id", pos0, 400),
        (try_end),
      (try_end),
    (try_end),
    ])

multiplayer_server_spawn_bots = (
  0, 0, 0, [],
  [
    (multiplayer_is_server),
    (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
    (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
    (try_begin),
      (gt, ":total_req", 0),

      (try_begin),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

        (team_get_score, ":team_1_score", 0),
        (team_get_score, ":team_2_score", 1),

        (store_add, ":current_round", ":team_1_score", ":team_2_score"),
        (eq, ":current_round", 0),

        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),
        (lt, ":round_time", 20),

        (assign, ":rounded_game_first_round_time_limit_past", 0),
      (else_try),
        (assign, ":rounded_game_first_round_time_limit_past", 1),
      (try_end),

      (eq, ":rounded_game_first_round_time_limit_past", 1),

      (store_random_in_range, ":random_req", 0, ":total_req"),
      (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
      (try_begin),
        (lt, ":random_req", 0),
        #add to team 1
        (assign, ":selected_team", 0),
      (else_try),
        #add to team 2
        (assign, ":selected_team", 1),
      (try_end),

      (try_begin),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),

        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),

        (try_begin),
          (le, ":round_time", 20),
          (assign, ":look_only_actives", 0),
        (else_try),
          (assign, ":look_only_actives", 1),
        (try_end),
      (else_try),
        (assign, ":look_only_actives", 1),
      (try_end),

      (call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":selected_team", ":look_only_actives"),
      (assign, ":selected_troop", reg0),
      (assign, ":selected_group", reg1),

      (team_get_faction, ":team_faction", ":selected_team"),
      (assign, ":num_ai_troops", 0),
      (try_for_range, ":cur_ai_troop", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":ai_troop_faction", ":cur_ai_troop"),
        (eq, ":ai_troop_faction", ":team_faction"),
        (val_add, ":num_ai_troops", 1),
      (try_end),

      (assign, ":number_of_active_players_wanted_bot", 0),

      (get_max_players, ":num_players"),
      (try_for_range, ":player_no", 0, ":num_players"),
        (player_is_active, ":player_no"),
        (player_get_team_no, ":player_team_no", ":player_no"),
        (eq, ":selected_team", ":player_team_no"),

        (assign, ":ai_wanted", 0),
        (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
        (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
          (player_slot_ge, ":player_no", ":bot_type_wanted_slot", 1),
          (assign, ":ai_wanted", 1),
          (assign, ":end_cond", 0),
        (try_end),

        (ge, ":ai_wanted", 1),

        (val_add, ":number_of_active_players_wanted_bot", 1),
      (try_end),

      (try_begin),
        (this_or_next|ge, ":selected_group", 0),
        (eq, ":number_of_active_players_wanted_bot", 0),

        (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
        (try_begin),
          (ge, ":has_item", 0),
          (assign, ":is_horseman", 1),
        (else_try),
          (assign, ":is_horseman", 0),
        (try_end),

        (try_begin),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

          (store_mission_timer_a, ":round_time"),
          (val_sub, ":round_time", "$g_round_start_time"),

          (try_begin),
            (lt, ":round_time", 20), #at start of game spawn at base entry point
            (try_begin),
              (eq, ":selected_team", 0),
              (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 1, ":is_horseman"),
            (else_try),
              (assign, reg0, multi_initial_spawn_point_team_2),
            (try_end),
          (else_try),
            (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"),
          (try_end),
        (else_try),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),

          (try_begin),
            (eq, ":selected_team", 0),
            (assign, reg0, 0),
          (else_try),
            (assign, reg0, 32),
          (try_end),
        (else_try),
          (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"),
        (try_end),

        (store_current_scene, ":cur_scene"),
        (modify_visitors_at_site, ":cur_scene"),
        (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", ":selected_group"),
        (assign, "$g_multiplayer_ready_for_spawning_agent", 0),

        (try_begin),
          (eq, ":selected_team", 0),
          (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
        (else_try),
          (eq, ":selected_team", 1),
          (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
        (try_end),
      (try_end),
    (try_end),
    ])

multiplayer_server_manage_bots = (
  3, 0, 0, [],
  [
    (multiplayer_is_server),
    (try_for_agents, ":cur_agent"),
      (agent_is_non_player, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_get_group, ":agent_group", ":cur_agent"),
      (try_begin),
        (neg|player_is_active, ":agent_group"),
        (call_script, "script_multiplayer_change_leader_of_bot", ":cur_agent"),
      (else_try),
        (player_get_team_no, ":leader_team_no", ":agent_group"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (neq, ":leader_team_no", ":agent_team"),
        (call_script, "script_multiplayer_change_leader_of_bot", ":cur_agent"),
      (try_end),
    (try_end),
    ])

multiplayer_server_check_polls = (
  1, 5, 0,
  [
    (multiplayer_is_server),
    (eq, "$g_multiplayer_poll_running", 1),
    (eq, "$g_multiplayer_poll_ended", 0),
    (store_mission_timer_a, ":mission_timer"),
    (store_add, ":total_votes", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
    (this_or_next|eq, ":total_votes", "$g_multiplayer_poll_num_sent"),
    (gt, ":mission_timer", "$g_multiplayer_poll_end_time"),
    (call_script, "script_cf_multiplayer_evaluate_poll"),
    ],
  [
    (assign, "$g_multiplayer_poll_running", 0),
    (try_begin),
      (this_or_next|eq, "$g_multiplayer_poll_to_show", 0), #change map
      (eq, "$g_multiplayer_poll_to_show", 3), #change map with factions
      (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
      (start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
      (call_script, "script_game_set_multiplayer_mission_end"),
    (try_end),
    ])

multiplayer_server_check_end_map = (
  1, 0, 0, [],
  [
    (multiplayer_is_server),
    #checking for restarting the map
    (try_begin),
      (assign, ":end_map", 0),
      (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
      (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
      (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

      (try_begin),
        (eq, "$g_round_ended", 1),

        (store_mission_timer_a, ":seconds_past_till_round_ended"),
        (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
        (store_sub, ":multiplayer_respawn_period_minus_one", "$g_multiplayer_respawn_period", 1),
        (ge, ":seconds_past_till_round_ended", ":multiplayer_respawn_period_minus_one"),

        (store_mission_timer_a, ":mission_timer"),
        (try_begin),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
          (assign, ":reduce_amount", 90),
        (else_try),
          (assign, ":reduce_amount", 120),
        (try_end),

        (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
        (store_sub, ":game_max_seconds_min_n_seconds", ":game_max_seconds", ":reduce_amount"), #when round ends if there are 60 seconds to map change time then change map without completing exact map time.
        (gt, ":mission_timer", ":game_max_seconds_min_n_seconds"),
        (assign, ":end_map", 1),
      (try_end),

      (eq, ":end_map", 1),
    (else_try),
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #battle mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy), #fight and destroy mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege), #siege mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters), #in headquarters mod game cannot limited by time, only can be limited by score.
      (store_mission_timer_a, ":mission_timer"),
      (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
      (gt, ":mission_timer", ":game_max_seconds"),
      (assign, ":end_map", 1),
    (else_try),
      #assuming only 2 teams in scene
      (team_get_score, ":team_1_score", 0),
      (team_get_score, ":team_2_score", 1),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters), #for not-headquarters mods
        (try_begin),
          (this_or_next|ge, ":team_1_score", "$g_multiplayer_game_max_points"),
          (ge, ":team_2_score", "$g_multiplayer_game_max_points"),
          (assign, ":end_map", 1),
        (try_end),
      (else_try),
        (assign, ":at_least_one_player_is_at_game", 0),
        (get_max_players, ":num_players"),
        (try_for_range, ":player_no", 0, ":num_players"),
          (player_is_active, ":player_no"),
          (player_get_agent_id, ":agent_id", ":player_no"),
          (ge, ":agent_id", 0),
          (neg|agent_is_non_player, ":agent_id"),
          (assign, ":at_least_one_player_is_at_game", 1),
          (assign, ":num_players", 0),
        (try_end),

        (eq, ":at_least_one_player_is_at_game", 1),

        (this_or_next|le, ":team_1_score", 0), #in headquarters game ends only if one team has 0 score.
        (le, ":team_2_score", 0),
        (assign, ":end_map", 1),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":end_map", 1),
      (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
      (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
      (call_script, "script_game_set_multiplayer_mission_end"),
    (try_end),
    ])

multiplayer_once_at_the_first_frame = (
  0, 0, ti_once, [], [
    (start_presentation, "prsnt_multiplayer_welcome_message"),
    ])

multiplayer_battle_window_opened = (
  ti_battle_window_opened, 0, 0, [], [
    (start_presentation, "prsnt_multiplayer_team_score_display"),
    ])


common_battle_mission_start = (
  ti_before_mission_start, 0, 0, [],
  [
    (team_set_relation, 0, 2, 1),
    (team_set_relation, 1, 3, 1),
    (call_script, "script_change_banners_and_chest"),
    ])

freelancer_siege_triggers = [
  (ti_on_agent_spawn, 0, 0, [(eq, "$freelancer_state", 1)],
    [
      (get_player_agent_no, ":player"),
      (ge, ":player", 0),
      (agent_is_active, ":player"),
      (store_trigger_param_1, ":agent_no"),
      (eq, ":player", ":agent_no"),
      (agent_get_team, ":player_team", ":player"),
      (team_set_order_listener, ":player_team", -1),
      (val_add, ":player_team", 2),
      (agent_set_team, ":player", ":player_team"),
    ]),

  common_battle_mission_start, #+Freelancer addition of native field battle trigger to sieges
]

common_battle_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (try_begin),
      (eq, "$g_battle_won", 1),
      (call_script, "script_count_mission_casualties_from_agents"),
      (finish_mission,0),
    ##diplomacy begin
   (else_try),
      (eq, "$g_dplmc_battle_continuation", 0),
      ##diplomacy start+ Import Caba`drin's battle continuation fix
      (this_or_next|main_hero_fallen),   #CABA EDIT/FIX FOR DEATH CAM
      ##diplomacy end+
      (eq, "$pin_player_fallen", 1),
      (question_box,"str_do_you_want_to_retreat"),
##      (call_script, "script_simulate_retreat", 5, 20),
##      (str_store_string, s5, "str_retreat"),
##      (call_script, "script_count_mission_casualties_from_agents"),
##      (set_mission_result, -1),
##      (finish_mission,0),
    ##diplomacy end
    (else_try),
(neq, "$freelancer_state", 1), #madsci
      (call_script, "script_cf_check_enemies_nearby"),
      (question_box,"str_do_you_want_to_retreat"),
    (else_try),
      (display_message,"str_can_not_retreat"),
    (try_end),
    ])

common_battle_init_banner = (
  ti_on_agent_spawn, 0, 0, [],
  [
    (store_trigger_param_1, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
    (call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":agent_no", ":troop_no"),
  ])


common_arena_fight_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (question_box,"str_give_up_fight"),
    ])

common_custom_battle_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (try_begin),
      (neq, "$g_battle_result", 0),
      (call_script, "script_custom_battle_end"),
      (finish_mission),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ])

custom_battle_check_victory_condition = (
  1, 60, ti_once,
  [
    (store_mission_timer_a,reg(1)),
    (ge,reg(1),10),
    (all_enemies_defeated, 2),
    ##diplomacy begin
    (this_or_next|eq, "$g_dplmc_battle_continuation", 0),
    (neg|main_hero_fallen, 0),
    ##diplomacy end
    (set_mission_result,1),
    (display_message,"str_msg_battle_won"),
    (assign, "$g_battle_won",1),
    (assign, "$g_battle_result", 1),
    ],
  [
    (call_script, "script_custom_battle_end"),
    (finish_mission, 1),
    ])

custom_battle_check_defeat_condition = (
  1, 4,
##diplomacy begin
0,
##diplomacy end
  [
    (main_hero_fallen),
    ##diplomacy begin
    (try_begin),
      (call_script, "script_cf_dplmc_battle_continuation"),
    (else_try),
      ##diplomacy end
      (assign,"$g_battle_result",-1),
      ##diplomacy begin
    (try_end),
    ##diplomacy end
    ],
  [
    (call_script, "script_custom_battle_end"),
    (finish_mission),
    ])

common_battle_victory_display = (
  10, 0, 0, [],
  [
    (eq,"$g_battle_won",1),
    (display_message,"str_msg_battle_won"),
    ])

common_siege_question_answered = (
  ti_question_answered, 0, 0, [],
   [
     (store_trigger_param_1,":answer"),
     (eq,":answer",0),
     (assign, "$pin_player_fallen", 0),
     (get_player_agent_no, ":player_agent"),
     (agent_get_team, ":agent_team", ":player_agent"),
     (try_begin),
       (neq, "$attacker_team", ":agent_team"),
       (neq, "$attacker_team_2", ":agent_team"),
       (str_store_string, s5, "str_siege_continues"),
       (call_script, "script_simulate_retreat", 8, 15, 0),
     (else_try),
       (str_store_string, s5, "str_retreat"),
       (call_script, "script_simulate_retreat", 5, 20, 0),
     (try_end),
     (call_script, "script_count_mission_casualties_from_agents"),
     (finish_mission,0),
     ])

common_custom_battle_question_answered = (
   ti_question_answered, 0, 0, [],
   [
     (store_trigger_param_1,":answer"),
     (eq,":answer",0),
     (assign, "$g_battle_result", -1),
     (call_script, "script_custom_battle_end"),
     (finish_mission),
     ])

common_custom_siege_init = (
  0, 0, ti_once, [],
  [
    (assign, "$g_battle_result", 0),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    ])

common_siege_init = (
  0, 0, ti_once, [],
  [
    (assign,"$g_battle_won",0),
    (assign,"$defender_reinforcement_stage",0),
    (assign,"$attacker_reinforcement_stage",0),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    (call_script, "script_init_death_cam"), #SB : initialize this here
    ])

common_music_situation_update = (
  30, 0, 0, [],
  [
    (call_script, "script_combat_music_set_situation_with_culture"),
    ])

common_siege_ai_trigger_init = (
  0, 0, ti_once,
  [
    (assign, "$defender_team", 0),
    (assign, "$attacker_team", 1),
    (assign, "$defender_team_2", 2),
    (assign, "$attacker_team_2", 3),
    ], [])

common_siege_ai_trigger_init_2 = (
  0, 1, ti_once,
  [
    #SB : horse archer fix
    (try_begin),
      (eq, "$g_dplmc_horse_speed", 0),
      (try_for_agents, ":agent_no"),
        (agent_is_active, ":agent_no"),
        (agent_get_team, ":team_no", ":agent_no"),
        (this_or_next|eq, ":team_no", "$defender_team"),
        (eq, ":team_no", "$defender_team_2"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (neg|troop_is_hero, ":troop_no"),
        (troop_is_guarantee_ranged, ":troop_no"),
        (agent_set_division, ":agent_no", grc_archers),
        # (troop_is_guarantee_horse, ":troop_no"),
        # (troop_is_mounted, ":troop_no"),
        # (assign, ":weapon_slot", ek_head),
        # (try_for_range, ":slot_no", 0, ":weapon_slot"), #stupid khergits have both jav + bow
          # (agent_get_item_slot, ":item_no", ":agent_no", ":slot_no"),
          # (gt, ":item_no", -1),
          # (item_get_type, ":itp", ":item_no"),
          # (is_between, ":itp", itp_type_bow, itp_type_thrown),
          # (assign, ":weapon_slot", 0),
          # (str_store_item_name, s2, ":item_no"),
        # (try_end),
        # (str_store_agent_name, s1, ":agent_no"),
        # #(display_message, "@{s1} wielding {s2}"),
        # (try_begin),
          # (eq, ":weapon_slot", 0),
          # (agent_set_division, ":agent_no", grc_archers),
        # (else_try),
          # (agent_set_division, ":agent_no", grc_infantry),
        # (try_end),
      (try_end),
    (try_end),
    ],
    [
    (set_show_messages, 0),
    (entry_point_get_position, pos10, 10),
    (try_for_range, ":cur_group", 0, grc_everyone),
      (neq, ":cur_group", grc_archers),
      (team_give_order, "$defender_team", ":cur_group", mordr_hold),
      (team_give_order, "$defender_team", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_hold),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_stand_closer),
    (try_end),
    (team_give_order, "$defender_team", grc_archers, mordr_stand_ground),
    (team_set_order_position, "$defender_team", grc_everyone, pos10),
    (team_give_order, "$defender_team_2", grc_archers, mordr_stand_ground),
    (team_set_order_position, "$defender_team_2", grc_everyone, pos10),
    (set_show_messages, 1),
    ])

common_siege_ai_trigger_init_after_2_secs = (
  0, 2, ti_once, [],
  [
    (try_for_agents, ":agent_no"),
      (agent_set_slot, ":agent_no", slot_agent_is_not_reinforcement, 1),
    (try_end),
    ])

common_siege_defender_reinforcement_check = (
  3, 0, 5, [],
  [(lt, "$defender_reinforcement_stage", 7),
   (store_mission_timer_a,":mission_time"),
   (ge,":mission_time",10),
   (store_normalized_team_count,":num_defenders",0),
   (lt,":num_defenders",8),
   (add_reinforcements_to_entry,4, 35),
   (val_add,"$defender_reinforcement_stage",1),
   (try_begin),
     (gt, ":mission_time", 300), #5 minutes, don't let small armies charge
     (get_player_agent_no, ":player_agent"),
     (agent_get_team, ":player_team", ":player_agent"),
     (neq, ":player_team", "$defender_team"), #player should be the attacker
     (neq, ":player_team", "$defender_team_2"), #player should be the attacker
     (ge, "$defender_reinforcement_stage", 2),
     (set_show_messages, 0),
     (team_give_order, "$defender_team", grc_infantry, mordr_charge), #AI desperate charge:infantry!!!
     (team_give_order, "$defender_team_2", grc_infantry, mordr_charge), #AI desperate charge:infantry!!!
     (team_give_order, "$defender_team", grc_cavalry, mordr_charge), #AI desperate charge:cavalry!!!
     (team_give_order, "$defender_team_2", grc_cavalry, mordr_charge), #AI desperate charge:cavalry!!!
     (set_show_messages, 1),
     (ge, "$defender_reinforcement_stage", 4),
     (set_show_messages, 0),
     (team_give_order, "$defender_team", grc_everyone, mordr_charge), #AI desperate charge: everyone!!!
     (team_give_order, "$defender_team_2", grc_everyone, mordr_charge), #AI desperate charge: everyone!!!
     (set_show_messages, 1),
   (try_end),
   ])

common_siege_defender_reinforcement_archer_reposition = (
  2, 0, 0,
  [
    (gt, "$defender_reinforcement_stage", 0),
    ],
  [
    (call_script, "script_siege_move_archers_to_archer_positions"),
    ])

common_siege_attacker_reinforcement_check = (
  1, 0, 5,
  [
    (lt,"$attacker_reinforcement_stage",5),
    (store_mission_timer_a,":mission_time"),
    (ge,":mission_time",10),
    (store_normalized_team_count,":num_attackers",1),
    (lt,":num_attackers",6)
    ],
  [
    (add_reinforcements_to_entry, 1, 35),
    (val_add,"$attacker_reinforcement_stage", 1),
    ])

common_siege_attacker_do_not_stall = (
  5, 0, 0, [],
  [ #Make sure attackers do not stall on the ladders...
    (try_for_agents, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_get_team, ":agent_team", ":agent_no"),
      (this_or_next|eq, ":agent_team", "$attacker_team"),
      (eq, ":agent_team", "$attacker_team_2"),
      (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
    (try_end),
    ])

common_battle_check_friendly_kills = (
  2, 0, 0, [],
  [
    (call_script, "script_check_friendly_kills"),
    ])

common_battle_check_victory_condition = (
  1, 60, ti_once,
  [
    (store_mission_timer_a,reg(1)),
    (ge,reg(1),10),
    (all_enemies_defeated, 5),
    #(call_script, "script_all_enemies_routed"),
    #(eq, reg0, 0),
    ##diplomacy begin
    #(eq, "$g_dplmc_battle_continuation", 0), #madsci
    #(neg|main_hero_fallen),
    ##diplomacy end
    (set_mission_result,1),
    (display_message,"str_msg_battle_won"),
    (assign,"$g_battle_won",1),
    (assign, "$g_battle_result", 1),
    (call_script, "script_play_victorious_sound"),
    ],
  [
    (call_script, "script_count_mission_casualties_from_agents"),
    (finish_mission, 1),
    ])

common_battle_victory_display = (
  10, 0, 0, [(eq,"$g_battle_won",1),], #SB : moved conditions
  [
    (display_message,"str_msg_battle_won"),
    ])

common_siege_refill_ammo = (
  120, 0, 0, [],
  [#refill ammo of defenders every two minutes.
    (get_player_agent_no, ":player_agent"),
    (try_for_agents,":cur_agent"),
      (neq, ":cur_agent", ":player_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
##      (agent_is_defender, ":cur_agent"),
      (agent_get_team, ":agent_team", ":cur_agent"),
      (this_or_next|eq, ":agent_team", "$defender_team"),
      (eq, ":agent_team", "$defender_team_2"),
      (agent_refill_ammo, ":cur_agent"),
    (try_end),
    ])

#common_siege_check_defeat_condition = (
#  1, 4,
##diplomacy begin
#0,
##diplomacy end
#  [
#    (main_hero_fallen)
#    ],
#  [
#    ##diplomacy begin
#      (try_begin),
#        (call_script, "script_cf_dplmc_battle_continuation"),
#      (else_try),
#        ##diplomacy end
#        (assign, "$pin_player_fallen", 1),
#        (get_player_agent_no, ":player_agent"),
#        (agent_get_team, ":agent_team", ":player_agent"),
#        (try_begin),
#          (neq, "$attacker_team", ":agent_team"),
#          (neq, "$attacker_team_2", ":agent_team"),
#          (str_store_string, s5, "str_siege_continues"),
#          (call_script, "script_simulate_retreat", 8, 15, 0),
#        (else_try),
#          (str_store_string, s5, "str_retreat"),
#          (call_script, "script_simulate_retreat", 5, 20, 0),
#       (try_end),
#        (assign, "$g_battle_result", -1),
#        (set_mission_result,-1),
#        (call_script, "script_count_mission_casualties_from_agents"),
#        (finish_mission,0),
#        ##diplomacy begin
#      (try_end),
#    ##diplomacy end
#    ])

#madsci
common_siege_check_defeat_condition = (
  1, 4,
##diplomacy begin
0,
##diplomacy end
  [
    (main_hero_fallen)
    ],
  [
    ##diplomacy begin
    (try_begin),
      (eq, "$g_dplmc_battle_continuation", 0),
      (assign, ":num_allies", 0),
      (try_for_agents, ":agent"),
       (agent_is_ally, ":agent"),
       (agent_is_alive, ":agent"),
       (val_add, ":num_allies", 1),
      (try_end),
      (gt, ":num_allies", 0),
      (try_begin),
        (eq, "$g_dplmc_cam_activated", 0),
        (assign, "$g_dplmc_cam_activated", 1),
        (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
      (try_end),
    (else_try),
    ##diplomacy end
    (assign, "$pin_player_fallen", 1),
    (get_player_agent_no, ":player_agent"),
    (agent_get_team, ":agent_team", ":player_agent"),
    (try_begin),
      (neq, "$attacker_team", ":agent_team"),
      (neq, "$attacker_team_2", ":agent_team"),
      (str_store_string, s5, "str_siege_continues"),
      (call_script, "script_simulate_retreat", 8, 15, 0),
    (else_try),
      (str_store_string, s5, "str_retreat"),
      (call_script, "script_simulate_retreat", 5, 20, 0),
    (try_end),
    (assign, "$g_battle_result", -1),
    (set_mission_result,-1),
    (call_script, "script_count_mission_casualties_from_agents"),
    (finish_mission,0),
    ##diplomacy begin
    (try_end),
    ##diplomacy end
    ])

common_battle_order_panel = (
  0, 0, 0, [
    (game_key_clicked, gk_view_orders),
    (neg|is_presentation_active, "prsnt_battle"),
  ],
  [
    (start_presentation, "prsnt_battle"),
    ])

common_battle_order_panel_tick = (
  0.1, 0, 0, [
  (is_presentation_active, "prsnt_battle"),
  ],
  [
    (call_script, "script_update_order_panel_statistics_and_map"),
    ])

common_battle_inventory = (
  ti_inventory_key_pressed, 0, 0, [],
  [
    (display_message,"str_use_baggage_for_inventory"),
    ])

common_inventory_not_available = (
  ti_inventory_key_pressed, 0, 0,
  [
    (display_message, "str_cant_use_inventory_now"),
    ], [])

common_siege_init_ai_and_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_siege_init_ai_and_belfry"),
    ], [])

common_siege_move_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_cf_siege_move_belfry"),
    ], [])

common_siege_rotate_belfry = (
  0, 2, ti_once,
  [
    (call_script, "script_cf_siege_rotate_belfry_platform"),
    ],
  [
    (assign, "$belfry_positioned", 3),
    ])

common_siege_assign_men_to_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_cf_siege_assign_men_to_belfry"),
    ], [])


tournament_triggers = [
  (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest"),
                                       (assign, "$g_arena_training_num_agents_spawned", 0)]),
  (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),

#madsci agent banner to tell the teams apart from each other because they use the same equipment
(ti_on_agent_spawn, 0, 0, [(eq, "$g_mt_mode", abm_tournament),],
  [
	(store_trigger_param_1, ":agent_no"),
	(agent_get_team, ":team", ":agent_no"),
		(try_begin),
		(is_between, ":team", 0, 4),
		(assign, ":banner_mesh", "mesh_banners_default_b"),
		(val_add, ":banner_mesh", ":team"),
		(cur_agent_set_banner_tableau_material, "tableau_game_troop_label_banner", ":banner_mesh"),
		(try_end),
  ]),

  (ti_tab_pressed, 0, 0, [],
   [(try_begin),
      (eq, "$g_mt_mode", abm_visit),
      (set_trigger_result, 1),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ]),
  (ti_question_answered, 0, 0, [],
   [(store_trigger_param_1,":answer"),
    (eq,":answer",0),
    (try_begin),
      (eq, "$g_mt_mode", abm_tournament),
      (call_script, "script_end_tournament_fight", 0),
    (else_try),
      (eq, "$g_mt_mode", abm_training),
      (get_player_agent_no, ":player_agent"),
      (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
      #SB : deduct health here
      (call_script, "script_agent_apply_training_health", ":player_agent"),
    (try_end),
    (finish_mission,0),
    ]),

  (1, 0, ti_once, [], [
      (eq, "$g_mt_mode", abm_visit),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (store_current_scene, reg(1)),
      (scene_set_slot, reg(1), slot_scene_visited, 1),
      (mission_enable_talk),
      (get_player_agent_no, ":player_agent"),
      (assign, ":team_set", 0),
      (try_for_agents, ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (is_between, ":troop_id", regular_troops_begin, regular_troops_end),
        (eq, ":team_set", 0),
        (agent_set_team, ":agent_no", 1),
        (assign, ":team_set", 1),
      (try_end),
    ]),
##
##  (0, 0, 0, [],
##   [
##      #refresh hit points for arena visit trainers
##      (eq, "$g_mt_mode", abm_visit),
##      (get_player_agent_no, ":player_agent"),
##      (try_for_agents, ":agent_no"),
##        (neq, ":agent_no", ":player_agent"),
##        (agent_get_troop_id, ":troop_id", ":agent_no"),
##        (is_between, ":troop_id", regular_troops_begin, regular_troops_end),
##        (agent_set_hit_points, ":agent_no", 100),
##      (try_end),
##    ]),

##      (1, 4, ti_once, [(eq, "$g_mt_mode", abm_fight),
##                       (this_or_next|main_hero_fallen),
##                       (num_active_teams_le,1)],
##       [
##           (try_begin),
##             (num_active_teams_le,1),
##             (neg|main_hero_fallen),
##             (assign,"$arena_fight_won",1),
##             #Fight won, decrease odds
##             (assign, ":player_odds_sub", 0),
##             (try_begin),
##               (ge,"$arena_bet_amount",1),
##               (store_div, ":player_odds_sub", "$arena_win_amount", 2),
##             (try_end),
##             (party_get_slot, ":player_odds", "$g_encountered_party", slot_town_player_odds),
##             (val_add, ":player_odds_sub", 5),
##             (val_sub, ":player_odds", ":player_odds_sub"),
##             (val_max, ":player_odds", 250),
##             (party_set_slot, "$g_encountered_party", slot_town_player_odds, ":player_odds"),
##           (else_try),
##             #Fight lost, increase odds
##             (assign, ":player_odds_add", 0),
##             (try_begin),
##               (ge,"$arena_bet_amount",1),
##               (store_div, ":player_odds_add", "$arena_win_amount", 2),
##             (try_end),
##             (party_get_slot, ":player_odds", "$g_encountered_party", slot_town_player_odds),
##             (val_add, ":player_odds_add", 5),
##             (val_add, ":player_odds", ":player_odds_add"),
##             (val_min, ":player_odds", 4000),
##             (party_set_slot, "$g_encountered_party", slot_town_player_odds, ":player_odds"),
##           (try_end),
##           (store_remaining_team_no,"$arena_winner_team"),
##           (assign, "$g_mt_mode", abm_visit),
##           (party_get_slot, ":arena_mission_template", "$current_town", slot_town_arena_template),
##           (set_jump_mission, ":arena_mission_template"),
##           (party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
##           (modify_visitors_at_site, ":arena_scene"),
##           (reset_visitors),
##           (set_visitor, 35, "trp_veteran_fighter"),
##           (set_visitor, 36, "trp_hired_blade"),
##           (set_jump_entry, 50),
##           (jump_to_scene, ":arena_scene"),
##           ]),

# #SB : tournament preferred weapons
  # (ti_on_agent_spawn, 0, ti_once, [
    # (eq, "$g_mt_mode", abm_tournament),
    # (store_trigger_param_1, ":agent_no"),
    # (agent_get_troop_id, ":troop_no", ":agent_no"),
    # (eq, ":troop_no", "trp_player"),
    # (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
    # (this_or_next|ge, reg0, DPLMC_FACTION_STANDING_MEMBER),
    # (party_slot_ge, "$current_town", slot_center_player_relation, 15),
    # ],
    # [
    # (store_trigger_param_1, ":agent_no"),
    # ]),
#even though $disable_npc_complaints should really only apply for companions
 (ti_on_agent_killed_or_wounded, 0, 0, [
        # (ge, "$g_dplmc_ai_changes", DPLMC_AI_CHANGES_LOW),
      (eq, "$g_mt_mode", abm_tournament),
      (eq, "$disable_npc_complaints", 0),
    ],
    [
      (store_trigger_param_1, ":dead_agent_no"),
      (store_trigger_param_2, ":killer_agent_no"),

      # (get_player_agent_no, ":player_agent"),
      # (eq, ":killer_agent_no", ":player_agent"),
      (agent_get_troop_id, ":killer_troop", ":killer_agent_no"),
      (troop_is_hero, ":killer_troop"),

      (agent_is_human, ":dead_agent_no"),
      (agent_get_troop_id, ":wounded_troop", ":dead_agent_no"),
      (troop_is_hero, ":wounded_troop"),
      (is_between, ":wounded_troop", heroes_begin, heroes_end), #exclude common tournament fighters (and the player from being a sore loser)
      (try_begin), #calculate relation loss
        (troop_get_slot, ":lrep", ":wounded_troop", slot_lord_reputation_type),
        (this_or_next|eq, ":lrep", lrep_quarrelsome),
        (troop_slot_eq, ":killer_troop", slot_lord_reputation_type, lrep_quarrelsome),
        (assign, ":relation_loss", -2),
      (else_try),
        (neq, ":lrep", lrep_martial), #martial lords don't mind losing fights
        (neq, ":lrep", lrep_goodnatured), #goodnature ones don't care
        (neq, ":lrep", lrep_none), #don't reduce king/pretender relations
        (this_or_next|eq, ":lrep", lrep_roguish), #only the "bad" companion lrep
        (neg|is_between, ":wounded_troop", companions_begin, companions_end),
        (assign, ":relation_loss", -1),
      (else_try),
        (assign, ":relation_loss", 0),
      (try_end),

      # (agent_get_position, pos1, ":killer_agent_no"),
      # (agent_get_position, pos2, ":dead_agent_no"),
      # (get_distance_between_positions, ":dist", pos1, pos2),
      # (lt, ":dist", 200),
      # (try_begin), #backstabbed
        # (position_is_behind_position, pos1, pos2),
        # (call_script, "script_troop_change_relation_with_troop", "$g_player_troop", ":wounded_troop", -1),
        # # (eq, "$g_player_troop", "trp_player"),
        # # (call_script, "script_change_player_honor", -1),
      # (try_end),
      (try_begin), #friendly fire, it happens
        (eq, ":killer_troop", "trp_player"),
        (agent_is_ally, ":dead_agent_no"),
        (call_script, "script_change_player_relation_with_troop", ":wounded_troop", -3),
      (else_try),
        (call_script, "script_troop_change_relation_with_troop", ":killer_troop", ":wounded_troop", ":relation_loss"),
      (try_end),
      (call_script, "script_change_troop_renown", ":killer_troop", 1), #Static amount
    ]),

  (0, 0, ti_once, [(eq, "$g_mt_mode", abm_tournament),],
   [
     (play_sound, "snd_arena_ambiance", sf_looping),
     (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
     ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_tournament),
                   (this_or_next|main_hero_fallen),
                   (num_active_teams_le, 1)],
   [
       (try_begin),
         (neg|main_hero_fallen),
         (call_script, "script_end_tournament_fight", 1),
         (call_script, "script_play_victorious_sound"),
         (finish_mission),
       (else_try),
         (call_script, "script_end_tournament_fight", 0),
         (finish_mission),
       (try_end),
       ]),

  (ti_battle_window_opened, 0, 0, [], [(eq, "$g_mt_mode", abm_training),(start_presentation, "prsnt_arena_training")]),

  (0, 0, ti_once, [], [(eq, "$g_mt_mode", abm_training),
                       (assign, "$g_arena_training_max_opponents", 40),
                       (assign, "$g_arena_training_num_agents_spawned", 0),
                       (assign, "$g_arena_training_kills", 0),
                       (assign, "$g_arena_training_won", 0),
                       (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
                       ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_training),
                   (store_mission_timer_a, ":cur_time"),
                   (gt, ":cur_time", 3),
                   (assign, ":win_cond", 0),
                   (try_begin),
                     (ge, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),#spawn at most 40 agents
                     (num_active_teams_le, 1),
                     (assign, ":win_cond", 1),
                   (try_end),
                   (this_or_next|eq, ":win_cond", 1),
                   (main_hero_fallen)],
   [
       (get_player_agent_no, ":player_agent"),
       (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
       (assign, "$g_arena_training_won", 0),
       (try_begin),
         (neg|main_hero_fallen),
         (assign, "$g_arena_training_won", 1),#use this for conversation
       (try_end),
       (assign, "$g_mt_mode", abm_visit),
       (set_jump_mission, "mt_arena_melee_fight"),
       (party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
       (modify_visitors_at_site, ":arena_scene"),
       (reset_visitors),
       (set_visitor, 35, "trp_veteran_fighter"),
       (set_visitor, 36, "trp_hired_blade"),
       (set_jump_entry, 50),
       (jump_to_scene, ":arena_scene"),

       #SB : deduct health here
       (call_script, "script_agent_apply_training_health", ":player_agent"),
       ]),


  (0.2, 0, 0,
   [
       (eq, "$g_mt_mode", abm_training),
       (assign, ":num_active_fighters", 0),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (agent_get_team, ":team_no", ":agent_no"),
         (is_between, ":team_no", 0 ,7),
         (val_add, ":num_active_fighters", 1),
       (try_end),
       (lt, ":num_active_fighters", 7),
       (neg|main_hero_fallen),
       (store_mission_timer_a, ":cur_time"),
       (this_or_next|ge, ":cur_time", "$g_arena_training_next_spawn_time"),
       (this_or_next|lt, "$g_arena_training_num_agents_spawned", 6),
       (num_active_teams_le, 1),
       (lt, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),
      ],
    [
       (assign, ":added_troop", "$g_arena_training_num_agents_spawned"),
       (store_div,  ":added_troop", "$g_arena_training_num_agents_spawned", 6),
       (assign, ":added_troop_sequence", "$g_arena_training_num_agents_spawned"),
       (val_mod, ":added_troop_sequence", 6),
       (val_add, ":added_troop", ":added_troop_sequence"),
       (val_min, ":added_troop", 9),
       (val_add, ":added_troop", "trp_arena_training_fighter_1"),
       (assign, ":end_cond", 10000),
       (get_player_agent_no, ":player_agent"),
       (agent_get_position, pos5, ":player_agent"),
       (try_for_range, ":unused", 0, ":end_cond"),
         (store_random_in_range, ":random_entry_point", 32, 40),
         #SB : now we use this to prevent duplicate
         (neq, ":random_entry_point", "$g_player_entry_point"), # make sure we don't overwrite player
         (entry_point_get_position, pos1, ":random_entry_point"),
         (get_distance_between_positions, ":dist", pos5, pos1),
         (gt, ":dist", 1200), #must be at least 12 meters away from the player
         (assign, ":end_cond", 0),
       (try_end),
       (add_visitors_to_current_scene, ":random_entry_point", ":added_troop", 1),
       #SB : set this as last spawnpoint
       (assign, "$g_player_entry_point", ":random_entry_point"),
       (store_add, ":new_spawned_count", "$g_arena_training_num_agents_spawned", 1),
       (store_mission_timer_a, ":cur_time"),
       (store_add, "$g_arena_training_next_spawn_time", ":cur_time", 14),
       (store_div, ":time_reduction", ":new_spawned_count", 3),
       (val_sub, "$g_arena_training_next_spawn_time", ":time_reduction"),
       ]),

  #SB : change interval
  (3, 0, 0,
   [
       (eq, "$g_mt_mode", abm_training),
       ],
    [
       (assign, ":max_teams", 6),
       (val_max, ":max_teams", 1),
       (get_player_agent_no, ":player_agent"),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (agent_slot_eq, ":agent_no", slot_agent_arena_team_set, 0),
         (agent_get_team, ":team_no", ":agent_no"),
         (is_between, ":team_no", 0 ,7),
         (try_begin),
           (eq, ":agent_no", ":player_agent"),
           (agent_set_team, ":agent_no", 6), #player is always team 6.
         (else_try),
           (store_random_in_range, ":selected_team", 0, ":max_teams"),
          # find strongest team
           (try_for_range, ":t", 0, 6),
             (troop_set_slot, "trp_temp_array_a", ":t", 0),
           (try_end),
           (try_for_agents, ":other_agent_no"),
             (agent_is_human, ":other_agent_no"),
             (agent_is_alive, ":other_agent_no"),
             (neq, ":agent_no", ":player_agent"),
             (agent_slot_eq, ":other_agent_no", slot_agent_arena_team_set, 1),
             (agent_get_team, ":other_agent_team", ":other_agent_no"),
             (troop_get_slot, ":count", "trp_temp_array_a", ":other_agent_team"),
             (val_add, ":count", 1),
             (troop_set_slot, "trp_temp_array_a", ":other_agent_team", ":count"),
           (try_end),
           (assign, ":strongest_team", 0),
           (troop_get_slot, ":strongest_team_count", "trp_temp_array_a", 0),
           (try_for_range, ":t", 1, 6),
             (troop_slot_ge, "trp_temp_array_a", ":t", ":strongest_team_count"),
             (troop_get_slot, ":strongest_team_count", "trp_temp_array_a", ":t"),
             (assign, ":strongest_team", ":t"),
           (try_end),
           (store_random_in_range, ":rand", 5, 100),
           (try_begin),
             (lt, ":rand", "$g_arena_training_num_agents_spawned"),
             (assign, ":selected_team", ":strongest_team"),
           (try_end),
           (agent_set_team, ":agent_no", ":selected_team"),
         (try_end),
         (agent_set_slot, ":agent_no", slot_agent_arena_team_set, 1),
         (try_begin),
           (neq, ":agent_no", ":player_agent"),
           (val_add, "$g_arena_training_num_agents_spawned", 1),
         (try_end),
       (try_end),
       ]),
  ] #SB : include horse cull + unarmed_agent_damage?

convert_horse_props_to_living_horses =(0, 0, ti_once, [(mission_tpl_are_all_agents_spawned)],
       [(try_begin),
            (neg|is_edit_mode_enabled),
            (try_for_range, ":horse", all_items_begin, all_items_end),#itp_type_horse
                (item_get_type, ":type", ":horse"),
                (this_or_next|eq, ":horse", "itm_animal_horse"),
                (eq, ":type", itp_type_horse),
		(assign, ":spawn_horse", ":horse"),
			(try_begin),
			(eq, ":horse", "itm_animal_horse"),
			(assign, ":spawn_horse", "itm_bareback_horse_1"),
			(try_end),
                (scene_item_get_num_instances, ":num_instances", ":horse"),
		(gt, ":num_instances", 0),
                (try_for_range, ":number", 0, ":num_instances"),
                    (scene_item_get_instance, ":scene_item", ":horse", ":number"),
                    (prop_instance_get_position, pos53, ":scene_item"),
                    (prop_instance_set_scale, ":scene_item", 0, 0, 0),
                    (set_spawn_position, pos53),
                    (spawn_horse, ":spawn_horse", 0),#saves the reference to the new agent in reg0
                    (agent_get_position, pos1, reg0),
                    (agent_set_scripted_destination, reg0, pos1, 0),
                (try_end),
            (try_end),
        (try_end),
      ])

mission_templates = [
  ("town_default",0,-1,
   "Default town visit",[
    (0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
    (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
    (8,mtef_scene_source,af_override_horse,0,1,[]),
    (9,mtef_scene_source,af_override_horse,0,1,[]),
    (10,mtef_scene_source,af_override_horse,0,1,[]),
    (11,mtef_scene_source,af_override_horse,0,1,[]),
    (12,mtef_scene_source,af_override_horse,0,1,[]),
    (13,mtef_scene_source,0,0,1,[]),
    (14,mtef_scene_source,0,0,1,[]),
    (15,mtef_scene_source,0,0,1,[]),
    (16,mtef_visitor_source,af_override_horse,0,1,[]),
    (17,mtef_visitor_source,af_override_horse,0,1,[]),
    (18,mtef_visitor_source,af_override_horse,0,1,[]),
    (19,mtef_visitor_source,af_override_horse,0,1,[]),
    (20,mtef_visitor_source,af_override_horse,0,1,[]),
    (21,mtef_visitor_source,af_override_horse,0,1,[]),
    (22,mtef_visitor_source,af_override_horse,0,1,[]),
    (23,mtef_visitor_source,af_override_horse,0,1,[]),
    (24,mtef_visitor_source,af_override_horse,0,1,[]),
    (25,mtef_visitor_source,af_override_horse,0,1,[]),
    (26,mtef_visitor_source,af_override_horse,0,1,[]),
    (27,mtef_visitor_source,af_override_horse,0,1,[]),
    (28,mtef_visitor_source,af_override_horse,0,1,[]),
    (29,mtef_visitor_source,af_override_horse,0,1,[]),
    (30,mtef_visitor_source,af_override_horse,0,1,[]),
    (31,mtef_visitor_source,af_override_horse,0,1,[]),

    #dedal begin
    (1,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#32
    (2,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#33
    (3,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#34
    (4,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#35
    (5,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#36
    (6,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#37
    (7,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#38
    (8,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#39
    (10,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#40
   ],vc_weather +[
    dedal_tavern_animations,
    equipment_randomization,
    #rain,
    #dedal end
      (1, 0, ti_once, [],
      [
        (store_current_scene, ":cur_scene"),
        (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_begin),
          (gt, "$sneaked_into_town", disguise_none),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (eq, "$talk_context", tc_tavern_talk),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_tavern),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (call_script, "script_change_banners_and_chest"),
        (call_script, "script_initialize_tavern_variables"),
      ]),

      #SB : minstrels equip instruments
      (ti_on_agent_spawn, 0, 0,
        [
          (eq, "$talk_context", tc_tavern_talk),
          (store_trigger_param_1, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", tavern_minstrels_begin, tavern_minstrels_end),
          (this_or_next|troop_slot_eq, ":troop_no", slot_troop_cur_center, "$current_town"),
          (party_slot_eq, "$current_town", slot_center_tavern_minstrel, ":troop_no"),
        ],
        #this only works for the "true" minstrel, last condition prohibits the one added from alternative_town in module_game_menus
        [
          (store_trigger_param_1, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (assign, ":item_no", -1),

          (store_item_kind_count, ":item_count", "itm_lyre", ":troop_no"),
          (try_begin),
            (this_or_next|gt, ":item_count", 0),
            (troop_has_item_equipped, ":troop_no", "itm_lyre"),
            (assign, ":item_no", "itm_lyre"),
          (else_try),
            (store_item_kind_count, ":item_count", "itm_lute", ":troop_no"),
            (this_or_next|gt, ":item_count", 0),
            (troop_has_item_equipped, ":troop_no", "itm_lute"),
            (assign, ":item_no", "itm_lute"),
          (try_end),
          (neq, ":item_no", -1),
          (agent_equip_item, ":agent_no", ":item_no"), #equip instrument
          (agent_set_wielded_item, ":agent_no", -1), #doff it
        ]),

     #(1, 0, 0,
      #  (eq, "$roadtoattack1", 1),
      #  (set_party_battle_mode),
      #  (try_for_agents, ":cur_agent"),
      #    (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
          #(this_or_next|eq, ":cur_agent_troop", "trp_x"),
          #(this_or_next|eq, ":cur_agent_troop", "trp_xx"),
      #    (eq, ":cur_agent_troop", "trp_visigothic_merchant"),
      #    (agent_set_team, ":cur_agent", 1),
  #        (assign, "$g_main_attacker_agent", ":cur_agent"),
      #    (agent_ai_set_aggressiveness, ":cur_agent", 199),
      #  (try_end),
      #),

      (ti_inventory_key_pressed, 0, 0,
      [ #SB : disable inventory while attacked in taverns
        (try_begin),
          (this_or_next|eq, "$g_main_attacker_agent", 0),
          (neq, "$talk_context", tc_tavern_talk),
          (set_trigger_result, 1),
        (else_try),
          (display_message, "@Dispatch your opponents first!"),
        (try_end),
      ], []),

      #tavern - belligerent drunk leaving/fading out
      (1, 0, 0,
      [
        (gt, "$g_belligerent_drunk_leaving", 0),
        (entry_point_get_position, pos0, 0),
        (agent_get_position, pos1, "$g_belligerent_drunk_leaving"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (le, ":dist", 150),
      ],
      [
        (agent_fade_out, "$g_belligerent_drunk_leaving"),
        (assign, "$g_belligerent_drunk_leaving", 0),
      ]),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (eq, "$g_main_attacker_agent", 0),
	(stop_all_sounds, 1), #madsci
          (set_trigger_result, 1),
        (else_try),
          (display_message, "str_cannot_leave_now"), #SB : message
        (try_end),
      ], []),

	  #tavern brawl triggers - drunk
      (2, 0, 0,
      [
	    (neg|conversation_screen_is_active),

		(eq, "$talk_context", tc_tavern_talk),

		(neg|troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),
		(troop_slot_eq, "trp_belligerent_drunk", slot_troop_cur_center, "$g_encountered_party"),
		(eq, "$drunks_dont_pick_fights", 0),
	  ],
	  [
	    (try_begin),
	      (eq, "$g_start_belligerent_drunk_fight", 0),
	      (assign, "$g_start_belligerent_drunk_fight", 1),

	      (try_for_agents, ":cur_agent"),
	        (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
	        (eq, ":cur_agent_troop", "trp_belligerent_drunk"),
	        (assign, "$g_belligerent_drunk", ":cur_agent"),
	      (try_end),
	    (else_try),
	      (eq, "$g_start_belligerent_drunk_fight", 1),

	      (agent_is_active, "$g_belligerent_drunk"),
	      (agent_is_alive, "$g_belligerent_drunk"),
	      (get_player_agent_no, ":player_agent"),
	      (agent_get_position, pos0, ":player_agent"),
	      (agent_get_position, pos1, "$g_belligerent_drunk"),
	      (get_distance_between_positions, ":dist", pos0, pos1),
	      (position_get_z, ":pos0_z", pos0),
	      (position_get_z, ":pos1_z", pos1),
	      (store_sub, ":z_difference", ":pos1_z", ":pos0_z"),
	      (try_begin),
	        (le, ":z_difference", 0),
	        (val_mul, ":z_difference", -1),
	      (try_end),
	      (store_mul, ":z_difference_mul_3", ":z_difference", 3),
	      (val_add, ":dist", ":z_difference_mul_3"),
	      (store_random_in_range, ":random_value", 0, 200),
	      (store_add, ":400_plus_random_200", 400, ":random_value"),
	      (le, ":dist", ":400_plus_random_200"),

 		  (call_script, "script_activate_tavern_attackers"),
  		  (start_mission_conversation, "trp_belligerent_drunk"),
  		  (assign, "$g_start_belligerent_drunk_fight", 2),
	    (try_end),
	  ]),

	  #tavern brawl triggers - assassin
      (2, 0, 0, [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),
	  ],
	  [
	    (try_begin),
	      (eq, "$g_start_hired_assassin_fight", 0),
	      (assign, "$g_start_hired_assassin_fight", 1),

	      (try_for_agents, ":cur_agent"),
	        (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
	        (eq, ":cur_agent_troop", "trp_hired_assassin"),
	        (assign, "$g_hired_assassin", ":cur_agent"),
	      (try_end),
	    (else_try),
	      (eq, "$g_start_hired_assassin_fight", 1),

	      (agent_is_active, "$g_hired_assassin"),
	      (agent_is_alive, "$g_hired_assassin"),
	      (get_player_agent_no, ":player_agent"),
	      (agent_get_position, pos0, ":player_agent"),
	      (agent_get_position, pos1, "$g_hired_assassin"),
	      (get_distance_between_positions, ":dist", pos0, pos1),
	      (position_get_z, ":pos0_z", pos0),
	      (position_get_z, ":pos1_z", pos1),
	      (store_sub, ":z_difference", ":pos1_z", ":pos0_z"),
	      (try_begin),
	        (le, ":z_difference", 0),
	        (val_mul, ":z_difference", -1),
	      (try_end),
	      (store_mul, ":z_difference_mul_3", ":z_difference", 3),
	      (val_add, ":dist", ":z_difference_mul_3"),
	      (store_random_in_range, ":random_value", 0, 200),
	      (store_add, ":400_plus_random_200", 400, ":random_value"),
	      (le, ":dist", ":400_plus_random_200"),

		  (call_script, "script_activate_tavern_attackers"),
		  (assign, "$g_start_hired_assassin_fight", 2),
		(try_end),
	  ]),

	  #Aftermath talks
      (3, 0, ti_once,
      [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(gt, "$g_main_attacker_agent", 0),

		(this_or_next|neg|agent_is_alive, "$g_main_attacker_agent"),
		(agent_is_wounded, "$g_main_attacker_agent"),
      ],
      [
        (mission_enable_talk),

		(try_for_agents, ":agent"),
		  (agent_is_alive, ":agent"),
		  (agent_get_position, pos4, ":agent"),
		  (agent_set_scripted_destination, ":agent", pos4),
		(try_end),

		(party_get_slot, ":tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
		(start_mission_conversation, ":tavernkeeper"),
	  ]),


	  #Aftermath talks
      (3, 0, ti_once,
      [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(gt, "$g_main_attacker_agent", 0),
		(main_hero_fallen),
      ],
      [
	  (jump_to_menu, "mnu_lost_tavern_duel"),
	  (finish_mission,0)

	  ]),


	  #No shooting in the tavern
      (1, 0, 0,
      [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(gt, "$g_main_attacker_agent", 0),

		(get_player_agent_no, ":player_agent"),
		(agent_is_alive, ":player_agent"),
		## SB : move diplomacy standing check back up here in conditions
		(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
		(lt, reg0, DPLMC_FACTION_STANDING_MEMBER),
		(agent_get_wielded_item, ":wielded_item", ":player_agent", 0),
		(gt, ":wielded_item", 0),
		(item_get_type, ":type", ":wielded_item"),
		(this_or_next|is_between, ":type", itp_type_bow, itp_type_goods),
		(is_between, ":type", itp_type_pistol, itp_type_bullets),
		# (is_between, ":wielded_item", "itm_darts", "itm_torch"),
		# (neq, ":wielded_item", "itm_javelin_melee"),
		# (neq, ":wielded_item", "itm_throwing_spear_melee"),
		# (neq, ":wielded_item", "itm_jarid_melee"),
		# (neq, ":wielded_item", "itm_light_throwing_axes_melee"),
		# (neq, ":wielded_item", "itm_throwing_axes_melee"),
		# (neq, ":wielded_item", "itm_heavy_throwing_axes_melee"),
        #SB : also add these conditions

      ],
      [
		(party_get_slot, ":tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
		# ##diplomacy start+
		# #Turn of this !@#$%ing obnoxious and totally illogical restriction provided:
		# (try_begin),
			# #1) there is an actual fight
			# (gt, "$g_main_attacker_agent", 0),
			# (agent_is_alive, "$g_main_attacker_agent"),
			# (neg|agent_is_wounded, "$g_main_attacker_agent"),
			# #2) the player is the lord of this town, a mercenary captain in the kingdom's employ, or ruler of this kingdom
			# (store_faction_of_party , ":center_faction", "$g_encountered_party"),
			# (this_or_next|eq, ":center_faction", "$players_kingdom"),
				# (eq, ":center_faction", "fac_player_supporters_faction"),
		# (else_try),
		# #Else, original behavior:
			(start_mission_conversation, ":tavernkeeper"),
		# (try_end),
		##diplomacy stop+
	  ]),

      #SB : drunks are totally effective fighters
      (3, 0, 0,
      [
       (eq, "$talk_context", tc_tavern_talk),
       (ge, "$g_start_belligerent_drunk_fight", 1),
       (gt, "$g_main_attacker_agent", 0),
       (agent_is_alive, "$g_main_attacker_agent"),
       # (eq, "$g_belligerent_drunk_leaving", 0), #don't stumble while leaving
       (store_random_in_range, ":random_no", 0, 3),
       (eq, ":random_no", 0),
       ],
      [
      # (store_random_in_range, ":anim", "anim_strike_chest_front_stop", "anim_cheer"),
      (store_random_in_range, ":anim", "anim_strike3_head_left", "anim_fall_face_hold"),
      (agent_set_animation, "$g_main_attacker_agent", ":anim"),
      (store_random_in_range, ":progress", 0, 100),
      (agent_set_animation_progress, "$g_main_attacker_agent", ":progress"),
      ]),
      #Check for weapon in hand of attacker, also, everyone gets out of the way
      (1, 0, 0,
      [
        (gt, "$g_main_attacker_agent", 0),
      ],
      [
        (agent_get_wielded_item, ":wielded_item", "$g_main_attacker_agent", 0),
        (val_max, "$g_attacker_drawn_weapon", ":wielded_item"),

        (call_script, "script_neutral_behavior_in_fight"),
      ]),
convert_horse_props_to_living_horses,
    ] + bodyguard_triggers,
  ),

# This template is used in party encounters and such.
#
  (
    "conversation_encounter",0,-1,
    "Conversation_encounter",
    [( 0,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 1,mtef_visitor_source,af_override_fullhelm,0,1,[]),
     ( 2,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 3,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 4,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 5,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 6,mtef_visitor_source,af_override_fullhelm,0,1,[]),
     ( 7,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 8,mtef_visitor_source,af_override_fullhelm,0,1,[]),( 9,mtef_visitor_source,af_override_fullhelm,0,1,[]),(10,mtef_visitor_source,af_override_fullhelm,0,1,[]),(11,mtef_visitor_source,af_override_fullhelm,0,1,[]),
    #prisoners now...
     (12,mtef_visitor_source,af_override_fullhelm,0,1,[]),(13,mtef_visitor_source,af_override_fullhelm,0,1,[]),(14,mtef_visitor_source,af_override_fullhelm,0,1,[]),(15,mtef_visitor_source,af_override_fullhelm,0,1,[]),(16,mtef_visitor_source,af_override_fullhelm,0,1,[]),
    #Other party
     (17,mtef_visitor_source,af_override_fullhelm,0,1,[]),(18,mtef_visitor_source,af_override_fullhelm,0,1,[]),(19,mtef_visitor_source,af_override_fullhelm,0,1,[]),(20,mtef_visitor_source,af_override_fullhelm,0,1,[]),(21,mtef_visitor_source,af_override_fullhelm,0,1,[]),
     (22,mtef_visitor_source,af_override_fullhelm,0,1,[]),(23,mtef_visitor_source,af_override_fullhelm,0,1,[]),(24,mtef_visitor_source,af_override_fullhelm,0,1,[]),(25,mtef_visitor_source,af_override_fullhelm,0,1,[]),(26,mtef_visitor_source,af_override_fullhelm,0,1,[]),
     (27,mtef_visitor_source,af_override_fullhelm,0,1,[]),(28,mtef_visitor_source,af_override_fullhelm,0,1,[]),(29,mtef_visitor_source,af_override_fullhelm,0,1,[]),(30,mtef_visitor_source,af_override_fullhelm,0,1,[]),(31,mtef_visitor_source,af_override_fullhelm,0,1,[]),
     (35,mtef_visitor_source,af_override_fullhelm,0,1,[]),(36,mtef_visitor_source,af_override_fullhelm,0,1,[]),(37,mtef_visitor_source,af_override_fullhelm,0,1,[]),
     ], vc_seasons +
    [],
    #SB : replace banner in town scenes? script_change_banners_and_chest

  ),

  (
    "conversation_generic",mtf_battle_mode,-1,
    "Conversation_encounter",
    [(0,mtef_visitor_source,0,0,1,[]),
     (1,mtef_visitor_source,0,0,1,[]),
     (2,mtef_visitor_source,0,0,1,[]),
     (3,mtef_visitor_source,0,0,1,[]),
     (4,mtef_visitor_source,0,0,1,[]),
     (5,mtef_visitor_source,0,0,1,[]),
     (6,mtef_visitor_source,0,0,1,[]),
     (7,mtef_visitor_source,0,0,1,[]),
     (8,mtef_visitor_source,0,0,1,[]),
     (9,mtef_visitor_source,0,0,1,[]),
     (10,mtef_visitor_source,0,0,1,[]),
     (11,mtef_visitor_source,0,0,1,[]),
     (12,mtef_visitor_source,0,0,1,[]),
     (13,mtef_visitor_source,0,0,1,[]),
     (14,mtef_visitor_source,0,0,1,[]),
     (15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,0,0,1,[]),
     (17,mtef_visitor_source,0,0,1,[]),
     (18,mtef_visitor_source,0,0,1,[]),
     (19,mtef_visitor_source,0,0,1,[]),
     (20,mtef_visitor_source,0,0,1,[]),
     (21,mtef_visitor_source,0,0,1,[]),
     (22,mtef_visitor_source,0,0,1,[]),
     (23,mtef_visitor_source,0,0,1,[]),
     (24,mtef_visitor_source,0,0,1,[]),
     (25,mtef_visitor_source,0,0,1,[]),
     (26,mtef_visitor_source,0,0,1,[]),
     (27,mtef_visitor_source,0,0,1,[]),
     (28,mtef_visitor_source,0,0,1,[]),
     (29,mtef_visitor_source,0,0,1,[]),
     (30,mtef_visitor_source,0,0,1,[]),
     (31,mtef_visitor_source,0,0,1,[]),
     (32,mtef_visitor_source,0,0,1,[]),
     (33,mtef_visitor_source,0,0,1,[]),
     (34,mtef_visitor_source,0,0,1,[]),
     (35,mtef_visitor_source,0,0,1,[]),
     (36,mtef_visitor_source,0,0,1,[]),
     (37,mtef_visitor_source,0,0,1,[]),
     (38,mtef_visitor_source,0,0,1,[]),
     (39,mtef_visitor_source,0,0,1,[]),
     (40,mtef_visitor_source,0,0,1,[]),
     ], vc_seasons +
    [
    (ti_after_mission_start, 0, 0, [
             ],
    [(mission_enable_talk),]),
    (0, 0, 0,
    [(quest_slot_eq, "qst_aestii_rebel_quest", slot_quest_current_state, 3),
    (neg|conversation_screen_is_active),],
    [(start_mission_conversation, "trp_aestii_rebel_king"),]),

    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 2),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 3),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 4),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 6),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 7),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 8),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 9),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),

    ]),

#----------------------------------------------------------------
#mission templates before this point are hardwired into the game.
#-----------------------------------------------------------------

  (
    "town_center",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),
     (10,mtef_visitor_source,af_override_horse,0,1,[]),
     (11,mtef_visitor_source,af_override_horse,0,1,[]),
     (12,mtef_visitor_source,af_override_horse,0,1,[]),
     (13,mtef_visitor_source,0,0,1,[]),
     (14,mtef_scene_source,0,0,1,[]),
     (15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),
     (17,mtef_visitor_source,af_override_horse,0,1,[]),
     (18,mtef_visitor_source,af_override_horse,0,1,[]),
     (19,mtef_visitor_source,af_override_horse,0,1,[]),
     (20,mtef_visitor_source,af_override_horse,0,1,[]),
     (21,mtef_visitor_source,af_override_horse,0,1,[]),
     (22,mtef_visitor_source,af_override_horse,0,1,[]),
	   (23,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (24,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	   (25,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	   (26,mtef_visitor_source,af_override_horse,0,1,[]), #guard
  	 (27,mtef_visitor_source,af_override_horse,0,1,[]), #guard
  	 (28,mtef_visitor_source,af_override_horse,0,1,[]), #guard
  	 (29,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (30,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (33,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (34,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (35,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (36,mtef_visitor_source,af_override_horse,0,1,[]), #town walker point
  	 (37,mtef_visitor_source,af_override_horse,0,1,[]), #town walker point
  	 (38,mtef_visitor_source,af_override_horse,0,1,[]),
  	 (39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
  	 (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
  	 (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
  	 (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
  	 (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
  	 (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
  	 (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (50,mtef_visitor_source,af_override_horse,0,1,[]), #quest npc
     ], tocan_walkers + vc_weather +
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),

        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (troop_slot_eq, ":troop_no", slot_troop_will_join_prison_break, 1),
		(agent_set_is_alarmed,":agent_no", 1),
		(get_player_agent_no, ":player"),
		(agent_get_team, ":playerteam", ":player"),
		(agent_set_team, ":agent_no", ":playerteam"), #madsci bugfix for a situation where the agent can attack the player
		(agent_set_division, ":agent_no", 8),
		(set_show_messages, 0),
		(team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
		(set_show_messages, 1),
          (agent_ai_set_aggressiveness, ":agent_no", 5),
          (troop_set_slot, ":troop_no", slot_troop_will_join_prison_break, 0),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_mission_participation, mp_prison_break_stand_back),
            (agent_get_position, pos1, ":agent_no"),
            (agent_set_scripted_destination, ":agent_no", pos1),
          (try_end),
        (else_try),
          (call_script, "script_init_town_agent", ":agent_no"),
        (try_end),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (assign, "$g_main_attacker_agent", 0),
      ]),

      (1, 0, ti_once,
      [],
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_end),
        (call_script, "script_init_town_walker_agents"),
        (try_begin),
          (gt, "$sneaked_into_town", disguise_none),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),

      (ti_before_mission_start, 0, 0,
      [],
      [
        (call_script, "script_change_banners_and_chest")
      ]),

      (ti_inventory_key_pressed, 0, 0,
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (set_trigger_result,1),
        (else_try),
          (eq, "$g_mt_mode", tcm_disguised),
          (display_message,"str_cant_use_inventory_disguised"),
        (else_try),
          (display_message, "str_cant_use_inventory_now"),
        (try_end),
      ],
      []),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
	(eq, "$current_town", "p_town_22"),
	(this_or_next|eq, "$jewish_rebellion", 2),
	(eq, "$jewish_rebellion", 3),
	(neg|main_hero_fallen),
	(display_message, "str_cannot_leave_now"),
	(else_try),
	(eq, "$current_town", "p_town_22"),
	(this_or_next|eq, "$jewish_rebellion", 2),
	(eq, "$jewish_rebellion", 3),
	(assign, "$jewish_rebellion", -1),
	(troop_set_slot, "trp_jewish_agitator", slot_troop_occupation, dplmc_slto_dead),
	(display_message, "@The uprising has failed."),
       		(try_begin),
         	(check_quest_active, "qst_jewish_riot"),
         	(call_script, "script_cancel_quest", "qst_jewish_riot"),
       		(try_end),
          (mission_enable_talk),
          (set_trigger_result,1),
	(else_try),
	(eq, "$current_town", "p_town_45"),
	(this_or_next|eq, "$armenian_rebellion", 2),
	(eq, "$armenian_rebellion", 3),
	(neg|main_hero_fallen),
	(display_message, "str_cannot_leave_now"),
	(else_try),
	(eq, "$current_town", "p_town_45"),
	(this_or_next|eq, "$armenian_rebellion", 2),
	(eq, "$armenian_rebellion", 3),
	(assign, "$armenian_rebellion", -1),
	(troop_set_slot, "trp_armenian_agitator", slot_troop_occupation, dplmc_slto_dead),
	(display_message, "@The uprising has failed."),
       		(try_begin),
         	(check_quest_active, "qst_armenian_riot"),
         	(call_script, "script_cancel_quest", "qst_armenian_riot"),
       		(try_end),
          (mission_enable_talk),
          (set_trigger_result,1),
	(else_try),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
          (this_or_next|eq, "$g_mt_mode", tcm_default),
          (eq, "$g_mt_mode", tcm_disguised),
          (mission_enable_talk),
          (set_trigger_result,1),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ],
      []),

      (ti_on_leave_area, 0, 0,
      [
        (try_begin),
          (eq, "$g_defending_against_siege", 0),
          (assign,"$g_leave_town",1),
        (try_end),
      ],
      [
        (try_begin),
          (eq, "$talk_context", tc_escape),
          (call_script, "script_deduct_casualties_from_garrison"),
          (try_for_agents, ":agent"),
            (agent_get_troop_id, ":troop", ":agent"),
            (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
            (try_begin),
              (agent_is_alive, ":agent"),
              (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
            (else_try),
              (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
            (try_end),
          (try_end),
          (jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),
        (try_end),
	(try_begin),
	(eq, "$current_town", "p_town_22"),
	(this_or_next|eq, "$jewish_rebellion", 2),
	(eq, "$jewish_rebellion", 3),
	(assign, "$jewish_rebellion", -1),
	(troop_set_slot, "trp_jewish_agitator", slot_troop_occupation, dplmc_slto_dead),
       		(try_begin),
         	(check_quest_active, "qst_jewish_riot"),
         	(call_script, "script_cancel_quest", "qst_jewish_riot"),
       		(try_end),
	(else_try),
	(eq, "$current_town", "p_town_45"),
	(this_or_next|eq, "$armenian_rebellion", 2),
	(eq, "$armenian_rebellion", 3),
	(assign, "$armenian_rebellion", -1),
	(troop_set_slot, "trp_armenian_agitator", slot_troop_occupation, dplmc_slto_dead),
       		(try_begin),
         	(check_quest_active, "qst_armenian_riot"),
         	(call_script, "script_cancel_quest", "qst_armenian_riot"),
       		(try_end),
	(try_end),

        (mission_enable_talk),
      ]),

     (0, 0, ti_once,
     [],
     [
       (party_slot_eq, "$current_town", slot_party_type, spt_town),
       (call_script, "script_town_init_doors", 0),
       (try_begin),
         (eq, "$town_nighttime", 0),
         (play_sound, "snd_town_ambiance", sf_looping),
       (try_end),
     ]),

	(3, 0, 0,
	[
	  (call_script, "script_tick_town_walkers")
	],
	[]),

    (2, 0, 0,
    [
      (call_script, "script_center_ambiance_sounds")
    ],
    []),

	#JAILBREAK TRIGGERS
	#Civilians get out of the way
    (1, 0, 0,
	[
	  (this_or_next|eq, "$talk_context", tc_prison_break),
      (eq, "$talk_context", tc_escape),
	],
	[
	  #(agent_get_team, ":prisoner_agent", 0),
	  (call_script, "script_neutral_behavior_in_fight"),
	  (mission_disable_talk),
	]),

	#The game begins with the town alerted
    (1, 0, ti_once,
      [
        #If I set this to 1, 0, ti_once, then the prisoner spawns twice
        (eq, "$talk_context", tc_escape),
	  ],
	  [
		(get_player_agent_no, ":player_agent"),
	    (assign, reg6, ":player_agent"),
		(call_script, "script_activate_town_guard"),

		(get_player_agent_no, ":player_agent"),
		(agent_get_position, pos4, ":player_agent"),

		(try_for_range, ":prisoner", active_npcs_begin, heroes_end),
		  (troop_slot_ge, ":prisoner", slot_troop_mission_participation, mp_prison_break_fight),

		  (str_store_troop_name, s4, ":prisoner"),
		  (display_message, "str_s4_joins_prison_break"),

		  (store_current_scene, ":cur_scene"), #this might be a better option?
		  (modify_visitors_at_site, ":cur_scene"),

          #<entry_no>,<troop_id>,<number_of_troops>, <team_no>, <group_no>),
          #team no and group no are used in multiplayer mode only. default team in entry is used in single player mode
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (add_visitors_to_current_scene, 24, ":prisoner", 1, 0, 0),
          (troop_set_slot, ":prisoner", slot_troop_will_join_prison_break, 1),
        (try_end),
	  ]),

   (3, 0, 0,
   [
     (main_hero_fallen, 0),
   ],
   [
     (try_begin),
       (this_or_next|eq, "$talk_context", tc_prison_break),
       (eq, "$talk_context", tc_escape),

       (call_script, "script_deduct_casualties_from_garrison"),
	   (jump_to_menu,"mnu_captivity_start_castle_defeat"),

	   (assign, ":end_cond", heroes_end),
       (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
  	     (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new
  	   (try_end),

	   (mission_enable_talk),
	   (finish_mission, 0),
	 (else_try),
	   (set_trigger_result,1),
	 (try_end),
   ]),

   (3, 0, 0,
   [
     (eq, "$talk_context", tc_escape),
	 (neg|main_hero_fallen,0),
     (store_mission_timer_a, ":time"),
     (ge, ":time", 10),

     (all_enemies_defeated), #1 is default enemy team for in-town battles
   ],
   [
     (call_script, "script_deduct_casualties_from_garrison"),
	 (try_for_agents, ":agent"),
	 (agent_get_troop_id, ":troop", ":agent"),
       (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
       (try_begin),
         (agent_is_alive, ":agent"),
         (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
       (else_try),
         (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
       (try_end),
     (try_end),
     (jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),

     (mission_enable_talk),
     (finish_mission,0)
   ]),

   (ti_on_agent_killed_or_wounded, 0, 0, [],
   [
     (store_trigger_param_1, ":dead_agent_no"),
     (store_trigger_param_2, ":killer_agent_no"),
     #(store_trigger_param_3, ":is_wounded"),

     (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),
     (agent_get_troop_id, ":killer_agent_troop_no", ":killer_agent_no"),

     (try_begin),
       (faction_slot_eq, "$g_encountered_party_faction", slot_faction_prison_guard_troop, ":dead_agent_troop_no"),
       (eq, ":killer_agent_troop_no", "trp_player"),

       #SB : proper string
       (display_message, "@You got keys to the dungeon.", message_alert),
     (else_try), #SB : do this here instead of post-combat
       (troop_is_hero, ":dead_agent_troop_no"),
       (troop_slot_ge, ":dead_agent_troop_no", slot_troop_mission_participation, mp_prison_break_fight),
       (troop_set_slot, ":dead_agent_troop_no", slot_troop_mission_participation, mp_prison_break_caught),
     (try_end),
   ]),

	#madsci spawn more walkers to populate the town
      	(0, 0, ti_once,
      	[
        (eq, "$talk_context", tc_town_talk),
      	],
      	[
	(set_fixed_point_multiplier, 100),
	(assign, ":extra_walkers", 0),
		(try_for_agents, ":agent"),
		(lt, ":extra_walkers", 15),
		(agent_get_troop_id,":troop",":agent"),
		(is_between,":troop", walkers_begin, village_walkers_end),
		(agent_get_position, pos1, ":agent"),
		(position_move_y, pos1, 30),
		(set_spawn_position, pos1),
		(spawn_agent, ":troop"),
		(val_add, ":extra_walkers", 1),
		(try_end),
	]),

      (1, 0, ti_once,
      [
(eq, "$talk_context", tc_town_talk),
(eq, "$current_town", "p_town_22"),
(eq, "$jewish_rebellion", 2),
(neg|conversation_screen_is_active),],
      [
        (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
	(agent_is_human, ":cur_agent"),
        (agent_set_is_alarmed,":cur_agent", 1),
	(agent_ai_set_aggressiveness, ":cur_agent", 10),
	(agent_force_rethink, ":cur_agent"),
        (try_end),
	(assign, "$jewish_rebellion", 3),
      ]),
      (1, 0, ti_once,
      [
(eq, "$talk_context", tc_town_talk),
(eq, "$current_town", "p_town_45"),
(eq, "$armenian_rebellion", 2),
(neg|conversation_screen_is_active),],
      [
        (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
	(agent_is_human, ":cur_agent"),
        (agent_set_is_alarmed,":cur_agent", 1),
	(agent_ai_set_aggressiveness, ":cur_agent", 10),
	(agent_force_rethink, ":cur_agent"),
        (try_end),
	(assign, "$armenian_rebellion", 3),
      ]),
(1, 0, ti_once, [
(eq, "$jewish_rebellion", 3),
(eq, "$current_town", "p_town_22"),
(this_or_next|all_enemies_defeated),
(num_active_teams_le,1),
(neg|conversation_screen_is_active),
],[
(try_begin),
(all_enemies_defeated),
(assign, "$jewish_rebellion", 4),
(call_script, "script_set_player_relation_with_faction", "fac_samaritan_rebels", 10),
       	(try_begin),
        (check_quest_active, "qst_jewish_riot"),
	(call_script, "script_succeed_quest", "qst_jewish_riot"),
	(call_script, "script_finish_quest", "qst_jewish_riot", 100),
	(try_end),
(set_relation, "fac_samaritan_rebels", "$g_encountered_party_faction", -50),
      	(try_for_range, ":troop_2", heroes_begin, heroes_end),
        (troop_slot_eq, ":troop_2", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":led_party_2", ":troop_2", slot_troop_leaded_party),
	(gt, ":led_party_2", 0),
	(party_is_active, ":led_party_2"),
        (party_get_attached_to, ":led_party_2_attached", ":led_party_2"),
	(eq, ":led_party_2_attached", "$current_town"),
	(party_detach, ":led_party_2"),
	(call_script, "script_party_set_ai_state", ":led_party_2",  spai_patrolling_around_center, "$current_town"),
	(try_end),
(call_script, "script_remove_hero_prisoners", "$current_town"),
(party_clear, "$current_town"),
(party_set_slot, "$current_town", slot_center_culture,  "fac_culture_18"),
(party_set_slot, "$current_town", slot_center_religion, slot_religion_judaism),
(faction_set_slot, "fac_samaritan_rebels", slot_faction_state, sfs_active),
(troop_set_note_available, "trp_jewish_agitator", 1),
(call_script, "script_give_center_to_faction", "$current_town", "fac_samaritan_rebels"),
(faction_set_note_available, "fac_samaritan_rebels", 1),
	(try_for_range, ":unused", 0, 40),
	(party_add_template, "$current_town", "pt_samaritan_rebels"),
	(try_end),
(party_add_leader, "$current_town", "trp_jewish_agitator"),
(party_set_slot, "$current_town", slot_town_lord, "trp_jewish_agitator"),
(assign, "$temp", "fac_samaritan_rebels"),
(jump_to_menu, "mnu_uprising_successful"),
(finish_mission, 3),
(else_try),
(assign, "$jewish_rebellion", -1),
(troop_set_slot, "trp_jewish_agitator", slot_troop_occupation, dplmc_slto_dead),
       (try_begin),
         (check_quest_active, "qst_jewish_riot"),
         (call_script, "script_cancel_quest", "qst_jewish_riot"),
       (try_end),
(display_message, "@The uprising has failed."),
(try_end),
]),
(1, 0, ti_once, [
(eq, "$armenian_rebellion", 3),
(eq, "$current_town", "p_town_45"),
(this_or_next|all_enemies_defeated),
(num_active_teams_le,1),
(neg|conversation_screen_is_active),
],[
(try_begin),
(all_enemies_defeated),
(assign, "$armenian_rebellion", 4),
(call_script, "script_set_player_relation_with_faction", "fac_kingdom_31", 10),
       	(try_begin),
        (check_quest_active, "qst_armenian_riot"),
	(call_script, "script_succeed_quest", "qst_armenian_riot"),
	(call_script, "script_finish_quest", "qst_armenian_riot", 100),
	(try_end),
(set_relation, "fac_kingdom_31", "$g_encountered_party_faction", -50),
      	(try_for_range, ":troop_2", heroes_begin, heroes_end),
        (troop_slot_eq, ":troop_2", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":led_party_2", ":troop_2", slot_troop_leaded_party),
	(gt, ":led_party_2", 0),
	(party_is_active, ":led_party_2"),
        (party_get_attached_to, ":led_party_2_attached", ":led_party_2"),
	(eq, ":led_party_2_attached", "$current_town"),
	(party_detach, ":led_party_2"),
	(call_script, "script_party_set_ai_state", ":led_party_2",  spai_patrolling_around_center, "$current_town"),
	(try_end),
(call_script, "script_remove_hero_prisoners", "$current_town"),
(party_clear, "$current_town"),
(party_set_slot, "$current_town", slot_center_religion, slot_religion_christian_miaphysite),
(party_set_slot, "$current_town", slot_center_culture, "fac_culture_17"),
(faction_set_slot, "fac_kingdom_31", slot_faction_state, sfs_active),
(troop_set_note_available, "trp_armenian_agitator", 1),
(troop_set_slot, "trp_kingdom_31_lord", slot_troop_occupation, slto_kingdom_hero),
(troop_set_note_available, "trp_kingdom_31_lord", 1),
(troop_set_slot, "trp_tiridates", slot_troop_occupation, slto_kingdom_hero),
(troop_set_note_available, "trp_tiridates", 1),
(troop_set_slot, "trp_kingdom_31_lady_1", slot_troop_occupation, slto_kingdom_lady),
(troop_set_note_available, "trp_kingdom_31_lady_1", 1),
(troop_set_slot, "trp_kingdom_31_lady_2", slot_troop_occupation, slto_kingdom_lady),
(troop_set_note_available, "trp_kingdom_31_lady_2", 1),
(troop_set_slot, "trp_armenag_artsruni", slot_troop_occupation, slto_kingdom_hero),
(troop_set_note_available, "trp_armenag_artsruni", 1),
(troop_set_slot, "trp_kingdom_31_lady_3", slot_troop_occupation, slto_kingdom_lady),
(troop_set_note_available, "trp_kingdom_31_lady_3", 1),
(troop_set_slot, "trp_kingdom_31_lady_4", slot_troop_occupation, slto_kingdom_lady),
(troop_set_note_available, "trp_kingdom_31_lady_4", 1),
(troop_set_slot, "trp_armenian_lord_1", slot_troop_occupation, slto_kingdom_hero),
(troop_set_note_available, "trp_armenian_lord_1", 1),
(troop_set_slot, "trp_armenian_lord_2", slot_troop_occupation, slto_kingdom_hero),
(troop_set_note_available, "trp_armenian_lord_2", 1),
(call_script, "script_give_center_to_faction", "$current_town", "fac_kingdom_31"),
(faction_set_note_available, "fac_kingdom_31", 1),
	(try_for_range, ":unused", 0, 40),
	(party_add_template, "$current_town", "pt_kingdom_17_reinforcements_a"),
	(try_end),
	(try_begin),
	(troop_get_slot, ":leaded_party", "trp_kingdom_31_lord", slot_troop_leaded_party),
	(this_or_next|le, ":leaded_party", 0),
	(neg|party_is_active, ":leaded_party"),
	(call_script, "script_create_kingdom_hero_party", "trp_kingdom_31_lord", "$current_town"),
	(try_end),
(party_add_members, "$current_town", "trp_armenian_agitator", 1),
(assign, "$temp", "fac_kingdom_31"),
(party_set_slot, "p_castle_54", slot_center_ex_faction,  "fac_kingdom_31"),
(str_store_troop_name_link, s10, "trp_armenian_agitator"),
(str_store_party_name_link, s11, "$current_town"),
(quest_set_slot, "qst_armenian_kingdom_quest_1", slot_quest_expiration_days, 15),
(setup_quest_text, "qst_armenian_kingdom_quest_1"),
(str_store_string, s2, "@Meet {s10} in the palace of {s11} to discuss your next move."),
(call_script, "script_start_quest", "qst_armenian_kingdom_quest_1", "trp_armenian_agitator"),
(jump_to_menu, "mnu_uprising_successful"),
(finish_mission, 3),
(else_try),
(assign, "$armenian_rebellion", -1),
(troop_set_slot, "trp_armenian_agitator", slot_troop_occupation, dplmc_slto_dead),
       (try_begin),
         (check_quest_active, "qst_armenian_riot"),
         (call_script, "script_cancel_quest", "qst_armenian_riot"),
       (try_end),
(display_message, "@The uprising has failed."),
(try_end),
]),
convert_horse_props_to_living_horses,

  ] + bodyguard_triggers,
  ),

  (
    "village_center",0,-1,
    "village center",
    [(0,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),

     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,0,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_visitor_source,0,0,1,[]),(15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,0,1,[]),(28,mtef_visitor_source,af_override_horse,0,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source,af_override_horse,0,1,[]),(41,mtef_visitor_source,af_override_horse,0,1,[]),(42,mtef_visitor_source,af_override_horse,0,1,[]),(43,mtef_visitor_source,af_override_horse,0,1,[]),(44,mtef_visitor_source,af_override_horse,0,1,[]),(45,mtef_visitor_source,af_override_horse,0,1,[]),(46,mtef_visitor_source,af_override_horse,0,1,[]),(47,mtef_visitor_source,af_override_horse,0,1,[]),
     ], tocan_walkers + vc_weather +
    [
      #wind,
      equipment_randomization,

      (1, 0, ti_once, [], [
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
          (call_script, "script_init_town_walker_agents"),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
        ]),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      (ti_inventory_key_pressed, 0, 0, [
      #SB : same conditions, no weapon switching mid-fight
        (try_begin),
          (check_quest_active, "qst_hunt_down_fugitive"),
          (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
          (neg|check_quest_failed, "qst_hunt_down_fugitive"),
          (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
          (display_message, "str_cant_use_inventory_now"),
        (else_try),
          (set_trigger_result,1),
        (try_end),], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_hunt_down_fugitive"),
                                (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                                (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                                (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
                                (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "trp_fugitive"),
                                  (call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_on_leave_area, 0, 0, [
          (try_begin),
            (assign,"$g_leave_town",1),
          (try_end),
          ], []),
      (3, 0, 0, [(call_script, "script_tick_town_walkers")], []),
      (2, 0, 0, [(call_script, "script_center_ambiance_sounds")], []),

      #SB : replace with agent triggers

      # (1, 0, ti_once, [(check_quest_active, "qst_hunt_down_fugitive"),
                       # (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                       # (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                       # (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
                       # (assign, ":not_alive", 0),
                       # (try_begin),
                         # (call_script, "script_cf_troop_agent_is_alive", "trp_fugitive"),
                       # (else_try),
                         # (assign, ":not_alive", 1),
                       # (try_end),
                       # (this_or_next|main_hero_fallen),
                       # (eq, ":not_alive", 1),
                       # ],
       # [(try_begin),
          # (main_hero_fallen),
          # (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          # (call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
          # (finish_mission, 4),
        # (else_try),
          # (call_script, "script_change_player_relation_with_center", "$current_town", -2),
          # (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
        # (try_end),
        # ]),

	#madsci make the fugitive aggressive
      (1,0,ti_once,[
	  (neg|conversation_screen_is_active),
          (check_quest_active, "qst_hunt_down_fugitive"),
          (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
          (neg|check_quest_failed, "qst_hunt_down_fugitive"),
          (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
          (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
          (get_player_agent_no, ":player_agent"),
          (try_for_agents, ":cur_agent"),
            (agent_is_alive,":cur_agent"),
            (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
            (eq, ":cur_agent_troop", "trp_fugitive"),
            (agent_set_is_alarmed, ":cur_agent", 1),
            (agent_ai_set_aggressiveness, ":cur_agent", 10),
            (agent_force_rethink, ":cur_agent"),
            (agent_set_look_target_agent, ":cur_agent", ":player_agent"),
          (try_end),
          ],[]),


   (ti_on_agent_killed_or_wounded, 0, 0, [(check_quest_active, "qst_hunt_down_fugitive"), #not ti_once
                       (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
                       (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),],
   [
    (store_trigger_param_1, ":dead_agent_no"),
    # (store_trigger_param_2, ":killer_agent"),
    (agent_is_human, ":dead_agent_no"),
    (store_trigger_param_3, ":is_wounded"),
    (get_player_agent_no, ":player_agent"),
    (agent_get_troop_id, ":corpse", ":dead_agent_no"),
    (try_begin),
      (this_or_next|eq, ":dead_agent_no", ":player_agent"),
      (main_hero_fallen),#should be same

      (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
      # (call_script, "script_fail_quest", "qst_hunt_down_fugitive"), #do this from menu so we can reuse it
      (finish_mission, 4),
    (else_try),
      (eq, ":corpse", "trp_fugitive"),
      (party_remove_members, "$current_town", "trp_fugitive", 1),
      # (eq, ":killer_agent", ":player_agent"), #bodyguards, villagers also applicable
      (try_begin),
        (eq, ":is_wounded", 0),#killed rather than wounded
        (call_script, "script_change_player_relation_with_center", "$current_town", -2),
      (else_try),
        # (display_message, "@You leave the fugitive to villager's justice.", message_positive),
        (party_force_add_prisoners, "p_main_party", "trp_fugitive", 1),
        (quest_set_slot, "qst_hunt_down_fugitive", slot_quest_current_state, 2), #enter phase 2 of bringing him back
      (try_end),
      (agent_get_wielded_item, ":item", ":dead_agent_no", 0),
      (try_begin),
        (gt, ":item", 0),
        (store_random_in_range, ":imod", imod_plain, imod_fine),
        (troop_add_item, "trp_player", ":item", ":imod"),
        (agent_unequip_item, ":dead_agent_no", ":item"),
      (try_end),
      (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
      (call_script, "script_deactivate_tavern_attackers"),
    (else_try), #villagers?
      (call_script, "script_change_player_relation_with_center", "$current_town", -1),
    (try_end),
   ]),
	convert_horse_props_to_living_horses,
    ] + bodyguard_triggers,
  ),

  (
    "bandits_at_night",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),

     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_scene_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(28,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ], vc_weather +
    [

    equipment_randomization,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (neq, ":troop_no", "trp_player"),
         (agent_set_team, ":agent_no", 1),
         ]),

      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_inventory_not_available,

      (ti_tab_pressed, 0, 0,
       [
         (display_message, "str_cannot_leave_now"),
         ], []),
      (ti_on_leave_area, 0, 0,
       [
         (try_begin),
           (eq, "$g_defending_against_siege", 0),
           (assign,"$g_leave_town",1),
         (try_end),
         ], []),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (call_script, "script_town_init_doors", 0),
        ]),

      (1, 4, ti_once,
       [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1)
         ],
       [
         (try_begin),
           (main_hero_fallen),
           (jump_to_menu, "mnu_town_bandits_failed"),
         (else_try),
           (jump_to_menu, "mnu_town_bandits_succeeded"),
         (try_end),
         (finish_mission),
         ]),
      ] + bodyguard_triggers,
    ),


  (
    "village_training", mtf_arena_fight, -1,
    "village_training",
    [(2,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_staff, itm_practice_boots]),
     (4,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff, itm_practice_boots]),
     ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_train_peasants_against_bandits_training_succeeded", 0),
         (call_script, "script_change_banners_and_chest"),
         ]),

      common_arena_fight_tab_press,

      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         (finish_mission),
         ]),

      common_inventory_not_available,

      (1, 4, ti_once,
       [
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_train_peasants_against_bandits_training_succeeded", 1),
         (try_end),
         (finish_mission),
         ]),
      ],
    ),

  (
    "visit_town_castle",0,-1,
    "You enter the halls of the lord.",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #for doors
     (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),
     (10,mtef_scene_source,af_override_horse,0,1,[]),
     (11,mtef_scene_source,af_override_horse,0,1,[]),
     (12,mtef_visitor_source,af_override_horse,0,1,[]),
     (13,mtef_visitor_source,0,0,1,[]),
     (14,mtef_visitor_source,0,0,1,[]),
     (15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,af_castle_lord,0,1,[]),
     (17,mtef_visitor_source,af_castle_lord,0,1,[]),
     (18,mtef_visitor_source,af_castle_lord,0,1,[]),
     (19,mtef_visitor_source,af_castle_lord,0,1,[]),
     (20,mtef_visitor_source,af_castle_lord,0,1,[]),
     (21,mtef_visitor_source,af_castle_lord,0,1,[]),
     (22,mtef_visitor_source,af_castle_lord,0,1,[]),
     (23,mtef_visitor_source,af_castle_lord,0,1,[]),
     (24,mtef_visitor_source,af_castle_lord,0,1,[]),
     (25,mtef_visitor_source,af_castle_lord,0,1,[]),
     (26,mtef_visitor_source,af_castle_lord,0,1,[]),
     (27,mtef_visitor_source,af_castle_lord,0,1,[]),
     (28,mtef_visitor_source,af_castle_lord,0,1,[]),
     (29,mtef_visitor_source,af_castle_lord,0,1,[]),
     (30,mtef_visitor_source,af_castle_lord,0,1,[]),
     (31,mtef_visitor_source,af_castle_lord,0,1,[]),
     # (16,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons|af_override_head,0,1,[]), #SB : replacement
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (call_script, "script_change_banners_and_chest"),
      ]),

      (ti_inventory_key_pressed, 0, 0,
      [
        (set_trigger_result,1)
      ], []),

	  #adjust for prison break
      (ti_tab_pressed, 0, 0,
	  [
	    (neq, "$talk_context", tc_prison_break),
	    (set_trigger_result,1)
	  ], []),

      (ti_on_leave_area, 0, 0,
      [
 	    (eq, "$talk_context", tc_prison_break),
 	  ],
	  [
	    (display_message, "str_leaving_area_during_prison_break"),
	    (set_jump_mission, "mt_sneak_caught_fight"),
	  ]),

      (ti_after_mission_start, 0, ti_once, [], [
        (assign, ":no_fade", 0),
        (try_begin), #SB : reposition player agent if ruling at court
          (eq, "$g_player_court", "$current_town"),
          (eq, "$talk_context", tc_court_talk),
          (this_or_next|party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party"),
          (party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party_2"),
          (get_player_agent_no, ":agent_no"),
          (entry_point_get_position, pos1, 16),
          (agent_is_active, ":agent_no"),
          (agent_set_position, ":agent_no", pos1),
          # (entry_point_get_position, pos2, 0),
          # (agent_set_look_target_position, pos2, ":agent_no"),
          # (agent_set_position, ":agent_no", pos1),
        (else_try),
          (eq, "$talk_context", tc_court_talk),
          # (this_or_next|party_slot_eq, "$current_town", slot_town_lord, stl_unassigned),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (troop_get_slot, ":employee", dplmc_employees_end, dplmc_slot_troop_affiliated),
          (neq, ":employee", 0),
          (assign, "$g_talk_agent", -1),
          (assign, "$g_main_attacker_agent", -1),
          (troop_is_hero, ":employee"),
          (call_script, "script_dplmc_get_court_guard_troop", "$current_town"),
          (assign, ":guard_troop", reg0),
          (try_for_agents, ":agent_no"),
            # (eq, "$g_talk_agent", -1),
            (agent_is_active, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (try_begin),
              (eq, ":troop_no", ":employee"),
              (assign, "$g_talk_agent", ":agent_no"),
            (else_try), #guard troop
              (eq, ":troop_no", ":guard_troop"),
              (assign, "$g_main_attacker_agent", ":agent_no"),
            (try_end),
          (try_end),
          (neq, "$g_talk_agent", -1),
          (try_begin),
            (neq, "$g_main_attacker_agent", -1),
            (agent_get_position, pos1, "$g_main_attacker_agent"),
            (agent_set_visibility, "$g_main_attacker_agent", 0),
            (agent_fade_out, "$g_main_attacker_agent"),
            (agent_set_position, "$g_talk_agent", pos1),
          (try_end),
          # (get_player_agent_no, ":player_agent"),
          # (agent_get_position, pos1, ":player_agent"),
          # (agent_set_scripted_destination, "$g_talk_agent", pos1),
          # (try_begin),
            # (set_fixed_point_multiplier, 1000),
            # (scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
            # (ge, ":player_chest", 0),
            # (prop_instance_get_position, pos1, ":player_chest"),
            # (position_move_z, pos1, 500),
            # (position_rotate_y, pos1, 180),
            # (agent_set_position, ":player_agent", pos1),
            # (agent_set_look_target_agent, ":player_agent", "$g_talk_agent"),
          # (try_end),
          (start_mission_conversation, ":employee"),
          (assign, ":no_fade", 1),
          # (entry_point_get_position, pos2, 0),
          # (agent_set_look_target_position, pos2, ":agent_no"),
          # (agent_set_position, ":agent_no", pos1),
        (try_end),

        (try_begin),
          (eq, ":no_fade", 0),
          (try_begin),
            (eq, "$talk_context", tc_court_talk),
            (try_begin),
              (store_faction_of_party, ":center_faction", "$current_town"),
              (faction_slot_eq, ":center_faction", slot_faction_ai_state, sfai_feast),
              (faction_slot_eq, ":center_faction", slot_faction_ai_object, "$current_town"),
              (call_script, "script_music_set_situation_with_culture", mtf_sit_feast),
              #(call_script, "script_music_set_situation_with_culture", mtf_sit_lords_hall),
            (try_end),
            (mission_cam_set_screen_color, 0xFF736252), #roughly the colour of the menu bg
            (mission_cam_animate_to_screen_color, 0x00736252, 1500),
          (else_try),
            (eq, ":no_fade", 0),
            (mission_cam_set_screen_color, 0xFF010203), #roughly dungeon moss/lichen colours
            (mission_cam_animate_to_screen_color, 0x00000000, 3000),
            (call_script, "script_music_set_situation_with_culture", 0), #prison
          (try_end),
        (try_end),
        ]),

    #SB : chest presentation
      ## CC
      (1, 0, 5, [(key_is_down, key_right_mouse_button),
        (scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        (prop_instance_get_position, pos1, ":player_chest"),
        (get_player_agent_no, ":player_agent"),
        (agent_is_active, ":player_agent"),
        (agent_get_position, pos2, ":player_agent"),
        (get_distance_between_positions, ":dist", pos1, pos2),
        (lt, ":dist", 250),],
        [

        (tutorial_message, -1),
        (call_script, "script_get_chest_troop", "$current_town"),
        (assign, "$pool_troop", reg0),
        (start_presentation, "prsnt_deposit_withdraw_money"),
      ]),

      (2, 1.5, 5, [(scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        (prop_instance_get_position, pos1, ":player_chest"),
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos2, ":player_agent"),
        (get_distance_between_positions, ":dist", pos1, pos2),
        (lt, ":dist", 300),
        # (position_has_line_of_sight_to_position, pos2, pos1),
        (neg|position_is_behind_position, pos1, pos2),
        (neg|is_presentation_active, "prsnt_deposit_withdraw_money"),
        (neg|conversation_screen_is_active),
        ],
        [
        (tutorial_message_set_size, 17, 17),
        (tutorial_message_set_position, 500, 500),
        (tutorial_message_set_center_justify, 1),
        (tutorial_message_set_background, 1),
        (tutorial_message, "str_chest_info"),
      ]),

      (2, 0, 5, [(scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        # (try_begin),
          # (neq, "$g_talk_agent", -1),
          # (get_player_agent_no, ":player_agent"),
          # (agent_get_position, pos1, ":player_agent"),
          # (agent_set_scripted_destination, "$g_talk_agent", pos1),
        # (try_end),
        (this_or_next|conversation_screen_is_active),
        (is_presentation_active, "prsnt_deposit_withdraw_money"),
        #TODO disable opening chest (it crashes)
        ],
        [
        # (tutorial_message_set_size, 17, 17),
        # (tutorial_message_set_position, 500, 500),
        # (tutorial_message_set_center_justify, 1),
        # (tutorial_message_set_background, 1),
        (tutorial_message, -1),
        (clear_omitted_keys),
        # (omit_key_once, key_f), #probably prevents accidental chest opens
      ]),
    ],
  ),


  (
    "back_alley_kill_local_merchant",mtf_battle_mode,-1,
    "You enter the back alley",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ], vc_weather +
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         ]),

      (0, 0, ti_once, [
          (store_mission_timer_a,":cur_time"),
          (ge,":cur_time",1),
          (assign, ":merchant_hp", 0),
          (assign, ":player_hp", 0),
          (assign, ":merchant_hp", 0),
          (assign, ":merchant_agent", -1),
          (assign, ":player_agent", -1),
          (try_for_agents, ":agent_no"),
            (agent_get_troop_id, ":troop_id", ":agent_no"),
            (try_begin),
              (eq, ":troop_id", "trp_local_merchant"),
              (store_agent_hit_points, ":merchant_hp", ":agent_no"),
              (assign, ":merchant_agent", ":agent_no"),
            (else_try),
              (eq, ":troop_id", "trp_player"),
              (store_agent_hit_points, ":player_hp",":agent_no"),
              (assign, ":player_agent", ":agent_no"),
            (try_end),
          (try_end),
          (ge, ":player_agent", 0),
          (ge, ":merchant_agent", 0),
          (agent_is_alive, ":player_agent"),
          (agent_is_alive, ":merchant_agent"),
          (is_between, ":merchant_hp", 1, 30),
          (gt, ":player_hp", 50),
          (start_mission_conversation, "trp_local_merchant"),
          ], []),

      (1, 4, ti_once, [(assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "trp_local_merchant"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1)],
       [
           (try_begin),
             (main_hero_fallen),
             (call_script, "script_fail_quest", "qst_kill_local_merchant"),
           (else_try),
             (call_script, "script_change_player_relation_with_center", "$current_town", -4),
             (call_script, "script_succeed_quest", "qst_kill_local_merchant"),
           (try_end),
           (finish_mission),
           ]),
    ],
  ),

  (
    "back_alley_revolt",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [(0,mtef_team_0|mtef_use_exact_number,af_override_horse|af_override_weapons|af_override_head,aif_start_alarmed,4,[itm_quarter_staff]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ], vc_weather +
    [
      common_inventory_not_available,

      common_battle_init_banner,

      (ti_tab_pressed, 0, 0, [],
       [(question_box,"str_do_you_want_to_retreat"),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (jump_to_menu, "mnu_collect_taxes_failed"),
        (finish_mission),]),

      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),

      (1, 4, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
             (jump_to_menu, "mnu_collect_taxes_failed"),
           (else_try),
             (jump_to_menu, "mnu_collect_taxes_rebels_killed"),
           (try_end),
           (finish_mission),
           ]),
    ],
  ),

  (
    "lead_charge",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (1,mtef_defenders|mtef_team_0,0,aif_start_alarmed,65,[]),
     (0,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,65,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ], vc_weather +
    [
    small_battle_check,
    (ti_after_mission_start, 0, ti_once, [], [
      (mission_cam_set_screen_color, 0xFF000000),
      (mission_cam_animate_to_screen_color, 0x00000000, 3000),
    ]),

      (ti_on_agent_spawn, 0, 0, [],[
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         (assign, ":initial_courage_score", 5000),

         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 35),
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700

         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"),

         (agent_get_party_id, ":agent_party", ":agent_no"),
         (party_get_morale, ":cur_morale", ":agent_party"),

         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"),

         #average = 5000 + 700 + 1500 = 7200; min : 5700, max : 8700
         #morale effect = min : -2100(party morale is 0), average : 0(party morale is 70), max : 900(party morale is 100)
         #min starting : 3600, max starting  : 9600, average starting : 7200
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"),
        ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],[
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
##          (str_store_troop_name, s6, ":dead_agent_troop_id"),
##          (assign, reg0, ":dead_agent_no"),
##          (assign, reg1, ":killer_agent_no"),
##          (assign, reg2, ":is_wounded"),
##          (agent_get_team, reg3, ":dead_agent_no"),
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),

        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
        (call_script, "script_apply_death_effect_on_courage_scores_vc", ":dead_agent_no", ":killer_agent_no"), #madsci
      ]),

      common_battle_tab_press,
      immersive_troops,

      (ti_question_answered, 0, 0, [],[
        (store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (try_begin),
          (store_mission_timer_a, ":elapsed_time"),
          (gt, ":elapsed_time", 20),
          (str_store_string, s5, "str_retreat"),
          (call_script, "script_simulate_retreat", 10, 20, 1),
        (try_end),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),
      ]),

      (ti_before_mission_start, 0, 0, [],[
        (team_set_relation, 0, 2, 1),
        (team_set_relation, 1, 3, 1),
        (call_script, "script_place_player_banner_near_inventory_bms"),

        (party_clear, "p_routed_enemies"),

        (assign, "$g_latest_order_1", 1),
        (assign, "$g_latest_order_2", 1),
        (assign, "$g_latest_order_3", 1),
        (assign, "$g_latest_order_4", 1),
      ]),


      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_place_player_banner_near_inventory"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           (assign, "$g_defender_reinforcement_limit", 2),
                           ##diplomacy begin
                           (call_script, "script_init_death_cam"),
                           # (assign, "$g_dplmc_charge_when_dead", 0),
                           ##diplomacy end
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [

      #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
      #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
      (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
      (assign, ":total_enemy_soldiers", reg0),

      #decrease number of agents already in battle area to find all number of reinforcement enemies
      (assign, ":enemy_soldiers_in_battle_area", 0),
      (try_for_agents,":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_party_id, ":agent_party", ":cur_agent"),
        (try_begin),
          (neq, ":agent_party", "p_main_party"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":enemy_soldiers_in_battle_area", 1),
        (try_end),
      (try_end),
      (store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

      (try_begin),
        (lt, ":total_enemy_reinforcements", 15),
        (ge, "$defender_reinforcement_stage", 2),
        (eq, "$defender_reinforcement_limit_increased", 0),
        (val_add, "$g_defender_reinforcement_limit", 1),
        (assign, "$defender_reinforcement_limit_increased", 1),
      (try_end),
      #new (25.11.09) ends
      (lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_defenders", 0),
                 (lt,":num_defenders",6)],
           [(add_reinforcements_to_entry,0,45),(assign, "$defender_reinforcement_limit_increased", 0),(val_add,"$defender_reinforcement_stage",1)]),

      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",6)],
           [(add_reinforcements_to_entry,3,45),(val_add,"$attacker_reinforcement_stage",1)]),

      common_battle_check_victory_condition,
      common_battle_victory_display,
      #theoris_decapitation, #decapitation

#madsci
      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
            ]),

      common_battle_inventory,

	#madsci
      (3, 0, 0, [
          (this_or_next|eq, "$battle_phase", BP_Fight),
          (eq, "$battle_phase", 0),
          (mission_tpl_are_all_agents_spawned), #madsci
          (call_script, "script_apply_effect_of_other_people_on_courage_scores_vc"),
              ], []), #calculating and applying effect of people on others courage scores


      (3, 0, 0, [
          (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),
            #(call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
            (call_script, "script_decide_run_away_or_not_vc", ":agent_no", ":mission_time"), #madsci
          (try_end),
              ], []), #controlling courage score and if needed deciding to run away for each agent

#madsci freelancer dont let two AI teams stall forever
 (5, 0, ti_once, [
(this_or_next|eq, "$FormAI_AI_no_defense", 1),
(eq, "$freelancer_state", 1),
(neq, "$g_battle_won", 1),
(store_mission_timer_a, ":time"),
(gt, ":time", 120), #120 should be enough to make the formations face each other at close distance
],
   [
(get_player_agent_no, ":player_agent"),
(agent_get_team, ":player_team", ":player_agent"),
	(try_for_range, ":team", 0, 4),
	(neq, ":team", ":player_team"),
      	(call_script, "script_formation_end", ":team", grc_infantry),  #formations
      	(call_script, "script_formation_end", ":team", grc_archers), #formations
      	(call_script, "script_formation_end", ":team", grc_cavalry), #formations
	(team_give_order, ":team", grc_everyone, mordr_charge),
	(try_end),
   ]),

      common_battle_order_panel,
      common_battle_order_panel_tick,

    ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications + ai_horn,  #SB : horse cull

  ),

  (
    "village_attack_bandits",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     (1,mtef_team_0|mtef_use_exact_number,0,aif_start_alarmed, 7,[]),
     (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
     ], vc_weather +
    [
      common_battle_tab_press,
      #theoris_decapitation, #decapitation
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 10, 20, 1),
        (assign, "$g_battle_result", -1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign, "$g_battle_won", 0),
                           (assign, "$defender_reinforcement_stage", 0),
                           (assign, "$attacker_reinforcement_stage", 0),
                           (try_begin),
                             (eq, "$g_mt_mode", vba_after_training),
                             (add_reinforcements_to_entry, 1, 6),
                           (else_try),
                             (add_reinforcements_to_entry, 1, 29),
                           (try_end),
                           #SB : deathcam
                           (call_script, "script_init_death_cam"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

#      (1, 4,
#      ##diplomacy begin
#      0,
#      ##diplomacy end
#      [(main_hero_fallen)],
#          [
#              ##diplomacy begin
#              (try_begin),
#                (call_script, "script_cf_dplmc_battle_continuation"),
#              (else_try),
#                ##diplomacy end
#                (assign, "$pin_player_fallen", 1),
#                (str_store_string, s5, "str_retreat"),
#                (call_script, "script_simulate_retreat", 10, 20, 1),
#                (assign, "$g_battle_result", -1),
#                (set_mission_result, -1),
#                (call_script, "script_count_mission_casualties_from_agents"),
#                (finish_mission, 0),
#                ##diplomacy begin
#              (try_end),
#              ##diplomacy end
#              ]),

#madsci
      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result, -1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission, 0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
              ]),

      common_battle_inventory,
      common_battle_order_panel,
      common_battle_order_panel_tick,

    ]
    ##diplomacy begin
     + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + enhanced_common_battle_triggers + battle_notifications,   #SB : horse cull
    ##diplomacy end
  ),



  (
    "village_raid",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
      (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,60,[]),
      (3,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
      (1,mtef_attackers|mtef_team_1,0,aif_start_alarmed,60,[]),
      (1,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ], vc_weather +
    [
      common_battle_tab_press,
      immersive_troops,
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 10, 20, 1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           #SB : deathcam
                           (call_script, "script_init_death_cam"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [(lt,"$defender_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_defenders", 0),
                 (lt,":num_defenders",6)],
           [(add_reinforcements_to_entry,0,45),(val_add,"$defender_reinforcement_stage",1)]),
      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",6)],
           [(add_reinforcements_to_entry,3,45),(val_add,"$attacker_reinforcement_stage",1)]),

      #SB : battle continuation
      (1, 60, ti_once,
       [
         (store_mission_timer_a,reg(1)),
         (ge,reg(1),10),
         (all_enemies_defeated, 5),
         ##diplomacy begin
         (this_or_next|eq, "$g_dplmc_battle_continuation", 0),
         (neg|main_hero_fallen),
         ##diplomacy end
         (set_mission_result,1),
         (display_message,"str_msg_battle_won"),
         (assign,"$g_battle_won",1),
         (assign, "$g_battle_result", 1),
         (try_begin),
           (eq, "$g_village_raid_evil", 0),
           (call_script, "script_play_victorious_sound"),
         (else_try),
           (play_track, "track_victorious_evil", 1),
         (try_end),
         ],
       [
         (call_script, "script_count_mission_casualties_from_agents"),
         (finish_mission, 1),
         ]),

      common_battle_victory_display,

#      (1, 4,
#      ##diplomacy begin
#      0,
#      ##diplomacy end
#      [(main_hero_fallen)],
#          [
#              ##diplomacy begin
#              (try_begin),
#                (call_script, "script_cf_dplmc_battle_continuation"),
#              (else_try),
#                ##diplomacy end
#                (assign, "$pin_player_fallen", 1),
#                (str_store_string, s5, "str_retreat"),
#                (call_script, "script_simulate_retreat", 10, 20, 1),
#                (assign, "$g_battle_result", -1),
#                (set_mission_result,-1),
#                (call_script, "script_count_mission_casualties_from_agents"),
#                (finish_mission,0),
#                ##diplomacy begin
#              (try_end),
#              ##diplomacy end
#          ]),

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
          ]),

   #SB : handle nervous man as fugitive quest
   (ti_on_agent_killed_or_wounded, 0, 0, [(check_quest_active, "qst_hunt_down_fugitive"), #not ti_once
                       (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                       (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                       (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
                       (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),],
   [
    (store_trigger_param_1, ":dead_agent_no"),
    # (store_trigger_param_2, ":killer_agent"),
    (agent_is_human, ":dead_agent_no"),
    (store_trigger_param_3, ":is_wounded"),
    # (get_player_agent_no, ":player_agent"),
    (agent_get_troop_id, ":corpse", ":dead_agent_no"),
    (try_begin),
      (eq, ":corpse", "trp_fugitive"),
      # (party_remove_members, "$current_town", "trp_fugitive", 1),
      # (eq, ":killer_agent", ":player_agent"), #bodyguards, villagers also applicable
      (try_begin),
        (eq, ":is_wounded", 1),#wounded, add as prisoner since normally we don't access casualties in this mission template
        # (display_message, "@You leave the fugitive to villager's justice.", message_positive),
        (party_force_add_prisoners, "p_main_party", "trp_fugitive", 1),
        (quest_set_slot, "qst_hunt_down_fugitive", slot_quest_current_state, 2), #enter phase 2 of bringing him back
      (try_end),
      (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
      # (call_script, "script_deactivate_tavern_attackers"),
    # (else_try), #villagers?
      # (call_script, "script_change_player_relation_with_center", "$current_town", -1),
    (try_end),
    ]),

      common_battle_inventory,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      #theoris_decapitation, #decapitation

##      #AI Tiggers
##      (0, 0, ti_once, [
##          (store_mission_timer_a,reg(1)),(ge,reg(1),4),
##          (call_script, "script_select_battle_tactic"),
##          (call_script, "script_battle_tactic_init"),
##          ], []),
##      (1, 0, 0, [
##          (store_mission_timer_a,reg(1)),(ge,reg(1),4),
##          (call_script, "script_battle_tactic_apply"),
##          ], []),
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications, #SB : horse cull
    ##diplomacy end
  ),


  (
    "besiege_inner_battle_castle",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     (0, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (17, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (18, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (19, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (20, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_battle_tab_press,
      immersive_troops,
      #theoris_decapitation, #decapitation
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (assign, "$g_battle_result", -1),
        (set_mission_result,-1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),
        ]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           (call_script, "script_init_death_cam"),
                           # (assign, "$g_dplmc_charge_when_dead", 1),
                           ##diplomacy end
                           (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
                           ]),

      #AI Tiggers
      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          (assign, "$defender_team_2", 2),
          (assign, "$attacker_team_2", 3),
          ], []),

      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

#      (1, 4,
#      ##diplomacy begin
#      0,
#      ##diplomacy end
#      [(main_hero_fallen)],
#          [
#            ##diplomacy begin
#            (try_begin),
#              (call_script, "script_cf_dplmc_battle_continuation"),
#            (else_try),
#              (assign, "$pin_player_fallen", 1),
#              (str_store_string, s5, "str_retreat"),
#              (call_script, "script_simulate_retreat", 5, 20, 0),
#              (assign, "$g_battle_result", -1),
#              (set_mission_result,-1),
#              (call_script, "script_count_mission_casualties_from_agents"),
#              (finish_mission,0),
#            (try_end),
#            ##diplomacy end
#              ]),

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                  #(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
              ]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_battle_inventory,
    ]
    ##diplomacy begin
     + dplmc_battle_mode_triggers + utility_triggers + battle_panel_triggers + freelancer_siege_triggers + enhanced_common_siege_triggers + battle_notifications,
    ##diplomacy end
  ),

  (
    "besiege_inner_battle_town_center",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     (0, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
     (2, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (23, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (24, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (25, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (26, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (27, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (28, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_battle_tab_press,
      immersive_troops,
      #theoris_decapitation, #decapitation
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (assign, "$g_battle_result", -1),
        (set_mission_result,-1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),
        ]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           (call_script, "script_init_death_cam"),
                           # (assign, "$g_dplmc_charge_when_dead", 1),
                           ##diplomacy end
                           (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
                           ]),

      #AI Tiggers
      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          (assign, "$defender_team_2", 2),
          (assign, "$attacker_team_2", 3),
          ], []),

      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

#      (1, 4,
#      ##diplomacy begin
#      0,
#      ##diplomacy end
#      [(main_hero_fallen)],
#          [
#          ##diplomacy begin
#          (try_begin),
#            (call_script, "script_cf_dplmc_battle_continuation"),
#          (else_try),
#            ##diplomacy end
#            (assign, "$pin_player_fallen", 1),
#            (str_store_string, s5, "str_retreat"),
#            (call_script, "script_simulate_retreat", 5, 20, 0),
#            (assign, "$g_battle_result", -1),
#            (set_mission_result,-1),
#            (call_script, "script_count_mission_casualties_from_agents"),
#            (finish_mission,0),
#          ##diplomacy begin
#          (try_end),
#          ##diplomacy end
#              ]),

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (eq, "$g_dplmc_cam_activated", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                  #(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end

              ]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_battle_inventory,
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + freelancer_siege_triggers + enhanced_common_siege_triggers + battle_notifications,
    ##diplomacy end
  ),

  (
    "castle_attack_walls_defenders_sally",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,60,[]),
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     ], vc_weather +
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (call_script, "script_change_banners_and_chest"),
         (call_script, "script_remove_siege_objects"),
         ]),

      common_battle_tab_press,
      immersive_troops,
      #theoris_decapitation, #decapitation
      common_battle_init_banner,

      (ti_on_agent_killed_or_wounded, 0, 0, [], #new
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (assign, reg0, ":dead_agent_no"),
          (assign, reg1, ":killer_agent_no"),
          (assign, reg2, ":is_wounded"),
          (agent_get_team, reg3, ":dead_agent_no"),
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),
       ]),

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           (call_script, "script_init_death_cam"),
                           # (assign, "$g_dplmc_charge_when_dead", 1),
                           ##diplomacy end
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 60, ti_once, [(store_mission_timer_a, reg(1)),
                        (ge, reg(1), 10),
                        (all_enemies_defeated, 2),
                        (neg|main_hero_fallen,0),
                        (set_mission_result,1),
                        (display_message,"str_msg_battle_won"),
                        (assign, "$g_battle_won", 1),
                        (assign, "$g_battle_result", 1),
                        (assign, "$g_siege_sallied_out_once", 1),
                        (assign, "$g_siege_method", 1), #reset siege timer
                        (call_script, "script_play_victorious_sound"),
                        ],
           [(call_script, "script_count_mission_casualties_from_agents"),
            (finish_mission,1)]),

      common_battle_victory_display,

#      (1, 4,
#      ##diplomacy begin
#      0,
#      ##diplomacy end
#      [(main_hero_fallen)],
#          [
#              ##diplomacy begin
#              (try_begin),
#                (call_script, "script_cf_dplmc_battle_continuation"),
#              (else_try),
#                ##diplomacy end
#                (assign, "$pin_player_fallen", 1),
#                (str_store_string, s5, "str_retreat"),
#                (call_script, "script_simulate_retreat", 5, 20, 0),
#                (assign, "$g_battle_result", -1),
#                (set_mission_result, -1),
#                (call_script, "script_count_mission_casualties_from_agents"),
#                (finish_mission,0),
#              ##diplomacy begin
#              (try_end),
#              ##diplomacy end
#]),

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
            (try_begin),
              (eq, "$g_dplmc_battle_continuation", 0),
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
               (agent_is_ally, ":agent"),
               (agent_is_alive, ":agent"),
               (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                 #(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result, -1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_battle_inventory,
    ]
    ##diplomacy begin
     + dplmc_battle_mode_triggers + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + freelancer_siege_triggers + enhanced_common_battle_triggers + battle_notifications,
    ##diplomacy end
  ),

  (
    "castle_attack_walls_belfry",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,39,[]),
     (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

     (40,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (41,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (42,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (43,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (45,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (46,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     (47,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,1,[]),
     ], vc_weather +
    [
      common_battle_mission_start,
      common_battle_tab_press,
      immersive_troops,
      #theoris_decapitation, #decapitation
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,

      (0, 0, ti_once,
       [
         (set_show_messages, 0),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (set_show_messages, 1),
         ], []),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (assign, reg0, ":dead_agent_no"),
          (assign, reg1, ":killer_agent_no"),
          (assign, reg2, ":is_wounded"),
          (agent_get_team, reg3, ":dead_agent_no"),
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),
       ]),

      common_siege_ai_trigger_init_after_2_secs,
      common_siege_defender_reinforcement_check,
      common_siege_defender_reinforcement_archer_reposition,
      common_siege_attacker_reinforcement_check,
      common_siege_attacker_do_not_stall,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_inventory_not_available,
      common_siege_init_ai_and_belfry,
      common_siege_move_belfry,
      common_siege_rotate_belfry,
      common_siege_assign_men_to_belfry,
    ]
    ##diplomacy begin
     + dplmc_battle_mode_triggers + utility_triggers + battle_panel_triggers + freelancer_siege_triggers + enhanced_common_siege_triggers + battle_notifications,
    ##diplomacy end
  ),

  (
    "castle_attack_walls_ladder",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
      (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]), #before 12
      (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
      (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (11,mtef_defenders|mtef_team_0|mtef_infantry_first,af_override_horse,aif_start_alarmed,39,[]), #before 7
      (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

      (40,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]), #before 1, 1/3 defenders, adds up to 60
      (41,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]),
      (42,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]),
      (43,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]),
      (44,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]),
      (45,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]),
      (46,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,3,[]),
     ], vc_weather +
    [
      common_battle_mission_start,
      common_battle_tab_press,
      immersive_troops,
      #theoris_decapitation, #decapitation
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,
      common_siege_ai_trigger_init_after_2_secs,
      common_siege_defender_reinforcement_check,
      common_siege_defender_reinforcement_archer_reposition,
      common_siege_attacker_reinforcement_check,
      common_siege_attacker_do_not_stall,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_inventory_not_available,

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (assign, reg0, ":dead_agent_no"),
          (assign, reg1, ":killer_agent_no"),
          (assign, reg2, ":is_wounded"),
          (agent_get_team, reg3, ":dead_agent_no"),
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),
       ]),

    ]
    ##diplomacy begin
     + dplmc_battle_mode_triggers + utility_triggers + battle_panel_triggers + freelancer_siege_triggers + enhanced_common_siege_triggers + battle_notifications,
    ##diplomacy end
  ),


  (
    "castle_visit",0,-1,
    "Castle visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons|af_override_head,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise), #for doors
     (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(13,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(14,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(15,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(18,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(19,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (20,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(21,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(22,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(23,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (24,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(25,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(26,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(27,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (28,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(29,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(30,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(31,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (32,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(33,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(34,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(35,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (36,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(37,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(38,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(39,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     # Party members
     (40,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (41,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (42,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (43,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (44,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (45,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (46,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     ], vc_weather +
    [
    equipment_randomization,

      (1,8,1,[],#Nero begin: at castle walkers
        [
          (try_for_agents,":agent_no"),
            (agent_is_alive,":agent_no"),
            (agent_is_human,":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),

            (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
            (try_for_range, ":troop_iterator", 0, ":num_stacks"),
                (party_stack_get_troop_id, ":cur_troop_id", "$g_encountered_party", ":troop_iterator"),
                (eq, ":cur_troop_id", ":troop_no"),
                (assign, ":num_stacks", -1),
            (try_end),
            (eq, ":num_stacks", -1),
            (assign, ":continue_walk", 0),
            (store_random_in_range, ":continue_walk", 1, 100),
            (try_begin),
              (le, ":continue_walk", 40),
              (agent_set_stand_animation, ":agent_no", "anim_stand_man"),
              (agent_set_walk_forward_animation, ":agent_no", "anim_walk_forward"),
              (agent_set_animation, ":agent_no", "anim_stand_man"),
              (agent_set_animation_progress, ":agent_no", 10),

              (agent_get_position, pos1, ":agent_no"),
              (store_random_in_range, ":r", 0, 10),
              (try_begin),
                (eq, ":r", 0),
                (assign, ":points", 10),
              (else_try),
                (eq, ":r", 1),
                (assign, ":points", 11),
              (else_try),
                (eq, ":r", 2),
                (assign, ":points", 15),
              (else_try),
                (eq, ":r", 3),
                (assign, ":points", 24),
              (else_try),
                (eq, ":r", 4),
                (assign, ":points", 40),
              (else_try),
                (eq, ":r", 4),
                (assign, ":points", 41),
              (else_try),
                (eq, ":r", 5),
                (assign, ":points", 42),
              (else_try),
                (eq, ":r", 6),
                (assign, ":points", 43),
              (else_try),
                (eq, ":r", 7),
                (assign, ":points", 44),
              (else_try),
                (eq, ":r", 8),
                (assign, ":points", 45),
              (else_try),
                (eq, ":r", 8),
                (assign, ":points", 46),
              (else_try),
                (assign, ":points", 11),
              (try_end),
              (entry_point_get_position, pos2, ":points"),
              (agent_set_speed_limit, ":agent_no", 1),
              (agent_set_scripted_destination, ":agent_no", pos2),
            (try_end),
          (try_end),
     ]),#Nero end

      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (troop_get_slot, ":will_join_prison_break", ":troop_no", slot_troop_will_join_prison_break),
          (eq, ":will_join_prison_break", 1),
		(agent_set_is_alarmed,":agent_no", 1),
		(get_player_agent_no, ":player"),
		(agent_get_team, ":playerteam", ":player"),
		(agent_set_team, ":agent_no", ":playerteam"), #madsci bugfix
		(agent_set_division, ":agent_no", 8),
		(set_show_messages, 0),
		(team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
		(set_show_messages, 1),
          (agent_ai_set_aggressiveness, ":agent_no", 5),
          (troop_set_slot, ":troop_no", slot_troop_will_join_prison_break, 0),

          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_mission_participation, mp_prison_break_stand_back),
            (agent_get_position, pos1, ":agent_no"),
            (agent_set_scripted_destination, ":agent_no", pos1),
          (try_end),
        (else_try), #SB : moved down here to hopefully fix prison break?
          (neq, ":player_agent", ":agent_no"),
          (agent_set_team, ":agent_no", 7),
        (try_end),
      ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),

        (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),
        (agent_get_troop_id, ":killer_agent_troop_no", ":killer_agent_no"),

        (try_begin),
          (faction_slot_eq, "$g_encountered_party_faction", slot_faction_prison_guard_troop, ":dead_agent_troop_no"),

          (eq, ":killer_agent_troop_no", "trp_player"),

          #SB : colorize and redo string
          (display_message, "@You got the keys to the dungeon.", message_alert),
        (try_end),
      ]),

      #JAILBREAK TRIGGERS
      #Civilians get out of the way
      (1, 0, 0,
      [
        (this_or_next|eq, "$talk_context", tc_prison_break),
        (eq, "$talk_context", tc_escape),
      ],
      [
        #(agent_get_team, ":prisoner_agent", 0),
        (call_script, "script_neutral_behavior_in_fight"),
        (mission_disable_talk),
      ]),

      #The game begins with the town alerted
      (1, 0, ti_once,
      [
        #If I set this to 1, 0, ti_once, then the prisoner spawns twice
        (eq, "$talk_context", tc_escape),
      ],
      [
        (get_player_agent_no, ":player_agent"),
        (assign, reg6, ":player_agent"),
        (call_script, "script_activate_town_guard"),

        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos4, ":player_agent"),

        # (try_for_range, ":prisoner", active_npcs_begin, kingdom_ladies_end),
          # (troop_slot_ge, ":prisoner", slot_troop_mission_participation, 1),

      #SB : redo loop
        (party_get_num_prisoner_stacks, ":cap", "$current_town"),
        (try_for_range, ":stack", 0, ":cap"),
          (party_prisoner_stack_get_troop_id, ":prisoner", "$current_town", ":stack"),
          (troop_is_hero, ":prisoner"),
          (troop_slot_ge, ":prisoner", slot_troop_mission_participation, mp_prison_break_fight),
          (str_store_troop_name, s4, ":prisoner"),
          (display_message, "str_s4_joins_prison_break"),

          (store_current_scene, ":cur_scene"), #this might be a better option?
          (modify_visitors_at_site, ":cur_scene"),
          #<entry_no>,<troop_id>,<number_of_troops>, <team_no>, <group_no>),
          #team no and group no are used in multiplayer mode only. default team in entry is used in single player mode
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          # (assign, ":nearest_entry_no", 24),
          (troop_set_slot, ":prisoner", slot_troop_will_join_prison_break, 1), #SB : moved up one
          (add_visitors_to_current_scene, 24, ":prisoner", 1, 0, 0),
        (try_end),
	  ]),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
          (this_or_next|eq, "$g_mt_mode", tcm_default),
          (eq, "$g_mt_mode", tcm_disguised),
          (set_trigger_result, 1),
          (mission_enable_talk),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ],
      []),

      (ti_before_mission_start, 0, 0, [],
      [
        (call_script, "script_change_banners_and_chest"),
        (call_script, "script_remove_siege_objects"),
      ]),

      (3, 0, 0,
      [
        (main_hero_fallen, 0),
      ],
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_prison_break),
          (eq, "$talk_context", tc_escape),

          (call_script, "script_deduct_casualties_from_garrison"),
	      (jump_to_menu,"mnu_captivity_start_castle_defeat"),

	      (assign, ":end_cond", heroes_end),
          (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
  	        (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new
  	      (try_end),

	      (mission_enable_talk),
	      (finish_mission, 0),
	    (else_try),
	      (mission_enable_talk),
	      (finish_mission, 0),
	      (set_trigger_result, 1),
        (try_end),
      ]),

      (3, 0, 0,
      [
        (eq, "$talk_context", tc_escape),
        (neg|main_hero_fallen,0),
        (store_mission_timer_a, ":time"),
        (ge, ":time", 10),
        (all_enemies_defeated), #1 is default enemy team for in-town battles
      ],
      [
        (call_script, "script_deduct_casualties_from_garrison"),
        (try_for_agents, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
          (try_begin),
            (agent_is_alive, ":agent"),
            (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
          (else_try),
            (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
          (try_end),
        (try_end),
        (jump_to_menu, "mnu_sneak_into_town_caught_ran_away"),
        (mission_enable_talk),
        (finish_mission, 0),
      ]),
    ] + bodyguard_triggers,
  ),


  (
    "training_ground_trainer_talk", 0, -1,
    "Training.",
    [
      (0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (2,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (3,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (4,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (5,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (6,mtef_scene_source|mtef_team_0,0,0,1,[]),
    ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (call_script, "script_change_banners_and_chest"),
         ]),
      (ti_inventory_key_pressed, 0, 0,
       [
         (set_trigger_result,1),
         ], []),
      (ti_tab_pressed, 0, 0,
       [
         (set_trigger_result,1),
         ], []),
     (0.0, 1.0, 2.0,
      [(lt, "$trainer_help_message", 2),
        ],
      [(try_begin),
         (eq, "$trainer_help_message", 0),
#         (tutorial_box, "str_trainer_help_1", "@Tutorial"),
       (else_try),
#         (tutorial_box, "str_trainer_help_2", "@Tutorial"),
       (try_end),
       (val_add, "$trainer_help_message", 1),
          ]),

    ],
  ),

  #SB : reuse slots instead of globals, retain health
  (
    "training_ground_trainer_training",mtf_arena_fight,-1,
    "You will fight a match in the arena.",
    [
      (16, mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_shield,itm_practice_sword,itm_practice_boots]),
      (17, mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff,itm_practice_boots]),
      (18, mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_practice_staff,itm_practice_boots]),
      (19, mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_boots]),
      (20, mtef_visitor_source,0,0,1,[]),
    ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_arena_fight_tab_press,

      #SB : player override items
      (ti_on_agent_spawn, 0, ti_once, [
        (troop_slot_ge, "$g_talk_troop", slot_troop_trainer_training_difficulty, 4),
        (store_trigger_param_1,":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (eq, ":troop_no", "$g_player_troop"),
      ],
      [
        (store_trigger_param_1,":agent_no"),
        # #get wpt
        # (store_proficiency_level, ":onehands", "$g_player_troop", wpt_one_handed_weapon),
        # (store_proficiency_level, ":twohands", "$g_player_troop", wpt_two_handed_weapon),
        # (store_proficiency_level, ":polearms", "$g_player_troop", wpt_polearm),

        # (try_begin),
          # (ge, ":onehands", ":twohands"),
          # (ge, ":onehands", ":polearms"),
          # # (agent_equip_item, ":agent_no", "itm_practice_shield"),
          # (assign, ":weapon", "itm_practice_sword"),
        # (else_try),
          # (ge, ":twohands", ":onehands"),
          # (ge, ":twohands", ":polearms"),
          # (assign, ":weapon", "itm_heavy_practice_sword"),
        # (else_try),
          # (ge, ":polearms", ":onehands"),
          # (ge, ":polearms", ":twohands"),
          # (assign, ":weapon", "itm_practice_staff"),
        # (try_end),
        (call_script, "script_get_proficient_melee_training_weapon", "$g_player_troop"),
        (assign, ":weapon", reg0),

        (agent_get_wielded_item, ":item_no", ":agent_no", 0),
        (neq, ":item_no", ":weapon"),
        (agent_unequip_item, ":agent_no", ":item_no"),
        (try_begin),
          (agent_get_wielded_item, ":item_no", ":agent_no", 1),
          (gt, ":item_no", 0),
          (neq, ":weapon", "itm_practice_sword"),
          (agent_unequip_item, ":agent_no", ":item_no"),
        (else_try),
          (eq, ":weapon", "itm_practice_sword"),
          (eq, ":item_no", -1),
          (agent_equip_item, ":agent_no", "itm_practice_shield"),
          (agent_set_wielded_item, ":agent_no", "itm_practice_shield"),
        (try_end),
        (agent_equip_item, ":agent_no",":weapon"),
        (agent_set_wielded_item, ":agent_no", ":weapon"),
      ]),

      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1, ":answer"),
         (eq, ":answer", 0),
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         # (try_begin),
           # (party_get_slot, ":scene", "$g_encountered_party", slot_grounds_melee),
           # (le, ":scene", 0),
           # (assign, ":scene", "$g_training_ground_melee_training_scene"),
         # (try_end),
         (store_current_scene, ":scene"),
         (modify_visitors_at_site, ":scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, ":scene"),
         ]),
      (1, 3, ti_once, [(main_hero_fallen,0)],
       [
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         # (try_begin),
           # (party_get_slot, ":scene", "$g_encountered_party", slot_grounds_melee),
           # (le, ":scene", 0),
           # (assign, ":scene", "$g_training_ground_melee_training_scene"),
         # (try_end),
         (store_current_scene, ":scene"),
         (modify_visitors_at_site, ":scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, ":scene"),

         (store_troop_health, ":hp", "$g_player_troop", 0),
         (troop_get_slot, ":diff", "$g_talk_troop", slot_troop_trainer_training_difficulty),
         (store_sub, ":diff", 9, ":diff"),
         (val_mul, ":hp", ":diff"),
         (val_div, ":hp", 10),
         (troop_set_health, "$g_player_troop", ":hp", 0),
         ]),
      (1, 3, ti_once,
       [
         (store_mission_timer_a, reg1),
         (ge, reg1, 1),
         (num_active_teams_le, 1),
         (neg|main_hero_fallen),
         # (assign, "$training_fight_won", 1),
         (troop_set_slot, "$g_talk_troop", slot_troop_trainer_training_fight_won, 1),
         ],
       [
       #instead of refreshing the scene we just talk on-sight
         (get_player_agent_no, ":agent"),
         # (store_agent_hit_points, ":hp", ":agent", 0),
         # (troop_set_health, "$g_player_troop", ":hp", 0),
         (call_script, "script_agent_apply_training_health", ":agent"),

         (mission_enable_talk),
         (start_mission_conversation, "$g_talk_troop"),
         ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),
    ],
  ),


  (
    "training_ground_training", mtf_arena_fight|mtf_no_blood, -1,
    "Training.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (1,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (2,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (3,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (4,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (8,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (9,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (10,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (11,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (12,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (13,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (14,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (15,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
    ], vc_weather +
    [

        #SB : set spectator randomized cheering
        (ti_on_agent_spawn, 0, 0, [
            (store_trigger_param_1,":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_get_item_slot, ":item_no", ":agent_no", ek_foot),
            (neq, ":item_no", "itm_practice_boots"), #not equipped on spectator troops
            # (agent_get_entry_no, ":entry_no", ":agent_no"),
            # (assign, reg1, ":entry_no"),
            # (str_store_agent_name, s1, ":agent_no"),
            # (display_message, "@{s1} at {reg1}"),
            # (gt, ":entry_no", 4),
          ],
          [
            # (set_fixed_point_multiplier, 100),
            (store_trigger_param_1,":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            # (try_begin),
              # (call_script, "script_cf_gender_toggle", ":troop_no"),
              # (store_random_in_range, ":gender", 0, 2),
              # (troop_set_type, ":troop_no", ":gender"),
            # (try_end),
            (store_random_in_range, ":cheer", 0, 300),
            (try_begin),
              (is_between, ":troop_no", companions_begin, companions_end),
              (call_script, "script_dplmc_npc_morale", ":troop_no", 0),
            (else_try),
              (call_script, "script_game_get_morale_of_troops_from_faction", ":troop_no"),
            (try_end),
            (val_add, ":cheer", reg0),
            (try_begin),
              (ge, ":cheer", 150),
              (store_random_in_range, ":stand_animation", "anim_wedding_guest", "anim_wedding_dad_stairs"),
              (agent_set_stand_animation, ":agent_no", ":stand_animation"),
              (agent_set_animation, ":agent_no", ":stand_animation"),
              (store_random_in_range, ":random_no", 0, 100),
              (agent_set_animation_progress, ":agent_no", ":random_no"),
            (try_end),
            #assign other cheer action when player kills in ctm_melee or hits gourds
        ]),

        #SB : wound troops and heroes
      (ti_on_agent_killed_or_wounded, 0, 0, [
        (eq, "$g_mt_mode", ctm_melee),
        ],
       [
       (store_trigger_param_1, ":agent_no"),
       (store_trigger_param_2, ":killer"),
       (agent_get_troop_id, ":troop_no", ":agent_no"),
       #yes, there's a chance that the highest skill troop is the one getting injured, but w/e
       (party_get_skill_level, ":first_aid", "p_main_party", "skl_first_aid"),
       (val_mul, ":first_aid", 5), #as per skill description
       (val_add, ":first_aid", 100),
       (try_begin),
         (troop_is_hero, ":troop_no"),
         (store_troop_health, ":health", ":troop_no", 1), #this is already deducted
         (val_mul, ":health", ":first_aid"),
         (val_div, ":health", 100),
         (troop_set_health, ":troop_no", ":health", 1),
       (else_try), #regular troops
         # (val_add, ":first_aid", 100),
         (store_random_in_range, ":random_no", 0, ":first_aid"),
         (lt, ":random_no", 25),
         (party_wound_members, "p_main_party", ":troop_no", 1),
       (try_end),

       (try_begin),
         (get_player_agent_no, ":player_agent"),
         (store_trigger_param_2, ":killer"),
         (eq, ":player_agent", ":killer"),
         (call_script, "script_agents_cheer_during_training"),
       (try_end),

       ]),
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_last_destroyed_gourds", 0),
         (call_script, "script_change_banners_and_chest")]),

      common_arena_fight_tab_press,

      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         (assign, "$g_training_ground_training_success_ratio", 0),

         (call_script, "script_troop_set_training_health_from_agent"), #SB : store health
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      common_inventory_not_available,

      (0, 0, ti_once,
       [
         (try_begin),
           (eq, "$g_mt_mode", ctm_ranged),
           (set_fixed_point_multiplier, 100),
           (entry_point_get_position, pos1, 0),
           (init_position, pos2),
           (position_set_y, pos2, "$g_training_ground_ranged_distance"),
           (position_transform_position_to_parent, pos3, pos1, pos2),
           (copy_position, pos1, pos3),
           (assign, ":end_cond", 10),
           (assign, ":shift_value", 0),
           (try_for_range, ":cur_i", 0, ":end_cond"),
             (store_sub, ":cur_instance", ":cur_i", ":shift_value"),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":cur_instance"),
             (copy_position, pos2, pos1),
             (init_position, pos0),
             (store_random_in_range, ":random_no", 0, 360),
             (position_rotate_z, pos2, ":random_no"),
             (store_random_in_range, ":random_no", 50, 600),
             (position_move_x, pos2, ":random_no"),
             (store_random_in_range, ":random_no", 0, 360),
             (position_transform_position_to_local, pos3, pos1, pos2),
             (position_rotate_z, pos0, ":random_no"),
             (position_transform_position_to_parent, pos4, pos0, pos3),
             (position_transform_position_to_parent, pos2, pos1, pos4),
             (position_set_z_to_ground_level, pos2),
             (position_move_z, pos2, 150),
             (assign, ":valid", 1),
             (try_for_range, ":cur_instance_2", 0, 10),
               (eq, ":valid", 1),
               (neq, ":cur_instance", ":cur_instance_2"),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd", ":cur_instance_2"),
               (prop_instance_get_position, pos3, ":target_object_2"),
               (get_distance_between_positions, ":dist", pos2, pos3),
               (lt, ":dist", 100),
               (assign, ":valid", 0),
             (try_end),
             (try_begin),
               (eq, ":valid", 0),
               (val_add, ":end_cond", 1),
               (val_add, ":shift_value", 1),
             (else_try),
               (prop_instance_set_position, ":target_object", pos2),
               (prop_instance_animate_to_position, ":target_object", pos2, 1),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":cur_instance"),
               (position_move_z, pos2, -150), #moving back to ground level
               (prop_instance_set_position, ":target_object_2", pos2),
               (prop_instance_animate_to_position, ":target_object_2", pos2, 1),
             (try_end),
           (try_end),
         (else_try),
           (eq, "$g_mt_mode", ctm_mounted),
           (assign, ":num_gourds", 0),
           #First, placing gourds on the spikes
           (try_for_range, ":cur_i", 0, 100),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":cur_i"),
             (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":cur_i"),
             (ge, ":target_object", 0),
             (ge, ":target_object_2", 0),
             (val_add, ":num_gourds", 1),
             (prop_instance_get_position, pos0, ":target_object_2"),
             (position_move_z, pos0, 150),
             (prop_instance_set_position, ":target_object", pos0),
             (prop_instance_animate_to_position, ":target_object", pos0, 1),
           (try_end),
           (store_sub, ":end_cond", ":num_gourds", "$g_training_ground_training_num_gourds_to_destroy"),
           #Second, removing gourds and their spikes randomly
           (try_for_range, ":cur_i", 0, ":end_cond"),
             (store_random_in_range, ":random_instance", 0, ":num_gourds"),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":random_instance"),
             (prop_instance_get_position, pos0, ":target_object"),
             (position_get_z, ":pos_z", pos0),
             (try_begin),
               (lt, ":pos_z", -50000),
#               (val_add, ":end_cond", 1), #removed already, try again
             (else_try),
               (position_set_z, pos0, -100000),
               (prop_instance_set_position, ":target_object", pos0),
               (prop_instance_animate_to_position, ":target_object", pos0, 1),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":random_instance"),
               (prop_instance_set_position, ":target_object_2", pos0),
               (prop_instance_animate_to_position, ":target_object_2", pos0, 1),
             (try_end),
           (try_end),
         (try_end),
         ],
       []),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_melee),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_training_ground_training_success_ratio", 100),
         (else_try),
           (assign, ":alive_enemies", 0),
           (try_for_agents, ":agent_no"),
             (agent_is_alive, ":agent_no"),
             (agent_is_human, ":agent_no"),
             (agent_get_team, ":team_no", ":agent_no"),
             (eq, ":team_no", 1),
             (val_add, ":alive_enemies", 1),
           (try_end),
           (store_sub, ":dead_enemies", "$g_training_ground_training_num_enemies", ":alive_enemies"),
           (store_mul, "$g_training_ground_training_success_ratio", ":dead_enemies", 100),
           (val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_enemies"),
         (try_end),
         #SB : calculate hero wounded status
         (call_script, "script_troop_set_training_health_from_agent"),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_ranged),
         (get_player_agent_no, ":player_agent"),
         (agent_get_ammo, ":ammo", ":player_agent"),
         (store_mission_timer_a, ":cur_seconds"),
         (this_or_next|main_hero_fallen),
         (this_or_next|eq, ":ammo", 0),
         (gt, ":cur_seconds", 116),
         ],
       [
         (store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 10),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_mounted),
         (get_player_agent_no, ":player_agent"),
         (agent_get_horse, ":player_horse", ":player_agent"),
         (store_mission_timer_a, ":cur_seconds"),
         (this_or_next|lt, ":player_horse", 0),
         (this_or_next|main_hero_fallen),
         (this_or_next|ge, "$scene_num_total_gourds_destroyed", "$g_training_ground_training_num_gourds_to_destroy"),
         (gt, ":cur_seconds", 120),
         ],
       [
         (store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 100),
         (val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_gourds_to_destroy"),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (0, 0, 0,
       [
         (gt, "$g_last_destroyed_gourds", 0),
         (try_begin),
           (eq, "$g_mt_mode", ctm_ranged),
           (entry_point_get_position, pos1, 0),
           (position_move_y, pos1, 100, 0),
           (get_player_agent_no, ":player_agent"),
           (agent_get_position, pos2, ":player_agent"),
           (try_begin),
             (position_is_behind_position, pos2, pos1),
             (val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
           (else_try),
             (display_message, "@You must stay behind the line on the ground! Point is not counted."),
           (try_end),
         (else_try),
           (val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
         (try_end),

         (assign, "$g_last_destroyed_gourds", 0),
         ],
       [(call_script, "script_agents_cheer_during_training"),]),
    ],
  ),

  (
    "sneak_caught_fight",mtf_battle_mode,-1,
    "You must fight your way out!",
    [
     (0,mtef_scene_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (48,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (49,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (50,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (51,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (52,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (53,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (54,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (55,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (56,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (57,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (58,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (59,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (60,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (61,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (62,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (63,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (64,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

     # (0,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     # (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
      [
        (call_script, "script_change_banners_and_chest"),
      ]),

      (ti_after_mission_start, 0, 0, [],
       [
        (assign, ":num_guards", 5),

        (try_begin),
          (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
          (store_current_hours, ":cur_time"),
          (store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),
          (is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"), #SB : fix is_between that was always false
          (assign, ":num_guards", 2),
        (else_try),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),

          (assign, ":num_guards", 4),
        (try_end),

        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (entry_point_get_position, pos0, 7),
        (else_try),
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (entry_point_get_position, pos0, 0),
        (else_try),
          (entry_point_get_position, pos0, 1),
        (try_end),

        (assign, ":last_nearest_entry_distance", -1),
        (assign, ":last_nearest_entry_point", -1),
        (try_for_range, ":guard_no", 0, ":num_guards"),
          (assign, ":smallest_dist", 100000),
          (try_for_range, ":guard_entry_point", 2, 64),
            (neq, ":last_nearest_entry_point", ":guard_entry_point"),
            (entry_point_get_position, pos1, ":guard_entry_point"),
            (get_distance_between_positions, ":dist", pos0, pos1),
            (lt, ":dist", ":smallest_dist"),
            (gt, ":dist", ":last_nearest_entry_distance"),
            (assign, ":smallest_dist", ":dist"),
            (assign, ":nearest_entry_point", ":guard_entry_point"),
          (try_end),

          (store_faction_of_party, ":town_faction","$current_town"),
          (try_begin),
            (this_or_next|eq, ":guard_no", 0),
            (eq, ":guard_no", 2),
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_2_troop),
          (else_try),
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_2_troop),
          (try_end),

	(try_begin),
	(le, ":troop_of_guard", 0),
	(assign, ":troop_of_guard", "trp_manhunter"), #madsci failsafe
	(try_end),

          (assign, ":last_nearest_entry_point", ":nearest_entry_point"),
          (assign, ":last_nearest_entry_distance", ":smallest_dist"),

          (add_visitors_to_current_scene, ":nearest_entry_point", ":troop_of_guard", 1, 0),
        (try_end),
      ]),

      (ti_tab_pressed, 0, 0, [],
       [(question_box,"str_do_you_wish_to_surrender")]),

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),(eq,":answer",0),(jump_to_menu,"mnu_captivity_start_castle_defeat"),(finish_mission,0),]),

      (1, 0, ti_once, [],
       [
         (play_sound,"snd_sneak_town_halt"),
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),

      (0, 3, 0,
       [
          (main_hero_fallen,0),
        ],
       [
         (jump_to_menu,"mnu_captivity_start_castle_defeat"),
         (finish_mission,0),
       ]),

      (1, 0, 0, [],
       [
	    (get_player_agent_no, ":player_agent"),
	    (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),

          (agent_get_position, pos1, ":agent_no"),

          (get_distance_between_positions, ":dist", pos0, pos1),

          (try_begin),
            (le, ":dist", 800),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),
            (agent_set_scripted_destination, ":agent_no", pos0, 0),
          (try_end),
        (try_end),
       ]),

	   (5, 1, ti_once,
	   [
	     (num_active_teams_le,1),
	     (neg|main_hero_fallen),

         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
	   ],
       [
         (assign,"$auto_menu",-1),
         (jump_to_menu,"mnu_sneak_into_town_caught_dispersed_guards"),
         (finish_mission,1),
       ]),

	   (ti_on_leave_area, 0, ti_once, [],
       [(assign,"$auto_menu",-1),(jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),(finish_mission,0)]),

      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),

    ],
  ),

   (
    "ai_training",0,-1,
    "You start training.",
    [
#     (0,0,af_override_horse,aif_start_alarmed,1,[]),
     (0,0,0,aif_start_alarmed,30,[]),
#     (1,mtef_no_leader,0,0|aif_start_alarmed,5,[]),
#     (0,mtef_no_leader,0,0|aif_start_alarmed,0,[]),
#     (3,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,6,[]),
#     (4,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,0,[]),
     ], vc_weather +
    [
#      (ti_before_mission_start, 0, 0, [], [(set_rain, 1,100), (set_fog_distance, 10)]),
      (ti_tab_pressed, 0, 0, [],
       [(finish_mission,0)]),

      common_battle_order_panel,
      common_battle_order_panel_tick,

##      (0, 0, ti_once,
##       [
##         (key_clicked, key_numpad_7),
##        (mission_cam_set_mode,1),
##        (get_player_agent_no, ":player_agent"),
##        (mission_cam_set_target_agent, ":player_agent", 1),
##        (mission_cam_set_animation, "anim_test_cam"),], []),
    ],
  ),
   (
    "camera_test",0,-1,
    "camera Test.",
    [
#     (0,mtef_attackers,0,aif_start_alarmed,5,[]),
     ],
    [
      (1, 0, 0, [(mission_cam_set_mode,1),
          (entry_point_get_position, pos3, 3),
          (mission_cam_set_position, pos3)], []),
#      (ti_before_mission_start, 0, 0, [], [(set_rain, 1,100)]),
      (ti_tab_pressed, 0, 0, [],
       [(finish_mission,0)]),
    ],
  ),

  (
    "arena_melee_fight",mtf_arena_fight,-1,
    "You enter a melee fight in the arena.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_bow,itm_practice_arrows,itm_practice_horse]),
      (1,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_heavy_practice_sword]),
      (2,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_green,itm_heavy_practice_sword,itm_practice_horse]),
      (3,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_practice_lance,itm_practice_shield,itm_practice_horse]),
      (4,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_bow,itm_practice_arrows, itm_practice_dagger]),
      (5,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_red,itm_practice_sword,itm_practice_shield]),
      (6,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_heavy_practice_sword,itm_practice_horse]),
      (7,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_green,itm_practice_lance,itm_practice_shield,itm_practice_horse]),

      (8,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_practice_bow,itm_practice_arrows,itm_practice_dagger]),
      (9,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_lance,itm_practice_shield]),
      (10,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_red,itm_heavy_practice_sword]),
      (11,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_practice_sword,itm_practice_shield,]),
      (12,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_green,itm_practice_bow,itm_practice_arrows]),
      (13,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_practice_lance,itm_practice_shield]),
      (14,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_heavy_practice_sword]),
      (15,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_red,itm_practice_sword,itm_practice_shield]),

      (16,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_practice_bow,itm_practice_arrows,itm_practice_horse]),
      (17,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_green,itm_heavy_practice_sword]),
      (18,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_heavy_practice_sword,itm_practice_horse]),
      (19,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_lance,itm_practice_shield,itm_practice_horse]),
      (20,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_red,itm_practice_bow,itm_practice_arrows,itm_practice_dagger,]),
      (21,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_practice_sword,itm_practice_shield]),
      (22,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_green,itm_heavy_practice_sword,itm_practice_horse]),
      (23,mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_practice_lance,itm_practice_shield,itm_practice_horse]),

      (24,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_bow,itm_practice_arrows,itm_practice_horse]),
      (25,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_red,itm_heavy_practice_sword]),
      (26,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_heavy_practice_sword,itm_practice_horse]),
      (27,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_green,itm_practice_lance,itm_practice_shield,itm_practice_horse]),
      (28,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_practice_bow,itm_practice_arrows,itm_practice_dagger]),
      (29,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_sword,itm_practice_shield]),
      (30,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_red,itm_heavy_practice_sword,itm_practice_horse]),
      (31,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_practice_lance,itm_practice_shield,itm_practice_horse]),
#32
      (32,mtef_visitor_source|mtef_team_1,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_green,itm_heavy_practice_sword]),
      (33,mtef_visitor_source|mtef_team_2,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_practice_staff]),
      (34,mtef_visitor_source|mtef_team_3,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_sword, itm_practice_shield]),
      (35,mtef_visitor_source|mtef_team_4,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_red,itm_practice_staff]),
      (36,mtef_visitor_source|mtef_team_1,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_practice_bow,itm_practice_arrows_10_amount, itm_practice_dagger]), #SB : change this to lower ammo amount
      (37,mtef_visitor_source|mtef_team_2,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_green,itm_practice_sword, itm_practice_shield]),
      (38,mtef_visitor_source|mtef_team_3,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_yellow,itm_heavy_practice_sword]),
      (39,mtef_visitor_source|mtef_team_4,af_override_everything|af_override_foot,aif_start_alarmed,1,[itm_arena_tunic_white,itm_practice_staff]),
#40-49 used for spectators
      (40,mtef_visitor_source,af_override_horse,0,1,[]),
      (41,mtef_visitor_source,af_override_horse,0,1,[]),
	  (42,mtef_visitor_source,af_override_horse,0,1,[]),

      (43,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_white,itm_arena_shield_yellow,itm_practice_axe]),
      (44,mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_arena_tunic_blue,itm_arena_shield_red,itm_practice_axe]),

      (45,mtef_visitor_source,af_override_horse,0,1,[]),
      (46,mtef_visitor_source,af_override_horse,0,1,[]),
      (47,mtef_visitor_source,af_override_horse,0,1,[]),
      (48,mtef_visitor_source,af_override_horse,0,1,[]),
      (49,mtef_visitor_source,af_override_horse,0,1,[]),

      (50, mtef_scene_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (51, mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (52, mtef_scene_source,af_override_horse,0,1,[]),
#not used yet:
     (53, mtef_scene_source,af_override_horse,0,1,[]),
     (54, mtef_scene_source,af_override_horse,0,1,[]),
     (55, mtef_scene_source,af_override_horse,0,1,[]),
  #used for tournament master scene
     (54,mtef_visitor_source,af_override_horse,0,1,[]),
     (55,mtef_visitor_source,af_override_horse,0,1,[]),
     (56,mtef_visitor_source,af_override_horse|af_castle_lord,0,1,[]),
     (57,mtef_visitor_source,af_override_horse,0,1,[]),
     (58,mtef_visitor_source,af_override_horse|af_castle_lord,0,1,[]),
     (59,mtef_visitor_source,af_override_horse,0,1,[]),
     (60,mtef_visitor_source,af_override_horse,0,1,[]),
    ], vc_weather + tournament_triggers
  ),



  (
    "arena_challenge_fight",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [
      (56, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
      (58, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
    ],
    [
      # common_inventory_not_available,
      # (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),
      # (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      # (0, 0, ti_once, [],
       # [
         # (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         # ]),


	# #NOTE -- THIS IS A VESTIGIAL SCRIPT. FOR LORD DUELS, USE THE NEXT SCRIPT DOWN
      # (1, 4, ti_once, [
	  # (this_or_next|main_hero_fallen),
		# (num_active_teams_le,1)],
       # [
           # (try_begin),
             # (main_hero_fallen),
			 # (check_quest_active, "qst_duel_for_lady"),
			 # (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_fail_quest", "qst_duel_for_lady"),
           # (else_try),
			 # (check_quest_active, "qst_duel_for_lady"),
			 # (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_succeed_quest", "qst_duel_for_lady"),
		   # (else_try),
             # (main_hero_fallen),
			 # (check_quest_active, "qst_duel_courtship_rival"),
			 # (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_fail_quest", "qst_duel_courtship_rival"),
           # (else_try),
			 # (check_quest_active, "qst_duel_courtship_rival"),
			 # (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
		   # (else_try),
             # (main_hero_fallen),
			 # (check_quest_active, "qst_duel_avenge_insult"),
			 # (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_fail_quest", "qst_duel_avenge_insult"),
           # (else_try),
			 # (check_quest_active, "qst_duel_avenge_insult"),
			 # (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
		   # (else_try),
             # (main_hero_fallen),
			 # (check_quest_active, "qst_denounce_lord"),
			 # (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_fail_quest", "qst_denounce_lord"),
           # (else_try),
			 # (check_quest_active, "qst_denounce_lord"),
			 # (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             # (call_script, "script_succeed_quest", "qst_denounce_lord"),
		   # (else_try),
			 # (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
		     # (str_store_troop_name, s4, ":target_troop"),
		   # (try_end),
           # (finish_mission),
           # ]),
    ],
  ),

  (
    "duel_with_lord",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [
      (0, mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
      (16, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
      #SB : use these for castle courtyard duels
      (23, mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_arena_sword,itm_heraldic_mail_with_tunic]),
      (24, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_arena_sword,itm_heraldic_mail_with_tunic_b]),

    ], vc_weather +
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest"),
        #SB : remove siege objects if we fight in castles
        (call_script, "script_remove_siege_objects"),
      ]),
      #SB : auto-lose duel if player leaves for some reason
      (ti_on_leave_area, 0, ti_once,
      [],
      [
          (try_for_range, ":quest", "qst_deliver_message_to_prisoner_lord", lady_quests_end),
            (try_begin),
              (eq, ":quest", "qst_deliver_message_to_prisoner_lord"),
              (assign, ":quest", "qst_denounce_lord"),
            (try_end),
            (check_quest_active, ":quest"),
            (quest_slot_eq, ":quest", slot_quest_target_troop, "$g_duel_troop"),
            (call_script, "script_fail_quest", ":quest"),
            (finish_mission),
          (try_end),
      ]),
      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         ]),


      (1, 4, ti_once, [
	  (this_or_next|main_hero_fallen),
		(num_active_teams_le,1)],
       [

          (try_begin),
            (main_hero_fallen),
            (assign, ":state", "script_fail_quest"),
          (else_try),
            (assign, ":state", "script_succeed_quest"),
          (try_end),
          #start at 1 before the duel quests
          (try_for_range, ":quest", "qst_deliver_message_to_prisoner_lord", lady_quests_end),
            (try_begin),
              (eq, ":quest", "qst_deliver_message_to_prisoner_lord"),
              (assign, ":quest", "qst_denounce_lord"),
            (try_end),
            (check_quest_active, ":quest"),
            (quest_slot_eq, ":quest", slot_quest_target_troop, "$g_duel_troop"),
            (call_script, ":state", ":quest"),
          (try_end),
          #SB : replace with loop
          (finish_mission),
           ]),
    ],
  ),




##   (
##    "tutorial",0,-1,
##    "You enter the training ground.",
##    [
##        (1,mtef_leader_only,af_override_horse,0,1,[]), #af_override_weapons
##        (2,mtef_scene_source,af_override_horse,0,1,[]), #af_override_weapons
##     ],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [(question_box,"str_do_you_wish_to_leave_tutorial")]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),
##        (eq,":answer",0),
##        (finish_mission,0),
##        (leave_encounter),
##        (change_screen_return),
##        (troop_remove_item, "trp_player", "itm_tutorial_sword"),
##        (troop_remove_item, "trp_player", "itm_tutorial_axe"),
##        (troop_remove_item, "trp_player", "itm_tutorial_spear"),
##        (troop_remove_item, "trp_player", "itm_tutorial_club"),
##        (troop_remove_item, "trp_player", "itm_tutorial_battle_axe"),
##        (troop_remove_item, "trp_player", "itm_tutorial_arrows"),
##        (troop_remove_item, "trp_player", "itm_tutorial_bolts"),
##        (troop_remove_item, "trp_player", "itm_tutorial_short_bow"),
##        (troop_remove_item, "trp_player", "itm_tutorial_crossbow"),
##        (troop_remove_item, "trp_player", "itm_tutorial_throwing_daggers"),
##
##        (check_quest_active, "qst_destroy_dummies"),
##        (cancel_quest,"qst_destroy_dummies"),
##        ]),
###      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),
##      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
##
##
##      (0, 0, ti_once, [],
##       [
##        (assign, "$tutorial_enter_melee", 0),
##        (assign, "$tutorial_enter_ranged", 0),
##        (assign, "$tutorial_enter_mounted", 0),
##        (assign, "$tutorial_camp_stage", 0),
##        (assign, "$tutorial_quest_taken", 0),
##        (assign, "$tutorial_quest_succeeded", 0),
##        (assign, "$tutorial_num_total_dummies_destroyed", 0),
##        (assign, "$tutorial_melee_chest", 0),
##        (assign, "$tutorial_ranged_chest", 0),
##        (assign, "$tutorial_award_taken", 0),
##
##
##        (entry_point_get_position,2,2),#Trainer
##        (entry_point_get_position,16,16),#Horse
##        (set_spawn_position, 16),
##        (spawn_horse, "itm_tutorial_saddle_horse"),
##
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_sword"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_axe"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_spear"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_club"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_battle_axe"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_arrows"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_bolts"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_short_bow"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_crossbow"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_throwing_daggers"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_sword"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_axe"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_spear"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_club"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_battle_axe"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_arrows"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_bolts"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_short_bow"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_crossbow"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_throwing_daggers"),
##        ]
##       ),
##
##      (1, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,3,3),
##                       (get_distance_between_positions, ":distance_to_area", 1, 3),
##                       (lt, ":distance_to_area", 500),
##                       (eq, "$tutorial_enter_melee", 0),],
##       [(tutorial_box,"str_tutorial_enter_melee", "str_tutorial"), (val_add,"$tutorial_enter_melee", 1)]),
##      (1, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (neg|conversation_screen_is_active),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,4,4),
##                       (get_distance_between_positions, ":distance_to_area", 1, 4),
##                       (lt, ":distance_to_area", 500),
##                       (eq, "$tutorial_enter_ranged", 0),],
##       [(tutorial_box,"str_tutorial_enter_ranged", "str_tutorial"), (val_add,"$tutorial_enter_ranged", 1)]),
##      (1, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (neg|conversation_screen_is_active),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,5,5),
##                       (get_distance_between_positions, ":distance_to_area", 1, 5),
##                       (lt, ":distance_to_area", 500),
##                       (eq, "$tutorial_enter_mounted", 0),],
##       [(tutorial_box,"str_tutorial_enter_mounted", "str_tutorial"), (val_add,"$tutorial_enter_mounted", 1)]),
##
##
##      (2, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (neg|conversation_screen_is_active),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,6,6),
##                       (get_distance_between_positions, ":distance_to_area", 1, 6),
##                       (lt, ":distance_to_area", 300),
##                       (eq, "$tutorial_melee_chest", 0),],
##       [(tutorial_box,"str_tutorial_melee_chest", "str_tutorial"), (val_add,"$tutorial_melee_chest", 1)]),
##      (2, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,7,7),
##                       (get_distance_between_positions, ":distance_to_area", 1, 7),
##                       (lt, ":distance_to_area", 300),
##                       (eq, "$tutorial_ranged_chest", 0),],
##       [(tutorial_box,"str_tutorial_ranged_chest", "str_tutorial"), (val_add,"$tutorial_ranged_chest", 1)]),
##
##      (2, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (eq, "$tutorial_item_equipped", 0),
##                       (try_begin),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_sword"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_axe"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_spear"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_club"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_battle_axe"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_arrows"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_bolts"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_short_bow"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_crossbow"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_throwing_daggers"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (try_end),
##                       (eq, "$tutorial_item_equipped", 1),],
##       [(tutorial_box,"str_tutorial_item_equipped", "str_tutorial")]),
##
##
##
##
###      (2, 0, ti_once, [(get_player_agent_no, ":player_agent"),
###                       (agent_get_position, pos1, ":player_agent"),
###                       (entry_point_get_position,21,21),
###                       (get_distance_between_positions, ":distance_to_area", 1, 21),
###                       (lt, ":distance_to_area", 200),
###                       (eq, "$tutorial_group_of_weapons", 0),],
###       [(tutorial_box,"str_tutorial_group_of_weapons", "str_tutorial"), (val_add,"$tutorial_group_of_weapons", 1)]),
##
##
##
##      (1, 5, ti_once, [(eq,"$tutorial_camp_stage",0),
##                       (neg|conversation_screen_is_active),
##                       (eq,"$tutorial_quest_award_taken",0),
##                       (store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (tutorial_box,"str_tutorial_camp1","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",1),
##                       (neg|conversation_screen_is_active),
##                       (tutorial_box,"str_tutorial_camp2","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",2),
##                       (neg|conversation_screen_is_active),
##                       (tutorial_box,"str_tutorial_camp3","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",3),(eq, "$tutorial_award_taken", 0),
##                       (neg|conversation_screen_is_active),
##                       (tutorial_box,"str_tutorial_camp4","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",2)]),
##
##
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",5),
##                       (neg|conversation_screen_is_active),
##                       (eq,"$tutorial_quest_taken",1),
##                       (tutorial_box,"str_tutorial_camp6","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",6),
##                       (neg|conversation_screen_is_active),
##                       (ge,"$tutorial_num_total_dummies_destroyed",10),
##                       (tutorial_box,"str_tutorial_camp7","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1), (assign,"$tutorial_quest_succeeded",1),]),
##
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",7),
##                       (neg|conversation_screen_is_active),
##                       (eq,"$tutorial_quest_award_taken",1),
##                       (tutorial_box,"str_tutorial_camp8","str_tutorial"),
##                       (troop_add_proficiency_points, "trp_player", 10),
##                       (assign, "$tutorial_last_proficiency_sum", 0),
##                       (try_for_range, ":cur_attribute", 0, num_weapon_proficiencies),
##                         (store_proficiency_level, ":cur_attribute_point", "trp_player", ":cur_attribute"),
##                         (val_add, "$tutorial_last_proficiency_sum", ":cur_attribute_point"),
##                       (try_end),],
##       [(val_add,"$tutorial_camp_stage",1),]),
##
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",8),
##                       (neg|conversation_screen_is_active),
##                       (assign, ":new_proficiency_sum", 0),
##                       (try_for_range, ":cur_attribute", 0, num_weapon_proficiencies),
##                         (store_proficiency_level, ":cur_attribute_point", "trp_player", ":cur_attribute"),
##                         (val_add, ":new_proficiency_sum", ":cur_attribute_point"),
##                       (try_end),
##                       (assign, reg(48), ":new_proficiency_sum"),
##                       (assign, reg(49), "$tutorial_last_proficiency_sum"),
##                       (lt,"$tutorial_last_proficiency_sum",":new_proficiency_sum"),
##                       (tutorial_box,"str_tutorial_camp9","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##
##      (2, 0, 0, [(check_quest_active,"qst_destroy_dummies"),
##                 (le, "$tutorial_num_total_dummies_destroyed", 10),],
##          [
##              (assign, ":progress", "$tutorial_num_total_dummies_destroyed"),
##              (val_mul, ":progress", 10),
##              (set_quest_progression,"qst_destroy_dummies",":progress"),
##              ]
##       ),
##
##    ],
##  ),


  (
    "wedding",0,-1,
    "Wedding",
    [
        (0,mtef_visitor_source,af_override_everything,0,1,[itm_tabard, itm_ankle_boots]),
        (1,mtef_visitor_source,af_override_everything,0,1,[itm_bride_dress, itm_bride_crown, itm_bride_shoes]),
        (2,mtef_visitor_source,af_castle_lord,0,1,[]),
        (3,mtef_visitor_source,af_override_everything,0,1,[itm_courtly_outfit, itm_blue_hose]),
        (4,mtef_visitor_source,af_castle_lord,0,1,[]),
        (5,mtef_visitor_source,af_castle_lord,0,1,[]),
        (6,mtef_visitor_source,af_castle_lord,0,1,[]),
        (7,mtef_visitor_source,af_castle_lord,0,1,[]),
        (8,mtef_visitor_source,af_castle_lord,0,1,[]),
        (9,mtef_visitor_source,af_castle_lord,0,1,[]),
        (10,mtef_visitor_source,af_castle_lord,0,1,[]),
        (11,mtef_visitor_source,af_castle_lord,0,1,[]),
        (12,mtef_visitor_source,af_castle_lord,0,1,[]),
        (13,mtef_visitor_source,af_castle_lord,0,1,[]),
        (14,mtef_visitor_source,af_castle_lord,0,1,[]),
        (15,mtef_visitor_source,af_castle_lord,0,1,[]),
        (16,mtef_visitor_source,af_castle_lord,0,1,[]),
        (17,mtef_visitor_source,af_castle_lord,0,1,[]),
        (18,mtef_visitor_source,af_castle_lord,0,1,[]),
        (19,mtef_visitor_source,af_castle_lord,0,1,[]),
        (20,mtef_visitor_source,af_castle_lord,0,1,[]),
        (21,mtef_visitor_source,af_castle_lord,0,1,[]),
        (22,mtef_visitor_source,af_castle_lord,0,1,[]),
        (23,mtef_visitor_source,af_castle_lord,0,1,[]),
        (24,mtef_visitor_source,af_castle_lord,0,1,[]),
        (25,mtef_visitor_source,af_castle_lord,0,1,[]),
        (26,mtef_visitor_source,af_castle_lord,0,1,[]),
        (27,mtef_visitor_source,af_castle_lord,0,1,[]),
        (28,mtef_visitor_source,af_castle_lord,0,1,[]),
        (29,mtef_visitor_source,af_castle_lord,0,1,[]),
        (30,mtef_visitor_source,af_castle_lord,0,1,[]),
        (31,mtef_visitor_source,af_castle_lord,0,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [
         (show_object_details_overlay, 1),
         (finish_mission,0),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (show_object_details_overlay, 1),
        (finish_mission,0),
        ]),

      (ti_after_mission_start, 0, 0, [],
       [
        (assign, "$g_wedding_state", 0),
        (play_track, "track_wedding", 2),
        (show_object_details_overlay, 0),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (troop_get_type, ":gender", ":troop_no"),
         (set_fixed_point_multiplier, 100),
         (try_begin),
           (eq, ":troop_no", "$g_wedding_bishop_troop"),
         (else_try),
           (eq, ":troop_no", "$g_wedding_bride_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_set_z, pos1, -1000),
           (agent_set_position, ":agent_no", pos1),
         (else_try),
           (eq, ":troop_no", "$g_wedding_brides_dad_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_set_z, pos1, -1000),
           (agent_set_position, ":agent_no", pos1),
         (else_try),
           (eq, ":troop_no", "$g_wedding_groom_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (agent_set_position, ":agent_no", pos1),
           (agent_set_animation, ":agent_no", "anim_wedding_groom_wait"),
         (else_try),
           (try_begin),
             (eq, ":gender", 0), #male
             (store_random_in_range, ":random_no", 0, 3),
             (try_begin),
               (eq, ":random_no", 0),
               (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest_notr"),
               (agent_set_animation, ":agent_no", "anim_wedding_guest_notr"),
             (else_try),
               (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest"),
               (agent_set_animation, ":agent_no", "anim_wedding_guest"),
             (try_end),
           (else_try), #female
             (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest_woman"),
             (agent_set_animation, ":agent_no", "anim_wedding_guest_woman"),
           (try_end),
           (store_random_in_range, ":progress", 0, 100),
           (agent_set_animation_progress, ":agent_no", ":progress"),
         (try_end),
         ]),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (set_fixed_point_multiplier, 100),
         (try_for_agents, ":agent_no"),
           (agent_get_troop_id, ":troop_no", ":agent_no"),
           (try_begin),
             (eq, ":troop_no", "$g_wedding_groom_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_bride_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_brides_dad_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_bishop_troop"),
           (else_try),
             (agent_get_slot, ":cur_animation", ":agent_no", slot_agent_cur_animation),
             (agent_set_animation, ":agent_no", ":cur_animation"),
           (try_end),
         (try_end),
         (try_begin),
           (eq, "$g_wedding_state", 0),
           #SB : head camera, store cur values and force 3rd person
           (try_begin),
             (is_camera_in_first_person),
             (assign, "$g_dplmc_cam_activated", 1),
           (else_try),
             (assign, "$g_dplmc_cam_activated", 0),
           (try_end),
           (set_camera_in_first_person, 0),
           (mission_cam_set_mode, 1, 0, 0),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_rotate_x, pos1, 5),
           (position_set_x, pos1, -500),
           (position_set_y, pos1, 1000),
           (position_set_z, pos1, 600),
           (mission_cam_set_position, pos1),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_rotate_x, pos1, -15),
           (position_set_x, pos1, -500),
           (position_set_y, pos1, 1000),
           (position_set_z, pos1, 600),
           (mission_cam_animate_to_position, pos1, 4000, 0),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 1),
           (ge, ":cur_time", 4),
           (init_position, pos1),
           (position_rotate_z, pos1, 90),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -580),
           (position_set_y, pos1, 700),
           (position_set_z, pos1, 200),
           (mission_cam_set_position, pos1),
           (init_position, pos1),
           (position_rotate_z, pos1, 150),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -580),
           (position_set_y, pos1, 100),
           (position_set_z, pos1, 200),
           (mission_cam_animate_to_position, pos1, 6000, 1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 2),
           (ge, ":cur_time", 9),
           (mission_cam_animate_to_screen_color, 0xFF000000, 1000),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 3),
           (ge, ":cur_time", 10),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_stairs"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_stairs"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -90),
           (position_set_x, pos1, 300),
           (position_set_y, pos1, 950),
           (position_set_z, pos1, 420),
           (mission_cam_set_position, pos1),
           (position_set_x, pos1, 175),
           (position_set_y, pos1, 950),
           (position_set_z, pos1, 320),
           (mission_cam_animate_to_position, pos1, 4000, 0),
           (mission_cam_animate_to_screen_color, 0x00000000, 500),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 4),
           (ge, ":cur_time", 14),
           (init_position, pos1),
           (position_rotate_z, pos1, -60),
           (position_rotate_x, pos1, 10),
           (position_set_x, pos1, -400),
           (position_set_y, pos1, 200),
           (position_set_z, pos1, 115),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 5),
           (ge, ":cur_time", 20),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_walk"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_walk"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -140),
           (position_rotate_x, pos1, -15),
           (position_set_x, pos1, -625),
           (position_set_y, pos1, -530),
           (position_set_z, pos1, 180),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 6),
           (ge, ":cur_time", 22),
           (init_position, pos1),
           (position_rotate_z, pos1, 45),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -260),
           (position_set_y, pos1, 120),
           (position_set_z, pos1, 275),
           (mission_cam_set_position, pos1),
           (position_rotate_z, pos1, 10),
           (mission_cam_animate_to_position, pos1, 2000, 0),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 7),
           (ge, ":cur_time", 24),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_last"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_last"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_groom_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_groom_last"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -45),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -900),
           (position_set_y, pos1, -850),
           (position_set_z, pos1, 230),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 8),
           (ge, ":cur_time", 31),
           (init_position, pos1),
           (position_set_x, pos1, -550),
           (position_set_y, pos1, -625),
           (position_set_z, pos1, 1500),
           (particle_system_burst, "psys_wedding_rose", pos1, 750),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 9),
           (ge, ":cur_time", 33),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_set_x, pos1, -536),
           (position_set_y, pos1, -415),
           (position_set_z, pos1, 135),
           (mission_cam_set_position, pos1),
           (position_rotate_z, pos1, -8),
           (position_set_z, pos1, 350),
           (position_rotate_x, pos1, 35),
           (mission_cam_animate_to_position_and_aperture, pos1, 10, 9000, 1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 10),
           (ge, ":cur_time", 41),
           (mission_cam_set_screen_color, 0xFF000000),
           (mission_cam_animate_to_screen_color, 0xFFFFFFFF, 3000),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 11),
           (ge, ":cur_time", 48),
           #SB : reset camera
           (set_camera_in_first_person, "$g_dplmc_cam_activated"),
           (show_object_details_overlay, 1),
           (finish_mission,0),
         (try_end),
         ], []),
    ],
  ),

  (
    "tutorial_training_ground",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (33,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (34,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (35,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (42,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (62,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (63,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (64,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      ], vc_weather +
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$g_tutorial_training_ground_state", 20),
         (question_box, "str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),

      (ti_battle_window_opened, 0, 0, [],
       [
         (start_presentation, "prsnt_tutorial_show_mouse_movement"),
        ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
         (agent_set_no_death_knock_down_only, ":agent_no", 1),
         (agent_set_invulnerable_shield, ":agent_no", 1),
         (agent_get_position, pos1, ":agent_no"),
         (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, -1),
         (get_player_agent_no, ":player_agent"),
         (try_begin),
           (eq, ":agent_no", ":player_agent"),
           (agent_set_team, ":agent_no", 7),
         (try_end),
         (try_for_range, ":cur_entry_point", 0, 64),
           (entry_point_get_position, pos2, ":cur_entry_point"),
           (get_sq_distance_between_positions, ":dist", pos1, pos2),
           (lt, ":dist", 100), #10 cm
           (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, ":cur_entry_point"),
         (try_end),
         (agent_get_troop_id, ":cur_agent_troop", ":agent_no"),
         (try_begin),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (agent_get_position, pos1, ":agent_no"),
           (agent_set_scripted_destination, ":agent_no", pos1),
           (scene_prop_get_num_instances, ":num_instances", "spr_archery_target_with_hit_a"),
           (assign, ":shortest_dist", 10000000),
           (assign, ":best_instance", -1),
           (try_for_range, ":cur_instance", 0, ":num_instances"),
             (scene_prop_get_instance, ":spr_instance", "spr_archery_target_with_hit_a", ":cur_instance"),
             (prop_instance_get_position, pos2, ":spr_instance"),
             (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
             (lt, ":cur_dist", ":shortest_dist"),
             (assign, ":shortest_dist", ":cur_dist"),
             (assign, ":best_instance", ":spr_instance"),
           (try_end),
           (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, ":best_instance"),
         (else_try),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
           (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
           (agent_set_slot, ":agent_no", slot_agent_target_entry_point, 48),
           (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, -1),
           (entry_point_get_position, pos1, 48),
           (agent_set_scripted_destination, ":agent_no", pos1),
         (try_end),
         ]),

      (ti_on_agent_knocked_down, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (store_trigger_param_2, ":enemy_agent_no"),
         (agent_get_troop_id, ":agent_troop", ":agent_no"),
         (agent_get_troop_id, ":enemy_agent_troop", ":enemy_agent_no"),
         (try_begin),
           (ge, "$g_tutorial_training_ground_melee_trainer_attack", 0),
           #do nothing
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_parry", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 2), #player knocked down in parry
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 3), #trainer knocked down in parry
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (try_end),
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_chamber", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 7), #player knocked down in chamber
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 8), #trainer knocked down in chamber
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (try_end),
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_combat", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 4), #player knocked down in combat
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
##             (assign, "$g_tutorial_training_ground_melee_trainer_combat_completed", 1), #not used
             (tutorial_message, -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 5), #trainer knocked down in combat
             (play_sound, "snd_tutorial_2"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
           (try_end),
         (else_try),
           (agent_is_human, ":agent_no"),
           (assign, "$g_tutorial_training_ground_melee_last_winner", ":enemy_agent_no"),
           (assign, "$g_tutorial_training_ground_melee_last_loser", ":agent_no"),
           (assign, "$g_tutorial_training_ground_melee_state", 0),
           (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 7),
           (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 7),
           (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
           (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
         (try_end),
         (agent_set_hit_points, ":agent_no", 100, 0),
         (agent_set_hit_points, ":enemy_agent_no", 100, 0),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 13),
         (team_set_relation, 0, 1, 0),
         (team_set_relation, 0, 2, 0),
         (team_set_relation, 0, 3, 0),
         (team_set_relation, 0, 7, 0),
         (team_set_relation, 7, 1, 1),
         (team_set_relation, 7, 2, 1),
         (team_set_relation, 7, 3, 1),
         (team_set_relation, 1, 2, -1),
         (team_set_relation, 1, 3, 1),
         (team_set_relation, 2, 3, 1),
         (assign, "$g_position_to_use_for_replacing_scene_items", pos8),
         (call_script, "script_replace_scene_items_with_spawn_items_before_ms"),
         (assign, "$g_tutorial_training_ground_state", 0),
         (assign, "$g_tutorial_training_ground_conversation_state", 0),
         (assign, "$g_tutorial_training_ground_melee_paused", 0),
         (assign, "$g_tutorial_training_ground_melee_state", 0),
         (assign, "$g_tutorial_training_ground_melee_next_action_time", 0),
         (assign, "$g_tutorial_training_ground_melee_last_winner", -1),
         (assign, "$g_tutorial_training_ground_melee_last_loser", -1),
         (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
         (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
##         (assign, "$g_tutorial_training_ground_melee_trainer_attack_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_parry_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_combat_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_chamber_completed", 0), #not used
         (assign, "$g_tutorial_training_ground_melee_trainer_next_action_time", 0),
         (assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (assign, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
         (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (assign, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
         (assign, "$g_tutorial_training_ground_next_score_time", 0),
         (assign, "$g_tutorial_mouse_dir", -1),
         (assign, "$g_tutorial_mouse_click", -1),
         (assign, "$g_pointer_arrow_height_adder", -1000),
         ]),

      (0, 0, ti_once, [],
       [
         (tutorial_message_set_size, 17, 17),
         (tutorial_message_set_position, 500, 650),
         (tutorial_message_set_center_justify, 0),
         (mission_enable_talk),
         (call_script, "script_replace_scene_items_with_spawn_items_after_ms"),
         (entry_point_get_position, pos1, 59),
         (set_spawn_position, pos1),
         (spawn_horse, "itm_practice_horse", 0),
         (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bow", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bow_2", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_arrows", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_arrows_2", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_crossbow", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bolts", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_javelin", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_arena_lance", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         ]),

      (0, 1, ti_once, [],
       [
         (tutorial_message_set_background, 1),
         (tutorial_message, "str_tutorial_training_ground_intro_message"),
         ]),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (try_begin),
             (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
             (neq, ":cur_wielded_item", "itm_practice_bow"),
             (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
           (else_try),
             (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
             (prop_instance_get_position, pos1, ":look_spr"),
             (position_move_z, pos1, 10),
             (agent_set_look_target_position, ":cur_agent", pos1),
             (try_begin),
               (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
               (agent_set_attack_action, ":cur_agent", 0),
               (store_random_in_range, ":next_action_time", 3, 13),
               (val_add, ":next_action_time", ":cur_time"),
               (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (set_fixed_point_multiplier, 100),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
           (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
           (agent_get_slot, ":target_entry_point", ":cur_agent", slot_agent_target_entry_point),
           (entry_point_get_position, pos1, ":target_entry_point"),
           (agent_get_position, pos2, ":cur_agent"),
           (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
           (try_begin),
             (lt, ":cur_dist", 6400),
             (val_add, ":target_entry_point", 1),
             (try_begin),
               (gt, ":target_entry_point", 57), #last entry point
               (assign, ":target_entry_point", 48), #first entry point
             (try_end),
             (agent_set_slot, ":cur_agent", slot_agent_target_entry_point, ":target_entry_point"),
             (entry_point_get_position, pos1, ":target_entry_point"),
             (agent_set_scripted_destination, ":cur_agent", pos1),
           (try_end),
           (try_begin),
             (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
             (try_begin),
               (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
               (neq, ":cur_wielded_item", "itm_practice_bow"),
               (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
             (else_try),
               (scene_prop_get_num_instances, ":num_instances", "spr_archery_target_with_hit_a"),
               (assign, ":shortest_dist", 10000000),
               (assign, ":best_instance", -1),
               (try_for_range, ":cur_instance", 0, ":num_instances"),
                 (scene_prop_get_instance, ":spr_instance", "spr_archery_target_with_hit_a", ":cur_instance"),
                 (neg|agent_slot_eq, ":cur_agent", slot_agent_target_prop_instance, ":spr_instance"),
                 (prop_instance_get_position, pos1, ":spr_instance"),
                 (position_is_behind_position, pos2, pos1), #target is facing towards us
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", ":shortest_dist"),
                 (assign, ":shortest_dist", ":cur_dist"),
                 (assign, ":best_instance", ":spr_instance"),
               (try_end),
               (try_begin),
                 (lt, ":shortest_dist", 40000), #20 meters
                 (prop_instance_get_position, pos1, ":best_instance"),
                 (position_move_z, pos1, 10),
                 (init_position, pos3),
                 (position_set_x, pos3, -160), #1.6 meters
                 (position_transform_position_to_parent, pos4, pos1, pos3),
                 (copy_position, pos1, pos4),
                 (agent_set_look_target_position, ":cur_agent", pos1),
                 (lt, ":shortest_dist", 22500), #15 meters
                 (agent_set_slot, ":cur_agent", slot_agent_target_prop_instance, ":best_instance"),
                 (agent_set_attack_action, ":cur_agent", 0),
               (else_try),
                 (agent_get_slot, ":last_instance", ":cur_agent", slot_agent_target_prop_instance),
                 (ge, ":last_instance", 0),
                 (prop_instance_get_position, pos1, ":last_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", 40000), #20 meters
                 (position_move_z, pos1, 10),
                 (init_position, pos3),
                 (position_set_x, pos3, -160), #1.6 meters
                 (position_transform_position_to_parent, pos4, pos1, pos3),
                 (copy_position, pos1, pos4),
                 (agent_set_look_target_position, ":cur_agent", pos1),
               (try_end),
             (try_end),
           (else_try),
             (eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
             (try_begin),
               (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
               (neq, ":cur_wielded_item", "itm_practice_sword"),
               (agent_set_wielded_item, ":cur_agent", "itm_practice_sword"),
             (else_try),
               (scene_prop_get_num_instances, ":num_instances", "spr_dummy_a_undestructable"),
               (assign, ":shortest_dist", 10000000),
               (assign, ":best_instance", -1),
               (try_for_range, ":cur_instance", 0, ":num_instances"),
                 (scene_prop_get_instance, ":spr_instance", "spr_dummy_a_undestructable", ":cur_instance"),
                 (neg|agent_slot_eq, ":cur_agent", slot_agent_target_prop_instance, ":spr_instance"),
                 (prop_instance_get_position, pos1, ":spr_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", ":shortest_dist"),
                 (assign, ":shortest_dist", ":cur_dist"),
                 (assign, ":best_instance", ":spr_instance"),
               (try_end),
               (try_begin),
                 (lt, ":shortest_dist", 10000), #10 meters
                 (prop_instance_get_position, pos1, ":best_instance"),
                 (position_transform_position_to_local, pos3, pos2, pos1),
                 (position_get_x, ":local_x", pos3),
                 (position_get_y, ":local_y", pos3),
                 (is_between, ":local_x", -200, 200),
                 (gt, ":local_y", -100),
                 (init_position, pos3),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (position_move_x, pos3, -100),
                   (position_move_z, pos3, 100),
                 (else_try),
                   (position_move_x, pos3, 100),
                   (position_move_z, pos3, 150),
                 (try_end),
                 (position_transform_position_to_parent, pos4, pos2, pos3),
                 (agent_set_look_target_position, ":cur_agent", pos4),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (agent_set_attack_action, ":cur_agent", 2, 1), #left
                 (else_try),
                   (agent_set_attack_action, ":cur_agent", 1, 1), #right
                 (try_end),
                 (this_or_next|lt, ":shortest_dist", 900), #3 meters
                 (lt, ":local_y", 100), #1 meter
                 (agent_set_attack_action, ":cur_agent", 0, 0), #release
                 (agent_set_slot, ":cur_agent", slot_agent_target_prop_instance, ":best_instance"),
               (else_try),
                 (agent_get_slot, ":last_instance", ":cur_agent", slot_agent_target_prop_instance),
                 (ge, ":last_instance", 0),
                 (prop_instance_get_position, pos1, ":last_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", 10000), #10 meters
                 (position_transform_position_to_local, pos3, pos2, pos1),
                 (position_get_x, ":local_x", pos3),
                 (position_get_y, ":local_y", pos3),
                 (is_between, ":local_x", -200, 200),
                 (gt, ":local_y", -100),
                 (init_position, pos3),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (position_move_x, pos3, -100),
                   (position_move_z, pos3, 100),
                 (else_try),
                   (position_move_x, pos3, 100),
                   (position_move_z, pos3, 150),
                 (try_end),
                 (position_transform_position_to_parent, pos4, pos2, pos3),
                 (agent_set_look_target_position, ":cur_agent", pos4),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (try_begin),
             (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
             (neq, ":cur_wielded_item", "itm_practice_bow"),
             (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
           (else_try),
             (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
             (prop_instance_get_position, pos1, ":look_spr"),
             (agent_set_look_target_position, ":cur_agent", pos1),
             (try_begin),
               (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
               (agent_set_attack_action, ":cur_agent", 0),
               (store_random_in_range, ":next_action_time", 3, 13),
               (val_add, ":next_action_time", ":cur_time"),
               (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (call_script, "script_iterate_pointer_arrow"),
         ], []),


      (5, 0, 0,
       [
         (try_begin),
           (store_mission_timer_a, ":cur_time"),
           (ge, ":cur_time", 30),
           (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
           (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
           (tutorial_message, -1),
         (try_end),
         (get_player_agent_no, ":player_agent"),
         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (neq, ":cur_agent", ":player_agent"),
           (agent_refill_ammo, ":cur_agent"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (agent_get_wielded_item, ":wielded_weapon", ":player_agent", 0),
         (assign, ":refill", 0),
         (try_begin),
           (eq, ":wielded_weapon", "itm_practice_bow"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_arrows"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_bow_2"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_arrows_2"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_crossbow"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_bolts"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_javelin"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (le, ":cur_ammo", 1),
           (assign, ":refill", 1),
         (try_end),
         (eq, ":refill", 1),
         (agent_refill_ammo, ":player_agent"),
         (tutorial_box, "str_tutorial_training_ground_ammo_refill", "@Tutorial"),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (mission_disable_talk),
         (try_begin),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (assign, "$g_tutorial_training_ground_current_score", 0),
           (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 2),
           (try_begin),
             (try_begin),
               (ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
               (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
               (prop_instance_get_position, pos0, ":item_instance"),
               (position_move_z, pos0, 1000, 1),
               (prop_instance_set_position, ":item_instance", pos0),

               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 200),

               (try_begin),
                 (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (prop_instance_get_position, pos0, ":item_instance"),
                 (position_move_z, pos0, 1000, 1),
                 (prop_instance_set_position, ":item_instance", pos0),
               (try_end),
             (try_end),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 3),
           (try_begin),
             (ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 4),
           (try_begin),
             (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 5),
           (try_begin),
             (agent_get_horse, ":player_horse", ":player_agent"),
             (lt, ":player_horse", 0),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_2"),
             (try_begin),
               (assign, ":horse_agent_to_mount", -1),
               (try_for_agents, ":cur_agent"),
                 (agent_get_item_id, ":cur_agent_item", ":cur_agent"),
                 (eq, ":cur_agent_item", "itm_practice_horse"),
                 (assign, ":horse_agent_to_mount", ":cur_agent"),
               (try_end),
               (agent_get_position, pos0, ":horse_agent_to_mount"),
               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_get_position, pos1, ":pointer_instance"),
               (set_fixed_point_multiplier, 100),
               (position_get_x, ":x1", pos0),
               (position_get_x, ":x2", pos1),
               (position_get_y, ":y1", pos0),
               (position_get_y, ":y2", pos1),
               (this_or_next|neq, ":x1", ":x2"),
               (neq, ":y1", ":y2"),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 200),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 6),
           (try_begin),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_3"),
           (else_try),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
             (assign, ":prop_to_search_for", "spr_dummy_a_undestructable"),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_4"),
           (else_try),
             (assign, ":prop_to_search_for", "spr_archery_target_with_hit_a"),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_5"),
           (try_end),
           (try_begin),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
             (store_add, ":cur_entry_point", "$g_tutorial_training_ground_current_score", 48),
             (entry_point_get_position, pos0, ":cur_entry_point"),
             (init_position, pos2),
             (position_move_y, pos2, -800),
             (position_transform_position_to_parent, pos3, pos0, pos2),
             (copy_position, pos0, pos3),
             (agent_get_position, pos2, ":player_agent"),
             (try_begin),
               (get_distance_between_positions, ":cur_dist", pos0, pos2),
               (lt, ":cur_dist", 500), #5 meters
               (val_add, "$g_tutorial_training_ground_current_score", 1),
               (ge, "$g_tutorial_training_ground_current_score", 10),
               (assign, "$g_pointer_arrow_height_adder", -1000),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
               (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
               (play_sound, "snd_tutorial_2"),
             (try_end),
             (try_begin),
               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_get_position, pos1, ":pointer_instance"),
               (set_fixed_point_multiplier, 1),
               (position_get_x, ":x1", pos0),
               (position_get_x, ":x2", pos1),
               (position_get_y, ":y1", pos0),
               (position_get_y, ":y2", pos1),
               (this_or_next|neq, ":x1", ":x2"),
               (neq, ":y1", ":y2"),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 150),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (scene_prop_get_num_instances, ":end_cond", ":prop_to_search_for"),
             (try_begin),
               (lt, "$g_tutorial_training_ground_current_score", 6),
               (assign, ":next_prop_instance", -1),
               (store_add, ":var_id_to_search_for", "$g_tutorial_training_ground_current_score", 1),
               (try_for_range, ":cur_instance", 0, ":end_cond"),
                 (scene_prop_get_instance, ":prop_instance", ":prop_to_search_for", ":cur_instance"),
                 (prop_instance_get_variation_id_2, ":var_id_2", ":prop_instance"),
                 (eq, ":var_id_to_search_for", ":var_id_2"),
                 (assign, ":next_prop_instance", ":prop_instance"),
                 (assign, ":end_cond", 0),
               (try_end),
               (try_begin),
                 (prop_instance_get_position, pos0, ":next_prop_instance"),
                 (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
                 (prop_instance_get_position, pos1, ":pointer_instance"),
                 (set_fixed_point_multiplier, 1),
                 (position_get_x, ":x1", pos0),
                 (position_get_x, ":x2", pos1),
                 (position_get_y, ":y1", pos0),
                 (position_get_y, ":y2", pos1),
                 (this_or_next|neq, ":x1", ":x2"),
                 (neq, ":y1", ":y2"),
                 (prop_instance_set_position, ":pointer_instance", pos0),
                 (assign, "$g_pointer_arrow_height_adder", 200),
                 (play_sound, "snd_tutorial_1"),
               (try_end),
             (else_try),
               (assign, "$g_pointer_arrow_height_adder", -1000),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (try_end),
               (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
               (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
               (play_sound, "snd_tutorial_2"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (mission_disable_talk),
         (try_begin),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_begin),
             (assign, "$g_last_destroyed_gourds", 0),
             (assign, "$g_tutorial_training_ground_current_score", 0),
             (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_archer_trainer_item_1", 0),
             (prop_instance_get_position, pos0, ":item_instance"),
             (position_move_z, pos0, 1000, 1),
             (prop_instance_set_position, ":item_instance", pos0),

             (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
             (prop_instance_set_position, ":pointer_instance", pos0),
             (assign, "$g_pointer_arrow_height_adder", 100),

             (try_begin),
               (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (prop_instance_get_position, pos0, ":item_instance"),
               (position_move_z, pos0, 1000, 1),
               (prop_instance_set_position, ":item_instance", pos0),
             (try_end),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 2),
           (try_begin),
             (str_store_item_name, s0, "$g_tutorial_training_ground_archer_trainer_item_1"),
             (tutorial_message, "str_tutorial_training_ground_archer_text_1"),
             (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_1"),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
             (play_sound, "snd_tutorial_1"),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 3),
           (try_begin),
             (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_archer_trainer_item_2"),
               (tutorial_message, "str_tutorial_training_ground_archer_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_2"),
               (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 4),
           (try_begin),
             (try_for_range, ":cur_instance", 0, 3),
               (scene_prop_get_instance, ":gourd_instance", "spr_gourd", ":cur_instance"),
               (prop_instance_refill_hit_points, ":gourd_instance"),
               (entry_point_get_position, pos0, 45),
               (init_position, pos1),
               (store_sub, ":cur_rotation", ":cur_instance", 1),
               (val_mul, ":cur_rotation", 5),
               (position_rotate_z, pos1, ":cur_rotation"),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
                 (position_move_y, pos1, 1300), #for bow and crossbow
               (else_try),
                 (position_move_y, pos1, 800), #for javelin
                 (val_mul, ":cur_rotation", 2),
               (try_end),
               (position_transform_position_to_parent, pos2, pos0, pos1),
               (position_set_z_to_ground_level, pos2),
               (scene_prop_get_instance, ":spike_instance", "spr_gourd_spike", ":cur_instance"),
               (prop_instance_set_position, ":spike_instance", pos2),
               (position_move_z, pos2, 150, 1),
               (prop_instance_set_position, ":gourd_instance", pos2),
             (try_end),
             (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
             (scene_prop_get_instance, ":spike_instance", "spr_gourd_spike", 1),
             (prop_instance_get_position, pos1, ":spike_instance"),
             (prop_instance_set_position, ":pointer_instance", pos1),
             (assign, "$g_pointer_arrow_height_adder", 200),
             (tutorial_message, "str_tutorial_training_ground_archer_text_2"),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 5),
           (try_begin),
             (try_begin),
               (neq, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
               (assign, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
               (try_begin),
                 (lt, "$g_last_destroyed_gourds", 3),
                 (play_sound, "snd_tutorial_1"),
               (else_try),
                 (play_sound, "snd_tutorial_2"),
               (try_end),
             (try_end),
             (try_begin),
               (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
               (eq, "$g_last_destroyed_gourds", 0),
               (entry_point_get_position, pos0, 45),
               (agent_get_position, pos1, ":player_agent"),
               (neg|position_is_behind_position, pos1, pos0),
               (tutorial_message, "str_tutorial_training_ground_archer_text_3"),
             (else_try),
               (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
               (eq, "$g_last_destroyed_gourds", 1),
               (tutorial_message, "str_tutorial_training_ground_archer_text_4"),
             (try_end),
             (ge, "$g_last_destroyed_gourds", 3),
             (assign, "$g_pointer_arrow_height_adder", -1000),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 6),
           (try_begin),
             (try_begin),
               (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_2"),
             (try_end),
             (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_1"),
             (tutorial_message, "str_tutorial_training_ground_archer_text_5", 0, 10),
             (assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
             (val_add, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_attack"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (store_random_in_range, "$g_tutorial_training_ground_melee_state", 1, 5), #random attack dir
             (assign, "$g_tutorial_update_mouse_presentation", 1),
             (assign, "$g_tutorial_training_ground_next_score_time", 0),
           (try_end),
         (else_try),
           (gt, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_attack_action, ":attack_action", ":player_agent"),
             (try_begin),
               (eq, ":attack_action", 2), #release
               (agent_get_action_dir, ":action_dir_attacker", ":player_agent"),
               (try_begin),
                 (eq, ":action_dir_attacker", 0), #down
                 (agent_set_defend_action, ":trainer_agent", 0, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 3), #up
                 (agent_set_defend_action, ":trainer_agent", 3, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 1), #right
                 (agent_set_defend_action, ":trainer_agent", 2, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 2), #left
                 (agent_set_defend_action, ":trainer_agent", 1, 1),
               (try_end),
             (try_end),
             (try_begin),
               (ge, "$g_tutorial_training_ground_current_score", 5),
               (tutorial_message, -1),
               (assign, "$g_tutorial_training_ground_melee_state", 0),
               (agent_set_team, ":player_agent", 0),
               (agent_set_team, ":trainer_agent", 7),
               (agent_set_hit_points, ":player_agent", 100, 0),
               (agent_set_hit_points, ":trainer_agent", 100, 0),
##               (assign, "$g_tutorial_training_ground_melee_trainer_attack_completed", 1), #not used
               (assign, "$g_tutorial_training_ground_conversation_state", 9), #attack complete
               (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_attack"),
               (assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_get_attack_action, ":attack_action", ":player_agent"),
           (eq, ":attack_action", 2), #release
           (agent_get_action_dir, ":action_dir_attacker", ":player_agent"),
           (store_add, ":attack_state", ":action_dir_attacker", 1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (try_begin),
             (eq, ":attack_state", "$g_tutorial_training_ground_melee_state"),
             (val_add, "$g_tutorial_training_ground_current_score", 1),
             (try_begin),
               (ge, "$g_tutorial_training_ground_current_score", 5),
               (assign, "$g_tutorial_training_ground_melee_state", 5),
               (play_sound, "snd_tutorial_2"),
             (else_try),
               (play_sound, "snd_tutorial_1"),
               (assign, ":end_cond", 100),
               (try_for_range, ":unused", 0, ":end_cond"),
                 (store_random_in_range, ":random_no", 1, 5), #random attack dir
                 (neq, ":random_no", "$g_tutorial_training_ground_melee_state"),
                 (assign, "$g_tutorial_training_ground_melee_state", ":random_no"),
                 (assign, ":end_cond", 0), #break
               (try_end),
             (try_end),
             (assign, "$g_tutorial_update_mouse_presentation", 1),
           (else_try),
             (val_add, "$g_tutorial_training_ground_current_score_2", 1),
             (play_sound, "snd_tutorial_fail"),
           (try_end),
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (assign, reg1, "$g_tutorial_training_ground_current_score_2"),
         (str_clear, s0),
         (assign, "$g_tutorial_mouse_dir", -1),
         (assign, "$g_tutorial_mouse_click", -1),
         (try_begin),
           (neq, "$g_tutorial_training_ground_melee_state", 5), #finished
           (store_mission_timer_a, ":cur_time"),
           (this_or_next|eq, "$g_tutorial_update_mouse_presentation", 0),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (try_begin),
             (eq, "$g_tutorial_training_ground_melee_state", 1), #down
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_down"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 4), #up
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_up"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 2), #right
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_right"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 3), #left
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_left"),
           (try_end),
           (store_sub, "$g_tutorial_mouse_dir", "$g_tutorial_training_ground_melee_state", 1),
           (assign, "$g_tutorial_mouse_click", 0),
           (try_begin),
             (eq, "$g_tutorial_update_mouse_presentation", 1),
             (assign, "$g_tutorial_update_mouse_presentation", 0),
             (start_presentation, "prsnt_tutorial_show_mouse_movement"),
           (try_end),
         (try_end),
         (try_begin),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (tutorial_message, "str_tutorial_training_ground_attack_training"),
         (else_try),
           (tutorial_message, "str_tutorial_training_ground_warning_melee"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_position, pos2, ":trainer_agent"),
             (get_sq_distance_between_positions, ":sq_dist", pos1, pos2),
             (lt, ":sq_dist", 400), #2 meters
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_current_score", 5),
                 (assign, "$g_tutorial_mouse_dir", -1),
                 (assign, "$g_tutorial_mouse_click", -1),
                 (tutorial_message, -1),
                 (assign, "$g_tutorial_training_ground_melee_state", 0),
                 (agent_set_team, ":player_agent", 0),
                 (agent_set_team, ":trainer_agent", 7),
                 (agent_set_hit_points, ":player_agent", 100, 0),
                 (agent_set_hit_points, ":trainer_agent", 100, 0),
##                 (assign, "$g_tutorial_training_ground_melee_trainer_parry_completed", 1), #not used
                 (assign, "$g_tutorial_training_ground_conversation_state", 1), #parry complete
                 (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
               (else_try),
                 (store_random_in_range, ":random_no", 0, 4),
                 (agent_set_attack_action, ":trainer_agent", ":random_no", 1), #ready
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (assign, "$g_tutorial_mouse_dir", ":random_no"),
                 (try_begin),
                   (is_between, ":random_no", 1, 3), #right or left
                   (store_sub, "$g_tutorial_mouse_dir", 3, ":random_no"), #revert sides
                 (try_end),
                 (assign, "$g_tutorial_mouse_click", 1),
                 (start_presentation, "prsnt_tutorial_show_mouse_movement"),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (agent_get_defend_action, ":defend_action", ":player_agent"),
               (gt, ":defend_action", 0), #parrying or blocking
               (agent_get_action_dir, ":action_dir_defender", ":player_agent"),
               (agent_get_action_dir, ":action_dir_attacker", ":trainer_agent"),
               (assign, ":actions_match", 0),
               (try_begin),
                 (eq, ":action_dir_attacker", 0), #down
                 (eq, ":action_dir_defender", 0), #down
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 3), #up
                 (eq, ":action_dir_defender", 3), #up
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 1), #right
                 (eq, ":action_dir_defender", 2), #left
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 2), #left
                 (eq, ":action_dir_defender", 1), #right
                 (assign, ":actions_match", 1),
               (try_end),
               (eq, ":actions_match", 1),
               (assign, "$g_tutorial_mouse_dir", -1),
               (assign, "$g_tutorial_mouse_click", -1),
               (agent_set_attack_action, ":trainer_agent", 0, 0), #release
               (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
               (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_is_in_parried_animation, ":trainer_agent"),
           (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
           (eq, ":shield_item", -1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (neq, ":weapon_item", "itm_practice_dagger"),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (val_add, "$g_tutorial_training_ground_current_score", 1),
           (try_begin),
             (lt, "$g_tutorial_training_ground_current_score", 5),
             (play_sound, "snd_tutorial_1"),
           (else_try),
             (play_sound, "snd_tutorial_2"),
           (try_end),
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (try_begin),
           (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
           (eq, ":shield_item", -1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (neq, ":weapon_item", "itm_practice_dagger"),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (tutorial_message, "str_tutorial_training_ground_parry_training"),
         (else_try),
           (neq, ":shield_item", -1),
           (tutorial_message, "str_tutorial_training_ground_warning_shield"),
         (else_try),
           (tutorial_message, "str_tutorial_training_ground_warning_melee_with_parry"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
##             (entry_point_get_position, pos1, 30),
##             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1, 1),
##             (agent_get_position, pos2, ":trainer_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
##             (lt, ":sq_dist_1", 400), #2 meters
##             (entry_point_get_position, pos1, 31),
##             (agent_get_position, pos2, ":player_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
##             (lt, ":sq_dist_2", 400), #2 meters
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_position, pos2, ":trainer_agent"),
             (get_sq_distance_between_positions, ":sq_dist", pos1, pos2),
             (lt, ":sq_dist", 400), #2 meters
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_current_score", 5),
                 (tutorial_message, -1),
                 (assign, "$g_tutorial_training_ground_melee_state", 0),
                 (agent_set_team, ":player_agent", 0),
                 (agent_set_team, ":trainer_agent", 7),
                 (agent_set_hit_points, ":player_agent", 100, 0),
                 (agent_set_hit_points, ":trainer_agent", 100, 0),
##                 (assign, "$g_tutorial_training_ground_melee_trainer_chamber_completed", 1), #not used
                 (assign, "$g_tutorial_training_ground_conversation_state", 6), #chamber complete
                 (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
               (else_try),
                 (store_random_in_range, "$g_tutorial_training_ground_melee_trainer_attack_dir", 0, 4),
                 (agent_set_attack_action, ":trainer_agent", "$g_tutorial_training_ground_melee_trainer_attack_dir", 1), #ready
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (agent_set_attack_action, ":trainer_agent", -1, 0), #cancel
                 (agent_set_defend_action, ":trainer_agent", 0, 1), #cancel
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (agent_set_attack_action, ":trainer_agent", "$g_tutorial_training_ground_melee_trainer_attack_dir", 0),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 3),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_is_in_parried_animation, ":trainer_agent"),
           (agent_get_attack_action, ":attack_action", ":player_agent"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           #add first, because player might immediately start attacking after parry
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
           (eq, ":attack_action", 1), #readying_attack
           (val_add, "$g_tutorial_training_ground_current_score", 1),
           (try_begin),
             (lt, "$g_tutorial_training_ground_current_score", 5),
             (play_sound, "snd_tutorial_1"),
           (else_try),
             (play_sound, "snd_tutorial_2"),
           (try_end),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (tutorial_message, "str_tutorial_training_ground_chamber_training"),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
##             (entry_point_get_position, pos1, 30),
##             (agent_set_scripted_destination, ":trainer_agent", pos1, 1),
##             (agent_get_position, pos2, ":trainer_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
##             (lt, ":sq_dist_1", 400), #2 meters
##             (entry_point_get_position, pos1, 31),
##             (agent_get_position, pos2, ":player_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
##             (lt, ":sq_dist_2", 400), #2 meters
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_clear_scripted_mode, ":trainer_agent"),
             (agent_force_rethink, ":trainer_agent"),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (eq, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (eq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (mission_enable_talk),
         ], []),

      (0, 0, 0,
       [
         (eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (get_player_agent_no, ":player_agent"),
         (agent_get_position, pos1, ":player_agent"),
         (assign, ":shortest_dist", 10000000),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
           (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
           (agent_get_position, pos2, ":cur_agent"),
           (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
           (lt, ":cur_dist", ":shortest_dist"),
           (assign, ":shortest_dist", ":cur_dist"),
         (try_end),
         (try_begin),
           (le, ":shortest_dist", 1600), #4 meters
           (assign, "$g_tutorial_training_ground_melee_paused", 1),
           (try_for_agents, ":cur_agent"),
             (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
             (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
             (agent_set_team, ":cur_agent", 7),
             (agent_get_position, pos2, ":cur_agent"),
             (agent_set_scripted_destination, ":cur_agent", pos2),
             (try_begin),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
               (agent_set_wielded_item, ":cur_agent", -1),
             (try_end),
             (agent_force_rethink, ":cur_agent"),
             (agent_set_look_target_agent, ":cur_agent", ":player_agent"),
           (try_end),
         (else_try),
           (gt, "$g_tutorial_training_ground_melee_paused", 0),
           (assign, "$g_tutorial_training_ground_melee_paused", 0),
           (assign, "$g_tutorial_training_ground_melee_state", 0),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_paused", 0),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
             (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
             (try_for_range, ":unused", 0, 2),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_melee_last_winner", 0),
                 (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_last_winner"),
                 (assign, "$g_tutorial_training_ground_melee_last_winner", -1),
               (try_end),
               (this_or_next|eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
               (eq, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
               (assign, ":num_candidates", 0),
               (try_for_agents, ":cur_agent"),
                 (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
                 (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_last_loser"),
                 (val_add, ":num_candidates", 1),
               (try_end),
               (store_random_in_range, ":random_candidate", 0, ":num_candidates"),
               (try_for_agents, ":cur_agent"),
                 (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
                 (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_last_loser"),
                 (val_sub, ":random_candidate", 1),
                 (lt, ":random_candidate", 0),
                 (try_begin),
                   (eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
                   (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", ":cur_agent"),
                 (else_try),
                   (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", ":cur_agent"),
                 (try_end),
               (try_end),
             (try_end),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
               (agent_set_wielded_item, ":cur_agent", -1),
             (try_end),
             (val_add, "$g_tutorial_training_ground_melee_state", 1), #fighters are chosen
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 3),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (try_for_agents, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (try_begin),
                 (eq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (entry_point_get_position, pos1, 30),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (else_try),
                 (eq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (entry_point_get_position, pos1, 31),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (else_try),
                 (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
                 (entry_point_get_position, pos1, ":spawn_point"),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (try_end),
             (try_end),
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 2),
           (try_begin),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_get_position, pos1, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (entry_point_get_position, pos2, 30),
             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
             (lt, ":sq_dist_1", 400), #2 meters
             (agent_get_position, pos1, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (entry_point_get_position, pos2, 31),
             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
             (lt, ":sq_dist_2", 400), #2 meters
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 3),
           (try_begin),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 1),
             (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 2),
             (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
           (try_end),
         (try_end),
##         (try_begin),
##           (store_mission_timer_a, ":cur_time"),
##           (gt, ":cur_time", 0),
##           (tutorial_message, "str_talk_to_the_trainer"),
##           (assign, "$g_tutorial_training_ground_state", 1),
##         (try_end),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 1),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 2),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 3),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 4),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 5),
##         (try_end),
         ], []),


    ],
  ),

  (
    "tutorial_1",0,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only,af_override_everything,0,1,[itm_tutorial_shield,itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows,itm_leather_jerkin,itm_leather_boots]), #af_override_weapons
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_1_state", 5),
         (question_box, "str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	               (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_1_state", 0),
                       (assign, "$tutorial_1_msg_1_displayed", 0),
                       (assign, "$tutorial_1_msg_2_displayed", 0),
                       (assign, "$tutorial_1_msg_3_displayed", 0),
                       (assign, "$tutorial_1_msg_4_displayed", 0),
                       (assign, "$tutorial_1_msg_5_displayed", 0),
                       (assign, "$tutorial_1_msg_6_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_1_state", 0),
                   (try_begin),
                     (eq, "$tutorial_1_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_1_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_1"),
                     (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                     (entry_point_get_position,pos1,1),
                     (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (try_end),
                   (tutorial_message, "str_tutorial_1_msg_1"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 100),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (entry_point_get_position,pos1,2),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 1),
                   (try_begin),
                     (eq, "$tutorial_1_msg_2_displayed", 0),
                     (assign, "$tutorial_1_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 100),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (entry_point_get_position,pos1,3),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 2),
                   (try_begin),
                     (eq, "$tutorial_1_msg_3_displayed", 0),
                     (assign, "$tutorial_1_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_3"),
                     (assign, "$tutorial_num_total_dummies_destroyed", 0),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (ge, "$tutorial_num_total_dummies_destroyed", 4),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                 (else_try),
                   (eq, "$tutorial_1_state", 3),
                   (try_begin),
                     (eq, "$tutorial_1_msg_4_displayed", 0),
                     (assign, "$tutorial_1_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_4"),
                     (store_mission_timer_a, "$tutorial_time"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (store_mission_timer_a, ":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (gt, ":cur_time", 10),
                   (val_add, "$tutorial_1_state", 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 4),
                   (try_begin),
                     (eq, "$tutorial_1_msg_5_displayed", 0),
                     (assign, "$tutorial_1_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_5"),
                     (assign, "$g_last_archery_point_earned", 0),
                     (assign, "$tutorial_num_arrows_hit", 0),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (try_begin),
                     (get_player_agent_no, ":player_agent"),
                     (agent_get_ammo, ":cur_ammo", ":player_agent"),
                     (le, ":cur_ammo", 0),
                     (agent_refill_ammo, ":player_agent"),
                     (tutorial_message, "str_tutorial_ammo_refilled"),
                   (try_end),
                   (gt, "$g_last_archery_point_earned", 0),
                   (assign, "$g_last_archery_point_earned", 0),
                   (val_add, "$tutorial_num_arrows_hit", 1),
                   (gt, "$tutorial_num_arrows_hit", 2),
                   (val_add, "$tutorial_1_state", 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 5),
                   (eq, "$tutorial_1_msg_6_displayed", 0),
                   (assign, "$tutorial_1_msg_6_displayed", 1),
                   (tutorial_message, "str_tutorial_1_msg_6"),
                   (play_sound, "snd_tutorial_2"),
                   (assign, "$tutorial_1_finished", 1),
                 (try_end),
                 ], []),
    ],
  ),

##  (
##    "tutorial_1",0,-1,
##    "You enter the training ground.",
##    [
##        (0,mtef_leader_only|mtef_team_0,af_override_horse|af_override_weapons,0,1,[itm_tutorial_shield,itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows]), #af_override_weapons
##        (1,mtef_visitor_source|mtef_team_0,0,0,1,[]),
##        (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##     ],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [(try_begin),
##         (lt, "$tutorial_1_state", 5),
##         (question_box, "str_do_you_wish_to_leave_tutorial"),
##        (else_try),
##          (finish_mission,0),
##        (try_end),
##        ]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),
##        (eq,":answer",0),
##        (finish_mission,0),
##        ]),
##      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),
##
##      (0, 0, ti_once, [
##      	               (tutorial_message_set_size, 17, 17),
##	               (tutorial_message_set_position, 500, 650),
##                       (tutorial_message_set_center_justify, 0),
##                       (assign, "$tutorial_1_state", 0),
##                       ], []),
##
##      (0, 0, 0, [(try_begin),
##                   (eq, "$tutorial_1_state", 0),
##                   (try_begin),
##                     (store_mission_timer_a, ":cur_time"),
##                     (gt, ":cur_time", 0),
##                     (tutorial_message, "str_talk_to_the_trainer"),
##                     (assign, "$tutorial_1_state", 1),
##                   (try_end),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 1),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 2),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 3),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 4),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 5),
##                 (try_end),
##                 ], []),
##    ],
##  ),


  (
    "tutorial_2",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_shield,itm_leather_jerkin,itm_leather_boots]),
        (2,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (4,mtef_visitor_source|mtef_team_1,0,0,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_2_state", 9),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),
      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_2_state", 100),
        ], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_2_state", 0),
                       (assign, "$tutorial_2_msg_1_displayed", 0),
                       (assign, "$tutorial_2_msg_2_displayed", 0),
                       (assign, "$tutorial_2_msg_3_displayed", 0),
                       (assign, "$tutorial_2_msg_4_displayed", 0),
                       (assign, "$tutorial_2_msg_5_displayed", 0),
                       (assign, "$tutorial_2_msg_6_displayed", 0),
                       (assign, "$tutorial_2_msg_7_displayed", 0),
                       (assign, "$tutorial_2_msg_8_displayed", 0),
                       (assign, "$tutorial_2_msg_9_displayed", 0),
                       (assign, "$tutorial_2_melee_agent_state", 0),
                       ], []),

      (10, 0, 0, [(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
                  (agent_refill_ammo, reg0)], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_2_state", 0),
                   (try_begin),
                     (eq, "$tutorial_2_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_2_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_1"),
                     (team_give_order, 1, grc_everyone, mordr_stand_ground),
                     (team_give_order, 1, grc_infantry, mordr_charge),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (ge, ":player_agent", 0),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 1),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 2),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 0), #don't let player kick while defending
                   (try_begin),
                     (eq, "$tutorial_2_melee_agent_state", 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 1),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (agent_clear_scripted_mode, ":cur_agent"),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (store_mission_timer_a,"$tutorial_time"),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 2),
                     (try_begin),
                       (eq, "$tutorial_2_msg_2_displayed", 0),
                       (assign, "$tutorial_2_msg_2_displayed", 1),
                       (play_sound, "snd_tutorial_1"),
                     (try_end),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (store_mission_timer_a,":cur_time"),
                     (val_sub, ":cur_time", "$tutorial_time"),
                     (store_sub, reg3, 20, ":cur_time"),
                     (tutorial_message, "str_tutorial_2_msg_2"),
                     (gt, ":cur_time", 20),
                     (entry_point_get_position, pos1, 3),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 3),
                     (try_begin),
                       (eq, "$tutorial_2_msg_3_displayed", 0),
                       (assign, "$tutorial_2_msg_3_displayed", 1),
                       (tutorial_message, "str_tutorial_2_msg_3"),
                       (play_sound, "snd_tutorial_1"),
                     (try_end),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (entry_point_get_position, pos1, 2),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 4),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 2),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (entry_point_get_position, pos1, 30),
                     (agent_set_position, ":cur_agent", pos1),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                     (prop_instance_get_position, pos1, ":door_object"),
                     (position_rotate_z, pos1, 90),
                     (prop_instance_animate_to_position, ":door_object", pos1, 150),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (val_add, "$tutorial_2_state", 1),
                   (try_end),
                 (else_try),
                   (eq, "$tutorial_2_state", 3),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 1), #reenable
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (store_mission_timer_a,"$tutorial_time"),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 4),
                   (try_begin),
                     (eq, "$tutorial_2_msg_4_displayed", 0),
                     (assign, "$tutorial_2_msg_4_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_2_msg_4"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position,pos1,5),
                   (set_spawn_position, pos1),
                   (spawn_item, "itm_tutorial_sword"),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 3),
                   (agent_set_position, ":cur_agent", pos1),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 5),
                   (try_begin),
                     (eq, "$tutorial_2_msg_5_displayed", 0),
                     (assign, "$tutorial_2_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 2),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 6),
                   (try_begin),
                     (eq, "$tutorial_2_msg_6_displayed", 0),
                     (assign, "$tutorial_2_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_has_item_equipped, ":player_agent", "itm_tutorial_sword"),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 7),
                   (try_begin),
                     (eq, "$tutorial_2_msg_7_displayed", 0),
                     (assign, "$tutorial_2_msg_7_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_7"),
                     (play_sound, "snd_tutorial_1"),
                     (get_player_agent_no, ":player_agent"),
                     (agent_set_hit_points, ":player_agent", 100),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
                   (assign, ":cur_agent", reg0),
                   (neg|agent_is_alive, ":cur_agent"),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 4),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 8),
                   (try_begin),
                     (eq, "$tutorial_2_msg_8_displayed", 0),
                     (assign, "$tutorial_2_msg_8_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_8"),
                     (play_sound, "snd_tutorial_1"),
                     (get_player_agent_no, ":player_agent"),
                     (agent_set_hit_points, ":player_agent", 100),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (neg|agent_is_alive, ":cur_agent"),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 9),
                   (eq, "$tutorial_2_msg_9_displayed", 0),
                   (assign, "$tutorial_2_msg_9_displayed", 1),
                   (tutorial_message, "str_tutorial_2_msg_9"),
                   (play_sound, "snd_tutorial_2"),
                   (assign, "$tutorial_2_finished", 1),
                 (else_try),
                   (gt, "$tutorial_2_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_3",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_leather_jerkin,itm_leather_boots]),
        (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (5,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_3_state", 12),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_3_state", 100),
        ], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_3_state", 0),
                       (assign, "$tutorial_3_msg_1_displayed", 0),
                       (assign, "$tutorial_3_msg_2_displayed", 0),
                       (assign, "$tutorial_3_msg_3_displayed", 0),
                       (assign, "$tutorial_3_msg_4_displayed", 0),
                       (assign, "$tutorial_3_msg_5_displayed", 0),
                       (assign, "$tutorial_3_msg_6_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_3_state", 0),
                   (try_begin),
                     (eq, "$tutorial_3_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_3_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_1"),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (entry_point_get_position, pos1, 1),
                     (set_spawn_position, pos1),
                     (spawn_item, "itm_tutorial_staff_no_attack"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (ge, ":player_agent", 0),
                   (agent_has_item_equipped, ":player_agent", "itm_tutorial_staff_no_attack"),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 1),
                   (try_begin),
                     (eq, "$tutorial_3_msg_2_displayed", 0),
                     (assign, "$tutorial_3_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 2),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 3),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 0), #don't let player kick while defending
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 4),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (val_add, "$tutorial_3_state", 1),
                   (store_mission_timer_a,"$tutorial_time"),
                 (else_try),
                   (eq, "$tutorial_3_state", 5),
                   (try_begin),
                     (eq, "$tutorial_3_msg_3_displayed", 0),
                     (assign, "$tutorial_3_msg_3_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_3_msg_3"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position, pos1, 4),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 6),
                   (try_begin),
                     (eq, "$tutorial_3_msg_4_displayed", 0),
                     (assign, "$tutorial_3_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 3),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 7),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 3),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 7),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (agent_set_position, ":cur_agent", pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 8),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 9),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 10),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (val_add, "$tutorial_3_state", 1),
                   (store_mission_timer_a,"$tutorial_time"),
                 (else_try),
                   (eq, "$tutorial_3_state", 11),
                   (try_begin),
                     (eq, "$tutorial_3_msg_5_displayed", 0),
                     (assign, "$tutorial_3_msg_5_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_3_msg_5"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position, pos1, 6),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 12),
                   (try_begin),
                     (eq, "$tutorial_3_msg_6_displayed", 0),
                     (assign, "$tutorial_3_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 5),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 13),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 5),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 7),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (agent_set_position, ":cur_agent", pos1),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (gt, "$tutorial_3_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_3_2",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_staff,itm_leather_jerkin,itm_leather_boots]),
        (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (6,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_3_state", 5),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_3_state", 100),
        ], []),


      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_3_state", 0),
                       (assign, "$tutorial_3_msg_1_displayed", 0),
                       (assign, "$tutorial_3_msg_2_displayed", 0),
                       (assign, "$tutorial_3_msg_3_displayed", 0),
                       (assign, "$tutorial_3_msg_4_displayed", 0),
                       (assign, "$tutorial_3_msg_5_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_3_state", 0),
                   (try_begin),
                     (eq, "$tutorial_3_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_3_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_1"),
                     (play_sound, "snd_tutorial_1"),
                     (call_script, "script_cf_get_first_agent_with_troop_id","trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 1),
                   (try_begin),
                     (eq, "$tutorial_3_msg_2_displayed", 0),
                     (assign, "$tutorial_3_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (agent_clear_scripted_mode, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 2),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (neg|agent_is_alive, reg0),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 3),
                   (try_begin),
                     (eq, "$tutorial_3_msg_3_displayed", 0),
                     (assign, "$tutorial_3_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (agent_clear_scripted_mode, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 4),
                   (try_begin),
                     (eq, "$tutorial_3_msg_4_displayed", 0),
                     (assign, "$tutorial_3_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (neg|agent_is_alive, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 5),
                   (eq, "$tutorial_3_msg_5_displayed", 0),
                   (assign, "$tutorial_3_msg_5_displayed", 1),
                   (tutorial_message, "str_tutorial_3_2_msg_5"),
                   (play_sound, "snd_tutorial_2"),
                   (assign, "$tutorial_3_finished", 1),
                 (else_try),
                   (gt, "$tutorial_3_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),


    ],
  ),

  (
    "tutorial_4",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows,itm_leather_jerkin,itm_leather_boots]), #af_override_weapons
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_4_state", 11),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 13),
         ]),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_4_state", 0),
                       (assign, "$tutorial_4_msg_1_displayed", 0),
                       (assign, "$tutorial_4_msg_2_displayed", 0),
                       (assign, "$tutorial_4_msg_3_displayed", 0),
                       (assign, "$tutorial_4_msg_4_displayed", 0),
                       (assign, "$tutorial_4_msg_5_displayed", 0),
                       (assign, "$tutorial_4_msg_6_displayed", 0),
                       (assign, "$tutorial_4_msg_7_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_4_state", 0),
                   (try_begin),
                     (eq, "$tutorial_4_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_4_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_1"),
                     (entry_point_get_position, pos1, 1),
                     (set_spawn_position, 1),
                     (spawn_horse, "itm_tutorial_saddle_horse"),
                     (assign, "$tutorial_num_total_dummies_destroyed", 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_horse, ":horse_agent", ":player_agent"),
                   (ge, ":horse_agent", 0),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 2),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 1),
                   (try_begin),
                     (eq, "$tutorial_4_msg_2_displayed", 0),
                     (assign, "$tutorial_4_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 3),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 2),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 3),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 4),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 3),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 4),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 5),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 4),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 6),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 5),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 6),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 6),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 7),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 7),
                   (try_begin),
                     (eq, "$tutorial_4_msg_3_displayed", 0),
                     (assign, "$tutorial_4_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 7),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 20),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 8),
                   (try_begin),
                     (eq, "$tutorial_4_msg_4_displayed", 0),
                     (assign, "$tutorial_4_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (ge, "$tutorial_num_total_dummies_destroyed", 2),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 8),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 9),
                   (try_begin),
                     (eq, "$tutorial_4_msg_5_displayed", 0),
                     (assign, "$tutorial_4_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 8),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 20),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 10),
                   (try_begin),
                     (eq, "$tutorial_4_msg_6_displayed", 0),
                     (assign, "$tutorial_4_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                     (assign, "$g_last_archery_point_earned", 0),
                     (assign, "$tutorial_num_arrows_hit", 0),
                   (try_end),
                   (try_begin),
                     (get_player_agent_no, ":player_agent"),
                     (agent_get_ammo, ":cur_ammo", ":player_agent"),
                     (le, ":cur_ammo", 0),
                     (agent_refill_ammo, ":player_agent"),
                     (tutorial_message, "str_tutorial_ammo_refilled"),
                   (try_end),
                   (gt, "$g_last_archery_point_earned", 0),
                   (assign, "$g_last_archery_point_earned", 0),
                   (val_add, "$tutorial_num_arrows_hit", 1),
                   (gt, "$tutorial_num_arrows_hit", 2),
                   (val_add, "$tutorial_4_state", 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 11),
                   (eq, "$tutorial_4_msg_7_displayed", 0),
                   (assign, "$tutorial_4_msg_7_displayed", 1),
                   (tutorial_message, "str_tutorial_4_msg_7"),
                   (play_sound, "snd_tutorial_2"),
                   (assign, "$tutorial_4_finished", 1),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_5",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_visitor_source|mtef_team_0,af_override_everything,0,1,[itm_tutorial_sword,itm_tutorial_shield,itm_tutorial_short_bow,itm_tutorial_arrows,itm_tutorial_saddle_horse,itm_leather_jerkin,itm_leather_boots]),
        (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_5_state", 5),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),


      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_5_state", 100),
        ], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_5_state", 0),
                       (assign, "$tutorial_5_msg_1_displayed", 0),
                       (assign, "$tutorial_5_msg_2_displayed", 0),
                       (assign, "$tutorial_5_msg_3_displayed", 0),
                       (assign, "$tutorial_5_msg_4_displayed", 0),
                       (assign, "$tutorial_5_msg_5_displayed", 0),
                       (assign, "$tutorial_5_msg_6_displayed", 0),
                       ], []),

      (0, 0, ti_once, [(set_show_messages, 0),
                       (team_give_order, 0, grc_everyone, mordr_stand_ground),
                       (set_show_messages, 1),
                       (store_mission_timer_a, ":cur_time"),
                       (gt, ":cur_time", 3),
                       ], []),

      (0, 0, 0, [(call_script, "script_cf_turn_windmill_fans", 0)], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_5_state", 0),
                   (try_begin),
                     (eq, "$tutorial_5_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_5_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_1"),
                     (entry_point_get_position, pos1, 5),
                     (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                     (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 6),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 1),
                   (try_begin),
                     (eq, "$tutorial_5_msg_2_displayed", 0),
                     (assign, "$tutorial_5_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 6),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 500),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 7),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 2),
                   (try_begin),
                     (eq, "$tutorial_5_msg_3_displayed", 0),
                     (assign, "$tutorial_5_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 7),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 500),
                   (val_add, "$tutorial_5_state", 1),
                   (modify_visitors_at_site,"scn_tutorial_5"),
                   (reset_visitors),
                   (set_visitor,5,"trp_sagittarius"),
                   (set_visitor,6,"trp_sagittarius"),
                   (set_visitor,7,"trp_sagittarius"),
                   (entry_point_get_position, pos1, 11),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (entry_point_get_position, pos1, 12),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (set_show_messages, 0),
                   (team_give_order, 0, grc_archers, mordr_stand_ground),
                   (set_show_messages, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 3),
                   (try_begin),
                     (eq, "$tutorial_5_msg_4_displayed", 0),
                     (assign, "$tutorial_5_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_archers),
                   (entry_point_get_position, pos2, 11),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 12),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (modify_visitors_at_site,"scn_tutorial_5"),
                   (reset_visitors),
                   (set_visitor,8,"trp_bandit"),
                   (set_visitor,9,"trp_bandit"),
                   (set_visitor,10,"trp_bandit"),
                   (set_visitor,11,"trp_bandit"),
                   (team_give_order, 1, grc_everyone, mordr_charge),
                 (else_try),
                   (eq, "$tutorial_5_state", 4),
                   (try_begin),
                     (eq, "$tutorial_5_msg_5_displayed", 0),
                     (assign, "$tutorial_5_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (assign, ":enemy_count", 0),
                   (try_for_agents, ":cur_agent"),
                     (agent_is_human, ":cur_agent"),
                     (agent_is_alive, ":cur_agent"),
                     (agent_get_team, ":cur_team", ":cur_agent"),
                     (eq, ":cur_team", 1),
                     (val_add, ":enemy_count", 1),
                   (try_end),
                   (eq, ":enemy_count", 0),
                   (val_add, "$tutorial_5_state", 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 5),
                   (eq, "$tutorial_5_msg_6_displayed", 0),
                   (assign, "$tutorial_5_msg_6_displayed", 1),
                   (tutorial_message, "str_tutorial_5_msg_6"),
                   (play_sound, "snd_tutorial_2"),
                   (assign, "$tutorial_5_finished", 1),
                 (else_try),
                   (gt, "$tutorial_5_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "quick_battle_battle",mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 15),
         ]),

      common_battle_init_banner,

      (0, 0, ti_once, [],
        [
          (assign, "$g_battle_result", 0),
          (call_script, "script_combat_music_set_situation_with_culture"),
          (call_script, "script_init_death_cam"), #SB : add camera
         ]),

    (3, 0, 0, [
          (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (gt, ":agent_no", 0),       #jacobhinds edit; prevents MT errors
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),
            #(call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
            (call_script, "script_decide_run_away_or_not_vc", ":agent_no", ":mission_time"), #madsci
          (try_end),
              ], []), #controlling courage score and if needed deciding to run away for each agent

      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
	##diplomacy begin
	] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers,
	##diplomacy end
  ),

  (
    "quick_battle_siege", mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_mission_start,
      common_battle_init_banner,

      (0, 0, ti_once,
       [
         (assign, "$defender_team", 0),
         (assign, "$attacker_team", 1),
         (assign, "$defender_team_2", 2),
         (assign, "$attacker_team_2", 3),
         ], [
		  (call_script, "script_init_death_cam"), #SB : add camera
		 ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 15),
         ]),

      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,
      common_custom_siege_init,
      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
      common_siege_attacker_do_not_stall,
      common_siege_refill_ammo,
      common_siege_init_ai_and_belfry,
      common_siege_move_belfry,
      common_siege_rotate_belfry,
      common_siege_assign_men_to_belfry,
      common_siege_ai_trigger_init_2,
      ],
    ),

    (
    "multiplayer_dm",mtf_battle_mode,-1, #deathmatch mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      #multiplayer_server_check_belfry_movement,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (multiplayer_make_everyone_enemy),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"), # close this line and open map in deathmatch mod and use all ladders firstly
         ]),                                                            # to be able to edit maps without damaging any headquarters flags ext.

      (ti_after_mission_start, 0, 0, [],
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #ELITE_WARRIOR achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (player_get_kill_count, ":kill_count", ":my_player_no"),
           (player_get_death_count, ":death_count", ":my_player_no"),
           (store_mul, ":my_score_plus_death", ":kill_count", 1000),
           (val_sub, ":my_score_plus_death", ":death_count"),
           (assign, ":continue", 1),
           (get_max_players, ":num_players"),
           (assign, ":end_cond", ":num_players"),
           (try_for_range, ":player_no", 0, ":end_cond"),
             (player_is_active, ":player_no"),
             (player_get_team_no, ":player_team", ":player_no"),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (player_get_kill_count, ":kill_count", ":player_no"),
             (player_get_death_count, ":death_count", ":player_no"), #get_death_count
             (store_mul, ":player_score_plus_death", ":kill_count", 1000),
             (val_sub, ":player_score_plus_death", ":death_count"),
             (gt, ":player_score_plus_death", ":my_score_plus_death"),
             (assign, ":continue", 0),
             (assign, ":end_cond", 0), #break
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_ELITE_WARRIOR),
         (try_end),
         #ELITE_WARRIOR achievement end

         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         ]),

      #  Tests for set_shader_param_ operations
      #   (1, 0, 0, [],
      # [
      #  (str_store_string, s0, "@user_value_int"),
      #  (assign, ":int_param", 100),
      #  (assign, ":float_param", 100),
      #  (set_fixed_point_multiplier, 100),
      #  (set_shader_param_int, s0, ":int_param"),
      #  (set_shader_param_float, "@user_value_float", ":float_param"),
      #  (set_shader_param_float4, "@user_value_float4", 10, 20, 30, 40),
      #  (set_shader_param_float4x4, "@user_value_float4x4", 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120),
      #   ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"),
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1),
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      (0, 0, 0, [],
       [
         (multiplayer_is_server),
         (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
         (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
         (try_begin),
           (gt, ":total_req", 0),
           (store_random_in_range, ":random_req", 0, ":total_req"),
           (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
           (try_begin),
             (lt, ":random_req", 0),
             #add to team 1
             (assign, ":selected_team", 0),
             (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
           (else_try),
             #add to team 2
             (assign, ":selected_team", 1),
             (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
           (try_end),

           (team_get_faction, ":team_faction_no", ":selected_team"),
           (assign, ":available_troops_in_faction", 0),

           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_add, ":available_troops_in_faction", 1),
           (try_end),

           (store_random_in_range, ":random_troop_index", 0, ":available_troops_in_faction"),
           (assign, ":end_cond", multiplayer_ai_troops_end),
           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_sub, ":random_troop_index", 1),
             (lt, ":random_troop_index", 0),
             (assign, ":end_cond", 0),
             (assign, ":selected_troop", ":troop_no"),
           (try_end),

           (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"),
           (store_current_scene, ":cur_scene"),
           (modify_visitors_at_site, ":cur_scene"),
           (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", -1),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 0),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         #checking for restarting the map
         (assign, ":end_map", 0),
         (try_begin),
           (store_mission_timer_a, ":mission_timer"),
           (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
           (gt, ":mission_timer", ":game_max_seconds"),
           (assign, ":end_map", 1),
         (try_end),
         (try_begin),
           (eq, ":end_map", 1),
           (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
           (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
           (call_script, "script_game_set_multiplayer_mission_end"),
         (try_end),
         ]),

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),

    (
    "multiplayer_tdm",mtf_battle_mode,-1, #team_deathmatch mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #GLORIOUS_MOTHER_FACTION achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (team_get_score, ":team_1_score", 0),
           (team_get_score, ":team_2_score", 1),
           (assign, ":continue", 0),
           (try_begin),
             (eq, ":my_player_team", 0),
             (gt, ":team_1_score", ":team_2_score"),
             (assign, ":continue", 1),
           (else_try),
             (eq, ":my_player_team", 1),
             (gt, ":team_2_score", ":team_1_score"),
             (assign, ":continue", 1),
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_GLORIOUS_MOTHER_FACTION),
         (try_end),
         #GLORIOUS_MOTHER_FACTION achievement end

         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         #adding 1 score points to killer agent's team. (special for "headquarters" and "team deathmatch" mod)
         (try_begin),
           (ge, ":killer_agent_no", 0),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
           (le, ":killer_agent_team", 1), #0 or 1 is ok
           (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (team_get_score, ":team_score", ":killer_agent_team"),
           (val_add, ":team_score", 1),
           (team_set_score, ":killer_agent_team", ":team_score"),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":is_horseman"),
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1),
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 20 seconds (tdm)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      multiplayer_battle_window_opened,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),

  (
    "multiplayer_hq", mtf_battle_mode,-1, #headquarters mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (store_mul, ":initial_hq_score", "$g_multiplayer_game_max_points", 10000),

         (assign, "$g_score_team_1", ":initial_hq_score"),
         (assign, "$g_score_team_2", ":initial_hq_score"),

         (try_for_range, ":cur_flag_slot", multi_data_flag_owner_begin, multi_data_flag_owner_end),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (try_for_range, ":cur_flag_slot", multi_data_flag_pull_code_begin, multi_data_flag_pull_code_end),
             (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
           (try_end),
         (try_end),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),

         (try_begin),
           (multiplayer_is_server),
           (team_set_score, 0, "$g_multiplayer_game_max_points"),
           (team_set_score, 1, "$g_multiplayer_game_max_points"),
         (try_end),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, "$team_1_flag_scene_prop"), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to $team_1_flag_scene_prop
         (set_spawn_effector_scene_prop_kind, 1, "$team_2_flag_scene_prop"), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to $team_2_flag_scene_prop

         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),

           (assign, "$g_number_of_flags", 0),

           #place base flags
           (entry_point_get_position, pos1, multi_base_point_team_1),
           (entry_point_get_position, pos3, multi_base_point_team_1),

           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),

           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
           (val_add, "$g_number_of_flags", 1),

           (entry_point_get_position, pos2, multi_base_point_team_2),
           (entry_point_get_position, pos3, multi_base_point_team_2),

           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
           (val_add, "$g_number_of_flags", 1),

           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (store_add, ":end_cond", "spr_headquarters_flag_gray", 1),
           (try_for_range, ":headquarters_flag_no", "spr_headquarters_flag_red", ":end_cond"),
             (try_begin),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_red_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_blue_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_gray_headquarters_flag"),
             (try_end),
             (gt, ":num_instances_of_headquarters_flag", 0),
             (try_for_range, ":instance_no", 0, ":num_instances_of_headquarters_flag"),
               (scene_prop_get_instance, ":flag_id", ":headquarters_flag_no", ":instance_no"),
               (prop_instance_get_position, pos0, ":flag_id"),

               (set_spawn_position, pos0),
               (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

               #place other flags
               (try_for_range, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red", ":end_cond"),
                 (set_spawn_position, pos0),
                 (try_begin),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red"),
                   (spawn_scene_prop, "$team_1_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_blue"),
                   (spawn_scene_prop, "$team_2_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_gray"),
                   (spawn_scene_prop, "spr_headquarters_flag_gray_code_only"),
                 (try_end),
               (try_end),

               #assign who owns this flag values
               (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
               (try_begin),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 0),
               (try_end),
               (val_add, "$g_number_of_flags", 1),
             (try_end),
           (try_end),

           (assign, "$g_number_of_initial_team_1_flags", 0),
           (assign, "$g_number_of_initial_team_2_flags", 0),

           (try_for_range, ":place_no", 0, "$g_number_of_flags"),
             (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":place_no"),
             (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),

             (try_begin),
               (eq, ":place_no", 0),
               (entry_point_get_position, pos0, multi_base_point_team_1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_1", ":flag_id"),
             (else_try),
               (eq, ":place_no", 1),
               (entry_point_get_position, pos0, multi_base_point_team_2),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_2", ":flag_id"),
             (else_try),
               (assign, ":flag_start_red", 2),
               (scene_prop_get_num_instances, ":num_initial_red_flags", "spr_headquarters_flag_red"),
               (store_add, ":flag_start_blue", ":flag_start_red", ":num_initial_red_flags"),
               (scene_prop_get_num_instances, ":num_initial_blue_flags", "spr_headquarters_flag_blue"),
               (store_add, ":flag_start_gray", ":flag_start_blue", ":num_initial_blue_flags"),
               (scene_prop_get_num_instances, ":num_initial_gray_flags", "spr_headquarters_flag_gray"),
               (try_begin),
                 (ge, ":place_no", ":flag_start_red"),
                 (gt, ":num_initial_red_flags", 0),
                 (store_sub, ":flag_no", ":place_no", ":flag_start_red"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_blue"),
                 (gt, ":num_initial_blue_flags", 0),
                 (store_sub, ":flag_no", ":place_no", ":flag_start_blue"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_gray"),
                 (gt, ":num_initial_gray_flags", 0),
                 (store_sub, ":flag_no", ":place_no", ":flag_start_gray"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
               (try_end),
               (prop_instance_get_position, pos0, ":flag_id"),
             (try_end),

             (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":place_no"),
             (prop_instance_set_position, ":pole_id", pos0),

             (position_move_z, pos0, multi_headquarters_pole_height),
             (try_begin),
               (eq, ":current_owner", 0),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
             (else_try),
               (eq, ":current_owner", 1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_1_flags", 1),
             (else_try),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_2_flags", 1),
             (try_end),
           (try_end),
         (else_try),
           #these three lines both used in calculation of $g_number_of_flags and below part removing of initially placed flags
           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (assign, "$g_number_of_flags", 2),
           (val_add, "$g_number_of_flags", ":num_instances_of_red_headquarters_flag"),
           (val_add, "$g_number_of_flags", ":num_instances_of_blue_headquarters_flag"),
           (val_add, "$g_number_of_flags", ":num_instances_of_gray_headquarters_flag"),
         (try_end),

         #remove initially placed flags
         (try_for_range, ":flag_no", 0, ":num_instances_of_red_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),
         (try_for_range, ":flag_no", 0, ":num_instances_of_blue_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),
         (try_for_range, ":flag_no", 0, ":num_instances_of_gray_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),

         (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
           (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", 0),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
       ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #RUIN_THE_RAID achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (call_script, "script_get_headquarters_scores"),
           (assign, ":team_1_num_flags", reg0),
           (assign, ":team_2_num_flags", reg1),
           (assign, ":continue", 0),
           (try_begin),
             (eq, ":my_player_team", 0),
             (gt, ":team_1_num_flags", ":team_2_num_flags"),
             (assign, ":continue", 1),
           (else_try),
             (eq, ":my_player_team", 1),
             (gt, ":team_2_num_flags", ":team_1_num_flags"),
             (assign, ":continue", 1),
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_RUIN_THE_RAID),
         (try_end),
         #RUIN_THE_RAID achievement end

         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         #adding 1 score points to killer agent's team. (special for "headquarters" and "team deathmatch" mod)
         (try_begin),
           (multiplayer_is_server),
           (ge, ":killer_agent_no", 0),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
           (le, ":killer_agent_team", 1), #0 or 1 is ok
           (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (team_get_score, ":team_score", ":dead_agent_team"),
           (try_begin),
             (eq, ":killer_agent_team", 0),
             (val_add, "$g_score_team_2", -10000), #if someone died from "team 2" then "team 2" loses 1 score point
           (else_try),
             (val_add, "$g_score_team_1", -10000), #if someone died from "team 1" then "team 1" loses 1 score point
           (try_end),
           (val_sub, ":team_score", 1),

           (get_max_players, ":num_players"),

           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", ":dead_agent_team", ":team_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, ":dead_agent_team", ":team_score"),
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [],
      [
        (multiplayer_is_server),
        #trigger for (a) counting seconds of flags being owned by their owners & (b) to calculate seconds past after that flag's pull message has shown
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          #part a: counting seconds of flags being owned by their owners
          (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owned_seconds", "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot"),
          (val_add, ":cur_flag_owned_seconds", 1),
          (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", ":cur_flag_owned_seconds"),
          #part b: to calculate seconds past after that flag's pull message has shown
          (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
          (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
          (try_begin),
            (ge, ":cur_flag_pull_code", 100),
            (lt, ":cur_flag_pull_message_seconds_past", 25),
            (val_add, ":cur_flag_pull_code", 1),
            (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":cur_flag_pull_code"),
          (try_end),
        (try_end),
      ]),

      (0, 0, 0, [], #if this trigger takes lots of time in the future and make server machine runs headqurters mod
                    #very slow with lots of players make period of this trigger 1 seconds, but best is 0. Currently
                    #we are testing this mod with few players and no speed program occured.
      [
        (multiplayer_is_server),
        #main trigger which controls which agent is moving/near which flag.
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
          (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
          (store_div, ":old_team_1_agent_count", ":current_owner_code", 100),
          (store_mod, ":old_team_2_agent_count", ":current_owner_code", 100),

          (assign, ":number_of_agents_around_flag_team_1", 0),
          (assign, ":number_of_agents_around_flag_team_2", 0),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":cur_agent", ":player_no"),
            (ge, ":cur_agent", 0),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
            (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
            (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
            (val_add, ":squared_dist", ":squared_height_dist"),
            (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
            (try_begin),
              (eq, ":cur_agent_team", 0),
              (val_add, ":number_of_agents_around_flag_team_1", 1),
            (else_try),
              (eq, ":cur_agent_team", 1),
              (val_add, ":number_of_agents_around_flag_team_2", 1),
            (try_end),
          (try_end),

          (try_begin),
            (this_or_next|neq, ":old_team_1_agent_count", ":number_of_agents_around_flag_team_1"),
            (neq, ":old_team_2_agent_count", ":number_of_agents_around_flag_team_2"),

            (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

            (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
            (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
            (store_div, ":cur_flag_puller_team_last", ":cur_flag_pull_code", 100),

            (try_begin),
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":cur_flag_owner", 1),
                (eq, ":old_team_1_agent_count", 0),
                (gt, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":puller_team", 1),
                (assign, ":continue", 1),
              (else_try),
                (neq, ":cur_flag_owner", 2),
                (eq, ":old_team_2_agent_count", 0),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (gt, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":puller_team", 2),
                (assign, ":continue", 1),
              (try_end),

              (eq, ":continue", 1),

              (store_mul, ":puller_team_multiplied_by_100", ":puller_team", 100),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":puller_team_multiplied_by_100"),

              (this_or_next|neq, ":cur_flag_puller_team_last", ":puller_team"),
              (ge, ":cur_flag_pull_message_seconds_past", 25),

              (store_mul, ":flag_code", ":puller_team", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_is_pulling, ":flag_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_is_pulling, ":flag_code"),
              (try_end),
            (try_end),

            (try_begin),
              (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
              (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),

              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (get_max_players, ":num_players"),
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (assign, ":new_flag_owner", -1),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

          (try_begin),
            (try_begin),
              (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 1),
              (eq, ":flag_visibility", 0),
              (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 2),
              (eq, ":flag_visibility", 0),
              (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 0),
            (try_end),

            #flag_id holds shown flag after this point
            (prop_instance_get_position, pos1, ":flag_id"), #pos1 holds gray/red/blue (current shown) flag position.

            (try_begin),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
              (lt, ":squared_dist", multi_headquarters_distance_sq_to_change_flag), #if distance is less than 2 meters

              (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
              (troop_get_slot, ":cur_flag_players_around", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
              (store_div, ":number_of_agents_around_flag_team_1", ":cur_flag_players_around", 100),
              (store_mod, ":number_of_agents_around_flag_team_2", ":cur_flag_players_around", 100),

              (try_begin),
                (gt, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 1),
              (else_try),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (gt, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 2),
              (else_try),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (neq, ":cur_shown_flag", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 0),
              (try_end),
            (else_try),
              (neq, ":cur_flag_owner", ":cur_shown_flag"),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
              (ge, ":squared_dist", multi_headquarters_distance_sq_to_set_flag), #if distance is more equal than 9 meters

              (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
              (troop_get_slot, ":cur_flag_players_around", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
              (store_div, ":number_of_agents_around_flag_team_1", ":cur_flag_players_around", 100),
              (store_mod, ":number_of_agents_around_flag_team_2", ":cur_flag_players_around", 100),

              (try_begin),
                (eq, ":cur_shown_flag", 1),
                (assign, ":new_flag_owner", 1),
                (assign, ":new_shown_flag", 1),
              (else_try),
                (eq, ":cur_shown_flag", 2),
                (assign, ":new_flag_owner", 2),
                (assign, ":new_shown_flag", 2),
              (try_end),
            (try_end),
          (try_end),

          (try_begin),
            (ge, ":new_flag_owner", 0),
            (this_or_next|neq, ":new_flag_owner", ":cur_flag_owner"),
            (neq, ":cur_shown_flag", ":new_shown_flag"),

            (try_begin),
              (neq, ":cur_flag_owner", 0),
              (eq, ":new_flag_owner", 0),
              (try_begin),
                (eq, ":cur_flag_owner", 1),
                (assign, ":neutralizer_team", 2),
              (else_try),
                (eq, ":cur_flag_owner", 2),
                (assign, ":neutralizer_team", 1),
              (try_end),
              (store_mul, ":flag_code", ":neutralizer_team", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_neutralized, ":flag_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (get_max_players, ":num_players"),
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_neutralized, ":flag_code"),
              (try_end),
            (try_end),

            (try_begin),
              (neq, ":cur_flag_owner", ":new_flag_owner"),
              (neq, ":new_flag_owner", 0),
              (store_mul, ":flag_code", ":new_flag_owner", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_captured, ":flag_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (get_max_players, ":num_players"),
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_captured, ":flag_code"),
              (try_end),
            (try_end),

            #for only server itself-----------------------------------------------------------------------------------------------
            (call_script, "script_set_num_agents_around_flag", ":flag_no", ":cur_flag_players_around"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (assign, ":number_of_total_players", 0),
            (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
              (player_is_active, ":player_no"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":cur_flag_players_around"),
              (val_add, ":number_of_total_players", 1),
            (try_end),

            (store_mul, ":owner_code", ":new_flag_owner", 100),
            (val_add, ":owner_code", ":new_shown_flag"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (call_script, "script_change_flag_owner", ":flag_no", ":owner_code"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
              (player_is_active, ":player_no"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_change_flag_owner, ":flag_no", ":owner_code"),
            (try_end),

            (try_begin),
              (neq, ":new_flag_owner", 0),

              (try_begin),
                (eq, ":new_flag_owner", 1),
                (assign, ":number_of_players_around_flag", ":number_of_agents_around_flag_team_1"),
              (else_try),
                (assign, ":number_of_players_around_flag", ":number_of_agents_around_flag_team_2"),
              (try_end),

              (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
              (troop_get_slot, ":current_flag_owned_seconds", "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot"),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", 0),

              (val_min, ":current_flag_owned_seconds", 360), #360 seconds is max time for hq, this will limit money awarding by (180 x total_number_of_players)

              (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),
              (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),

              (try_begin),
                (this_or_next|eq, "$g_base_flag_team_1", ":flag_of_team_1"),
                (eq, "$g_base_flag_team_2", ":flag_of_team_2"),
                (assign, ":flag_value", 2),
              (else_try),
                (assign, ":flag_value", 1),
              (try_end),

              (try_begin),                                #score awarding in flag capturing is changed in hq. If only one player captured flag he get 3 points,
                (le, ":number_of_players_around_flag", 1),   #if 2 player captured they get 2 points, if <=6 players get flag all get 1 points. There is no importance of flag value at scoring.
                (assign, ":score_award_per_player", 3),
              (else_try),
                (eq, ":number_of_players_around_flag", 2),
                (assign, ":score_award_per_player", 2),
              (else_try),
                (le, ":number_of_players_around_flag", 6),
                (assign, ":score_award_per_player", 1),
              (else_try),
                (assign, ":score_award_per_player", 0),
              (try_end),

              (store_mul, ":total_money_award", ":current_flag_owned_seconds", ":number_of_total_players"), #total money will be shared after a flag capturing is (0.50 * seconds * number_of_players)
              (val_mul, ":total_money_award", ":flag_value"),                                               #example: if 15 players is playing and 120 seconds past before flag captured, award is 900 golds.
              (val_div, ":total_money_award", 2),

              (try_begin),
                (gt, ":number_of_players_around_flag", 0), #if there are still any living agents around flag.
                (store_div, ":money_award_per_player", ":total_money_award", ":number_of_players_around_flag"),
              (try_end),

              (get_max_players, ":num_players"),
                (try_for_range, ":player_no", 0, ":num_players"),
                (player_is_active, ":player_no"),
                (player_get_agent_id, ":cur_agent", ":player_no"),
                (ge, ":cur_agent", 0),
                (agent_get_team, ":cur_agent_team", ":cur_agent"),
                (val_add, ":cur_agent_team", 1),
                (eq, ":cur_agent_team", ":new_flag_owner"),
                (agent_get_position, pos1, ":cur_agent"),
                (prop_instance_get_position, pos0, ":pole_id"),
                (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
                (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
                (val_add, ":squared_dist", ":squared_height_dist"),
                (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
                (player_get_score, ":player_score", ":player_no"), #give score to player which helped flag to be owned by new_flag_owner team
                (val_add, ":player_score", ":score_award_per_player"),
                (player_set_score, ":player_no", ":player_score"),
                (player_get_gold, ":player_gold", ":player_no"), #give money to player which helped flag to be owned by new_flag_owner team
                (val_add, ":player_gold", ":money_award_per_player"),
                (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
        #trigger for increasing score in each second.
        (assign, ":number_of_team_1_flags", 0),
        (assign, ":number_of_team_2_flags", 0),

        (assign, ":owned_flag_value", 0),
        (assign, ":not_owned_flag_value", 0),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

          (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),
          (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),

          (try_begin),
            (this_or_next|eq, "$g_base_flag_team_1", ":flag_of_team_1"),
            (eq, "$g_base_flag_team_2", ":flag_of_team_2"),
            (assign, ":flag_value", 2),
          (else_try),
            (assign, ":flag_value", 1),
          (try_end),

          (try_begin),
            (eq, ":cur_flag_owner", 1),
            (val_add, ":number_of_team_1_flags", ":flag_value"),
            (val_add, ":owned_flag_value", ":flag_value"),
          (else_try),
            (eq, ":cur_flag_owner", 2),
            (val_add, ":number_of_team_2_flags", ":flag_value"),
            (val_add, ":owned_flag_value", ":flag_value"),
          (else_try),
            (val_add, ":not_owned_flag_value", ":flag_value"),
          (try_end),
        (try_end),

        (store_add, ":all_flag_value", ":owned_flag_value", ":not_owned_flag_value"),
        (store_sub, ":cur_flag_difference", ":number_of_team_1_flags", ":number_of_team_2_flags"),
        (store_mul, ":cur_flag_difference_mul_2", ":cur_flag_difference", 2),
        (store_sub, ":initial_flag_difference", "$g_number_of_initial_team_1_flags", "$g_number_of_initial_team_2_flags"),

        (assign, ":number_of_active_players", 0),
        (get_max_players, ":end_cond"),
        (try_for_range, ":player_no", 0, ":end_cond"),
          (player_is_active, ":player_no"),
          (val_add, ":number_of_active_players", 1),
          (assign, ":end_cond", 0),
        (try_end),

        (try_begin),
          (ge, ":cur_flag_difference_mul_2", ":initial_flag_difference"),
          (store_sub, ":difference", ":cur_flag_difference_mul_2", ":initial_flag_difference"),
          (store_mul, ":score_addition_winner", ":difference", 125),
          (val_add, ":score_addition_winner", 500),
          (store_div, ":score_addition_loser", 250000, ":score_addition_winner"),

          (try_begin), #if number of owned flag values < all flag values give only a percentage of score to teams
            (lt, ":owned_flag_value", ":all_flag_value"),
            (val_mul, ":score_addition_loser", ":owned_flag_value"),
            (val_div, ":score_addition_loser", ":all_flag_value"),
            (val_mul, ":score_addition_winner", ":owned_flag_value"),
            (val_div, ":score_addition_winner", ":all_flag_value"),
          (try_end),

          (call_script, "script_find_number_of_agents_constant"),
          (val_mul, ":score_addition_winner", reg0),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", reg0),
          (val_div, ":score_addition_loser", 100),

          (val_mul, ":score_addition_winner", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_loser", 100),

          (try_begin),
            (ge, ":number_of_active_players", 1),
            (val_sub, "$g_score_team_2", ":score_addition_winner"),
            (try_begin),
              (ge, ":number_of_team_2_flags", 1),
              (val_sub, "$g_score_team_1", ":score_addition_loser"),
            (else_try),
              (val_sub, "$g_score_team_2", ":score_addition_loser"),
            (try_end),
          (try_end),
        (else_try),
          (store_sub, ":difference", ":initial_flag_difference", ":cur_flag_difference_mul_2"),
          (store_mul, ":score_addition_winner", ":difference", 125),
          (val_add, ":score_addition_winner", 500),
          (store_div, ":score_addition_loser", 250000, ":score_addition_winner"),

          (try_begin), #if number of owned flag values < all flag values give only a percentage of score to teams
            (lt, ":owned_flag_value", ":all_flag_value"),
            (val_mul, ":score_addition_loser", ":owned_flag_value"),
            (val_div, ":score_addition_loser", ":all_flag_value"),
            (val_mul, ":score_addition_winner", ":owned_flag_value"),
            (val_div, ":score_addition_winner", ":all_flag_value"),
          (try_end),

          (call_script, "script_find_number_of_agents_constant"),
          (val_mul, ":score_addition_winner", reg0),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", reg0),
          (val_div, ":score_addition_loser", 100),

          (val_mul, ":score_addition_winner", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_loser", 100),

          (try_begin),
            (ge, ":number_of_active_players", 1),
            (try_begin),
              (ge, ":number_of_team_1_flags", 1),
              (val_sub, "$g_score_team_2", ":score_addition_loser"),
            (else_try),
              (val_sub, "$g_score_team_1", ":score_addition_loser"),
            (try_end),
            (val_sub, "$g_score_team_1", ":score_addition_winner"),
          (try_end),
        (try_end),

        (team_get_score, ":team_score_1", 0),
        (try_begin),
          (store_div, ":team_new_score_1", "$g_score_team_1", 10000),
          (neq, ":team_new_score_1", ":team_score_1"),
          (get_max_players, ":num_players"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (call_script, "script_team_set_score", 0, ":team_new_score_1"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
            (player_is_active, ":player_no"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_new_score_1"),
          (try_end),
        (try_end),

        (team_get_score, ":team_score_2", 1),
        (try_begin),
          (store_div, ":team_new_score_2", "$g_score_team_2", 10000),
          (neq, ":team_new_score_2", ":team_score_2"),
          (get_max_players, ":num_players"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (call_script, "script_team_set_score", 1, ":team_new_score_2"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
            (player_is_active, ":player_no"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_new_score_2"),
          (try_end),
        (try_end),
      ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"),
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), #new died (< g_multiplayer_respawn_period) so will be counted too
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 10 seconds (hq)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      multiplayer_battle_window_opened,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),

    (
    "multiplayer_cf",mtf_battle_mode,-1, #capture_the_flag mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (64,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (65,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (try_begin),
           (multiplayer_is_server),
           (store_current_scene, ":cur_scene"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_plain_medium"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_plain_large"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_steppe_medium"),
           (eq, ":cur_scene", "scn_random_multi_steppe_large"),
           (entry_point_get_position, pos0, 0),
           (entry_point_set_position, 64, pos0),
           (entry_point_get_position, pos1, 32),
           (entry_point_set_position, 65, pos1),
         (try_end),

         (assign, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$flag_1_at_ground_timer", 0),
         (assign, "$flag_2_at_ground_timer", 0),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),

           (entry_point_get_position, pos0, multi_base_point_team_1),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),

           (entry_point_get_position, pos0, multi_base_point_team_2),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin),                                 #when an agent dies which carrying a flag, assign flag position to current position with
           (agent_is_human, ":dead_agent_no"),        #ground level z and do not change it again according to dead agent's any coordinate/rotation.
           (agent_get_attached_scene_prop, ":attached_scene_prop", ":dead_agent_no"),
           (try_begin),
             (try_begin),
               (multiplayer_is_server),

               (ge, ":attached_scene_prop", 0), #moved from above after auto-set position

               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_attached_scene_prop", ":dead_agent_no", -1),
               (agent_set_horse_speed_factor, ":dead_agent_no", 100),
               #for only server itself-----------------------------------------------------------------------------------------------
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":dead_agent_no", -1),
               (try_end),

               (prop_instance_get_position, pos0, ":attached_scene_prop"), #moved from above to here after auto-set position
               (position_set_z_to_ground_level, pos0), #moved from above to here after auto-set position
               (prop_instance_set_position, ":attached_scene_prop", pos0), #moved from above to here after auto-set position

               (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
               (try_begin),
                 (eq, ":dead_agent_team", 0),
                 (assign, ":dead_agent_rival_team", 1),
               (else_try),
                 (assign, ":dead_agent_rival_team", 0),
               (try_end),
               (team_set_slot, ":dead_agent_rival_team", slot_team_flag_situation, 2), #2-flag at ground
               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_team_flag_situation", ":dead_agent_rival_team", 2),
               #for only server itself-----------------------------------------------------------------------------------------------
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":dead_agent_rival_team", 2), #flag at ground
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [], #returning flag if it is not touched by anyone in 60 seconds
       [
         (multiplayer_is_server),
         (try_for_range, ":team_no", 0, 2),
           (try_begin),
             (team_slot_eq, ":team_no", slot_team_flag_situation, 2),

             (assign, ":flag_team_no", -1),

             (try_begin),
               (eq, ":team_no", 0),
               (val_add, "$flag_1_at_ground_timer", 1),
               (ge, "$flag_1_at_ground_timer", multi_max_seconds_flag_can_stay_in_ground),
               (assign, ":flag_team_no", 0),
             (else_try),
               (val_add, "$flag_2_at_ground_timer", 1),
               (ge, "$flag_2_at_ground_timer", multi_max_seconds_flag_can_stay_in_ground),
               (assign, ":flag_team_no", 1),
             (try_end),

             (try_begin),
               (ge, ":flag_team_no", 0),

               (try_begin),
                 (eq, ":flag_team_no", 0),
                 (assign, "$flag_1_at_ground_timer", 0),
               (else_try),
                 (eq, ":flag_team_no", 1),
                 (assign, "$flag_2_at_ground_timer", 0),
               (try_end),

               #cur agent returned his own flag to its default position!
               (team_set_slot, ":flag_team_no", slot_team_flag_situation, 0), #0-flag at base

               #return team flag to its starting position.
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_team_flag_situation", ":flag_team_no", 0),
               #for only server itself-----------------------------------------------------------------------------------------------
               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":flag_team_no", 0),
               (try_end),

               (scene_prop_get_instance, ":flag_red_id", "$team_1_flag_scene_prop", 0),
               (scene_prop_get_instance, ":flag_blue_id", "$team_2_flag_scene_prop", 0),

               (assign, ":team_1_flag_id", ":flag_red_id"),
               (assign, ":team_1_base_entry_id", multi_base_point_team_1),

               (assign, ":team_2_flag_id", ":flag_blue_id"),
               (assign, ":team_2_base_entry_id", multi_base_point_team_2),

               #return team flag to its starting position.
               (try_begin),
                 (eq, ":flag_team_no", 0),
                 (entry_point_get_position, pos5, ":team_1_base_entry_id"), #moved from above to here after auto-set position
                 (prop_instance_set_position, ":team_1_flag_id", pos5), #moved from above to here after auto-set position
               (else_try),
                 (entry_point_get_position, pos5, ":team_2_base_entry_id"), #moved from above to here after auto-set position
                 (prop_instance_set_position, ":team_2_flag_id", pos5), #moved from above to here after auto-set position
               (try_end),

               #(team_get_faction, ":team_faction", ":flag_team_no"),
               #(str_store_faction_name, s1, ":team_faction"),
               #(tutorial_message_set_position, 500, 500),
               #(tutorial_message_set_size, 30, 30),
               #(tutorial_message_set_center_justify, 1),
               #(tutorial_message, "str_s1_returned_flag", 0xFFFFFFFF, 5),

               (store_mul, ":minus_flag_team_no", ":flag_team_no", -1),
               (val_sub, ":minus_flag_team_no", 1),

               #for only server itself
               (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_returned_home, ":minus_flag_team_no"),

               #no need to send also server here
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_returned_home, ":minus_flag_team_no"),
               (try_end),
             (try_end),
           (else_try),
             (try_begin),
               (eq, ":team_no", 0),
               (assign, "$flag_1_at_ground_timer", 0),
             (else_try),
               (assign, "$flag_2_at_ground_timer", 0),
             (try_end),
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"),
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), #new died (< g_multiplayer_respawn_period) so will be counted too
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (0, 0, 0, [], #control any agent captured flag or made score.
       [
         (multiplayer_is_server),
         (scene_prop_get_instance, ":flag_red_id", "$team_1_flag_scene_prop", 0),
         (prop_instance_get_position, pos1, ":flag_red_id"), #hold position of flag of team 1 (red flag) at pos1

         (scene_prop_get_instance, ":flag_blue_id", "$team_2_flag_scene_prop", 0),
         (prop_instance_get_position, pos2, ":flag_blue_id"), #hold position of flag of team 2 (blue flag) at pos2

         (multiplayer_get_my_player, ":my_player_no"),
         (get_max_players, ":num_players"),

         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"), #horses cannot take flag
           (agent_is_alive, ":cur_agent"),
           (neg|agent_is_non_player, ":cur_agent"), #for now bots cannot take flag or return flags to home.
           (agent_get_horse, ":cur_agent_horse", ":cur_agent"),
           (eq, ":cur_agent_horse", -1), #horseman cannot take flag
           (agent_get_attached_scene_prop, ":attached_scene_prop", ":cur_agent"),

           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_agent_team", 0),
             (assign, ":cur_agent_rival_team", 1),
           (else_try),
             (assign, ":cur_agent_rival_team", 0),
           (try_end),

           (try_begin),
             (eq, ":cur_agent_team", 0),
             (assign, ":our_flag_id", ":flag_red_id"),
             (assign, ":our_base_entry_id", multi_base_point_team_1),
           (else_try),
             (assign, ":our_flag_id", ":flag_blue_id"),
             (assign, ":our_base_entry_id", multi_base_point_team_2),
           (try_end),

           (agent_get_position, pos3, ":cur_agent"),
           (prop_instance_get_position, pos4, ":our_flag_id"),
           (get_distance_between_positions, ":dist", pos3, pos4),
           (team_get_slot, ":cur_agent_flag_situation", ":cur_agent_team", slot_team_flag_situation),

           (try_begin), #control if agent can return his own flag to default position
             (eq, ":cur_agent_flag_situation", 2), #if our flag is at ground
             (lt, ":dist", 100), #if this agent is near to his team's own flag

             #cur agent returned his own flag to its default position!
             (team_set_slot, ":cur_agent_team", slot_team_flag_situation, 0), #0-flag at base

             #return team flag to its starting position.
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_team", 0),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_team", 0),
             (try_end),

             #return team flag to its starting position.
             (entry_point_get_position, pos5, ":our_base_entry_id"), #moved from above to here after auto-set position
             (prop_instance_set_position, ":our_flag_id", pos5), #moved from above to here after auto-set position

             (try_begin), #give 1 score points to player which returns his/her flag to team base
               (multiplayer_is_server),
               (neg|agent_is_non_player, ":cur_agent"),
               (agent_get_player_id, ":cur_agent_player_id", ":cur_agent"),
               (player_get_score, ":cur_agent_player_score", ":cur_agent_player_id"),
               (val_add, ":cur_agent_player_score", multi_capture_the_flag_score_flag_returning),
               (player_set_score, ":cur_agent_player_id", ":cur_agent_player_score"),
             (try_end),

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_returned_flag", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_returned_home, ":cur_agent"),

             #no need to send also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_returned_home, ":cur_agent"),
             (try_end),
           (try_end),

           (try_begin), #control if agent carries flag and made score
             (neq, ":attached_scene_prop", -1), #if not agent is carrying anything

             (try_begin),
               (eq, ":cur_agent_team", 0),
               (assign, ":rival_flag_id", ":flag_blue_id"),
               (assign, ":rival_base_entry_id", multi_base_point_team_2),
             (else_try),
               (assign, ":rival_flag_id", ":flag_red_id"),
               (assign, ":rival_base_entry_id", multi_base_point_team_1),
             (try_end),

             (eq, ":attached_scene_prop", ":rival_flag_id"), #if agent is carrying rival flag
             (eq, ":cur_agent_flag_situation", 0), #if our flag is at home position
             (lt, ":dist", 100), #if this agent (carrying rival flag) is near to his team's own

             #cur_agent's team is scored!#
             (team_get_score, ":cur_agent_team_score", ":cur_agent_team"), #this agent's team scored
             (val_add, ":cur_agent_team_score", 1),
             (team_set_score, ":cur_agent_team", ":cur_agent_team_score"),

             (try_begin), #give 5 score points to player which connects two flag and make score to his/her team
               (multiplayer_is_server),
               (neg|agent_is_non_player, ":cur_agent"),
               (agent_get_player_id, ":cur_agent_player_id", ":cur_agent"),
               (player_get_score, ":cur_agent_player_score", ":cur_agent_player_id"),
               (val_add, ":cur_agent_player_score", "$g_multiplayer_point_gained_from_capturing_flag"),
               (player_set_score, ":cur_agent_player_id", ":cur_agent_player_score"),
             (try_end),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_team_set_score", ":cur_agent_team", ":cur_agent_team_score"),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, ":cur_agent_team", ":cur_agent_team_score"),
             (try_end),

             (agent_set_attached_scene_prop, ":cur_agent", -1),
             (team_set_slot, ":cur_agent_rival_team", slot_team_flag_situation, 0), #0-flag at base

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_attached_scene_prop", ":cur_agent", -1),
             (agent_set_horse_speed_factor, ":cur_agent", 100),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", -1),
             (try_end),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_rival_team", 0),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_rival_team", 0),
             (try_end),

             #return rival flag to its starting position
             (entry_point_get_position, pos5, ":rival_base_entry_id"), #moved from above to here after auto-set position
             (prop_instance_set_position, ":rival_flag_id", pos5), #moved from above to here after auto-set position

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(player_get_agent_id, ":my_player_agent", ":my_player_no"),
             #(try_begin),
             #  (ge, ":my_player_agent", 0),
             #  (agent_get_team, ":my_player_team", ":my_player_agent"),
             #  (try_begin),
             #    (eq, ":my_player_team", ":cur_agent_team"),
             #    (assign, ":text_font_color", 0xFF33DDFF),
             #  (else_try),
             #    (assign, ":text_font_color", 0xFFFF0000),
             #  (try_end),
             #(else_try),
             #  (assign, ":text_font_color", 0xFFFFFFFF),
             #(try_end),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_captured_flag", ":text_font_color", 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_capture_the_flag_score, ":cur_agent"),

             #no need to send to also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_capture_the_flag_score, ":cur_agent"),
             (try_end),
           (try_end),

           (eq, ":attached_scene_prop", -1), #agents carrying other scene prop cannot take flag.
           (agent_get_position, pos3, ":cur_agent"),
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_agent_team", 0), #if this agent is from team 1, look its distance to blue flag.
             (get_distance_between_positions, ":dist", pos2, pos3),
             (assign, ":rival_flag_id", ":flag_blue_id"),
           (else_try), #if this agent is from team 2, look its distance to red flag.
             (get_distance_between_positions, ":dist", pos1, pos3),
             (assign, ":rival_flag_id", ":flag_red_id"),
           (try_end),

           (try_begin),  #control if agent stole enemy flag
             (le, ":dist", 100),
             (neg|team_slot_eq, ":cur_agent_rival_team", slot_team_flag_situation, 1), #if flag is not already stolen.

             (agent_set_attached_scene_prop, ":cur_agent", ":rival_flag_id"),
             (agent_set_attached_scene_prop_x, ":cur_agent", 20),
             (agent_set_attached_scene_prop_z, ":cur_agent", 50),

             (try_begin),
               (eq, ":cur_agent_team", 0),
               (assign, "$flag_1_at_ground_timer", 0),
             (else_try),
               (eq, ":cur_agent_team", 1),
               (assign, "$flag_2_at_ground_timer", 0),
             (try_end),

             #cur_agent stole rival team's flag!
             (team_set_slot, ":cur_agent_rival_team", slot_team_flag_situation, 1), #1-stolen flag

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_attached_scene_prop", ":cur_agent", ":rival_flag_id"),
             (agent_set_horse_speed_factor, ":cur_agent", 75),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", ":rival_flag_id"),
             (try_end),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_rival_team", 1),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_rival_team", 1),
             (try_end),

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_taken_flag", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_capture_the_flag_stole, ":cur_agent"),

             #no need to send also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_capture_the_flag_stole, ":cur_agent"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 10 seconds (cf)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        (start_presentation, "prsnt_multiplayer_flag_projection_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),

    (
    "multiplayer_sg",mtf_battle_mode,-1, #siege
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source,0,aif_start_alarmed,1,[]),
     ],
    [
      multiplayer_server_check_belfry_movement,

      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),

         (try_begin),
           (multiplayer_is_server),
           (this_or_next|player_is_active, ":player_no"),
           (eq, ":player_no", 0),
           (store_mission_timer_a, ":round_time"),
           (val_sub, ":round_time", "$g_round_start_time"),
           (try_begin),
             (lt, ":round_time", 25),
             (assign, ":number_of_respawns_spent", 0),
           (else_try),
             (lt, ":round_time", 60),
             (assign, ":number_of_respawns_spent", 1),
           (else_try),
             (lt, ":round_time", 105),
             (assign, ":number_of_respawns_spent", 2),
           (else_try),
             (lt, ":round_time", 160),
             (assign, ":number_of_respawns_spent", 3),
           (else_try),
             (assign, ":number_of_respawns_spent", "$g_multiplayer_number_of_respawn_count"),
           (try_end),
           (player_set_slot, ":player_no", slot_player_spawn_count, ":number_of_respawns_spent"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_spent, ":number_of_respawns_spent"),
         (try_end),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (try_begin),
           (multiplayer_is_server),
           (try_for_range, ":cur_flag_slot", multi_data_flag_pull_code_begin, multi_data_flag_pull_code_end),
             (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
           (try_end),
           (assign, "$g_my_spawn_count", 0),
         (else_try),
           (assign, "$g_my_spawn_count", 0),
         (try_end),

         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (assign, "$g_flag_is_not_ready", 0),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_number_of_flags", 0),
         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),

           #place base flags
           (entry_point_get_position, pos1, multi_siege_flag_point),
           (set_spawn_position, pos1),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
           (position_move_z, pos1, multi_headquarters_pole_height),
           (set_spawn_position, pos1),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
         (try_end),
         (val_add, "$g_number_of_flags", 1),

         (try_begin),
           (multiplayer_is_server),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),
           (try_end),

           (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
           (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),
             (assign, "$g_my_spawn_count", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),

           (val_add, "$g_my_spawn_count", 1),

           (try_begin),
             (ge, "$g_my_spawn_count", "$g_multiplayer_number_of_respawn_count"),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (multiplayer_get_my_player, ":my_player_no"),
             (player_get_team_no, ":my_player_team_no", ":my_player_no"),
             (eq, ":my_player_team_no", 0),
             (assign, "$g_my_spawn_count", 999),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (player_set_slot, ":dead_agent_player_id", slot_player_spawned_this_round, 0),
         (try_end),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (0, 0, 0, [], #if this trigger takes lots of time in the future and make server machine runs siege mod
                    #very slow with lots of players make period of this trigger 1 seconds, but best is 0. Currently
                    #we are testing this mod with few players and no speed problem occured.
      [
        (multiplayer_is_server),
        (eq, "$g_round_ended", 0),
        #main trigger which controls which agent is moving/near which flag.
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
          (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
          (store_div, ":old_team_1_agent_count", ":current_owner_code", 100),
          (store_mod, ":old_team_2_agent_count", ":current_owner_code", 100),

          (assign, ":number_of_agents_around_flag_team_1", 0),
          (assign, ":number_of_agents_around_flag_team_2", 0),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":cur_agent", ":player_no"),
            (ge, ":cur_agent", 0),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
            (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
            (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
            (val_add, ":squared_dist", ":squared_height_dist"),
            (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
            (try_begin),
              (eq, ":cur_agent_team", 0),
              (val_add, ":number_of_agents_around_flag_team_1", 1),
            (else_try),
              (eq, ":cur_agent_team", 1),
              (val_add, ":number_of_agents_around_flag_team_2", 1),
            (try_end),
          (try_end),

          (try_begin),
            (this_or_next|neq, ":old_team_1_agent_count", ":number_of_agents_around_flag_team_1"),
            (neq, ":old_team_2_agent_count", ":number_of_agents_around_flag_team_2"),

            (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
            (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
            (store_div, ":cur_flag_puller_team_last", ":cur_flag_pull_code", 100),

            (try_begin),
              (eq, ":old_team_2_agent_count", 0),
              (gt, ":number_of_agents_around_flag_team_2", 0),
              (eq, ":number_of_agents_around_flag_team_1", 0),
              (assign, ":puller_team", 2),

              (store_mul, ":puller_team_multiplied_by_100", ":puller_team", 100),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":puller_team_multiplied_by_100"),

              (this_or_next|neq, ":cur_flag_puller_team_last", ":puller_team"),
              (ge, ":cur_flag_pull_message_seconds_past", 25),

              (store_mul, ":flag_code", ":puller_team", 100),
              (val_add, ":flag_code", ":flag_no"),
            (try_end),

            (try_begin),
              (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
              (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),
              (get_max_players, ":num_players"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (eq, "$g_round_ended", 0), #if round still continues and any team did not sucseed yet
          (eq, "$g_flag_is_not_ready", 0), #if round still continues and any team did not sucseed yet

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (try_begin),
            (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),

            #flag_id holds shown flag after this point
            (prop_instance_get_position, pos1, ":flag_id"), #pos1 holds gray/red/blue (current shown) flag position.
            (try_begin),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
              (lt, ":squared_dist", multi_headquarters_distance_sq_to_change_flag), #if distance is less than 2 meters

              (prop_instance_is_animating, ":is_animating", ":flag_id"),
              (eq, ":is_animating", 1),

              #end of round, attackers win
              (assign, "$g_winner_team", 1),
              (prop_instance_stop_animating, ":flag_id"),

              (get_max_players, ":num_players"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_draw_this_round", "$g_winner_team"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
              (try_end),

              (assign, "$g_flag_is_not_ready", 1),
            (try_end),
          (try_end),
        (try_end),
        ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),

           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),

      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_flag_is_not_ready", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds")],
       [
         (assign, ":flag_no", 0),
         (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
         (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
         (store_mod, ":team_2_agent_count_around_flag", ":current_owner_code", 100),

         (try_begin),
           (eq, ":team_2_agent_count_around_flag", 0),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),

           (assign, "$g_flag_is_not_ready", 1),

           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [],
      [
        (multiplayer_is_server),
        #trigger for calculating seconds past after that flag's pull message has shown
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
          (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
          (try_begin),
            (ge, ":cur_flag_pull_code", 100),
            (lt, ":cur_flag_pull_message_seconds_past", 25),
            (val_add, ":cur_flag_pull_code", 1),
            (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":cur_flag_pull_code"),
          (try_end),
        (try_end),
      ]),

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),
         (try_end),
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),

             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------
             (get_max_players, ":num_players"),
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),

             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),
         #team balance check part finished
         ]),

      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),
         (try_end),
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"),
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"),
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)

             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0),

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
           (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 0),
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),

           (try_begin),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (val_add, ":player_gold", ":per_round_gold_addition"),
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end

           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),

         #assigning everbody's spawn counts to 0
         (assign, "$g_my_spawn_count", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawn_count, 0),
         (try_end),

         #(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_initialize_objects"),

         #initialize moveable object positions
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
         (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
         (try_end),

         #initialize flag coordinates (move up the flag at pole)
         (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
           (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
           (prop_instance_get_position, pos1, ":pole_id"),
           (position_move_z, pos1, multi_headquarters_pole_height),
           (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
           (prop_instance_stop_animating, ":flag_id"),
           (prop_instance_set_position, ":flag_id", pos1),
         (try_end),

         (assign, "$g_round_ended", 0),

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start time for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999),
         (try_end),

         (assign, "$g_flag_is_not_ready", 0),
       ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),
           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),
           (player_get_agent_id, ":player_agent", ":player_no"), #new added for siege mod

           (assign, ":spawn_new", 0),
           (assign, ":num_active_players_in_team_0", 0),
           (assign, ":num_active_players_in_team_1", 0),
           (try_begin),
             (assign, ":num_active_players", 0),
             (get_max_players, ":num_players"),
             (try_for_range, ":cur_player", 0, ":num_players"),
               (player_is_active, ":cur_player"),

               (player_get_team_no, ":cur_player_team", ":cur_player"),
               (try_begin),
                 (eq, ":cur_player_team", 0),
                 (val_add, ":num_active_players_in_team_0", 1),
               (else_try),
                 (eq, ":cur_player_team", 1),
                 (val_add, ":num_active_players_in_team_1", 1),
               (try_end),

               (val_add, ":num_active_players", 1),
             (try_end),
             (store_mission_timer_a, ":round_time"),
             (val_sub, ":round_time", "$g_round_start_time"),

             (eq, "$g_round_ended", 0),

             (try_begin), #addition for siege mod to allow players spawn more than once (begin)
               (lt, ":player_agent", 0),

               (try_begin), #new added begin, to avoid siege-crack (rejoining of defenders when they die)
                 (eq, ":player_team", 0),
                 (player_get_slot, ":player_last_team_select_time", ":player_no", slot_player_last_team_select_time),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":elapsed_time", ":current_time", ":player_last_team_select_time"),

                 (assign, ":player_team_respawn_period", "$g_multiplayer_respawn_period"),
                 (val_add, ":player_team_respawn_period", multiplayer_siege_mod_defender_team_extra_respawn_time), #new added for siege mod
                 (lt, ":elapsed_time", ":player_team_respawn_period"),

                 (store_sub, ":round_time", ":current_time", "$g_round_start_time"),
                 (ge, ":round_time", multiplayer_new_agents_finish_spawning_time),
                 (gt, ":num_active_players", 2),
                 (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),
                 (neq, ":multipication_of_num_active_players_in_teams", 0),

                 (assign, ":spawn_new", 0),
               (else_try), #new added end
                 (assign, ":spawn_new", 1),
               (try_end),
             (else_try),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (assign, ":player_team_respawn_period", "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":player_team", 0),
                 (val_add, ":player_team_respawn_period", multiplayer_siege_mod_defender_team_extra_respawn_time),
               (try_end),
               (this_or_next|gt, ":elapsed_time", ":player_team_respawn_period"),
               (player_slot_eq, ":player_no", slot_player_spawned_at_siege_round, 0),
               (assign, ":spawn_new", 1),
             (try_end),
           (try_end), #addition for siege mod to allow players spawn more than once (end)

           (player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),

           (try_begin),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (try_begin),
               (eq, ":spawn_new", 1),
               (eq, ":player_team", 0),
               (ge, ":spawn_count", "$g_multiplayer_number_of_respawn_count"),
               (assign, ":spawn_new", 0),
             (else_try),
               (eq, ":spawn_new", 1),
               (eq, ":player_team", 1),
               (ge, ":spawn_count", 999),
               (assign, ":spawn_new", 0),
             (try_end),
           (try_end),

           (eq, ":spawn_new", 1),

           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),
           (val_add, ":spawn_count", 1),
           (player_set_slot, ":player_no", slot_player_spawn_count, ":spawn_count"),

           (try_begin),
             (ge, ":spawn_count", "$g_multiplayer_number_of_respawn_count"),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (eq, ":player_team", 0),
             (assign, ":spawn_count", 999),
             (player_set_slot, ":player_no", slot_player_spawn_count, ":spawn_count"),
           (try_end),

           (assign, ":player_is_horseman", 0),
           (player_get_item_id, ":item_id", ":player_no", ek_horse),
           (try_begin),
             (this_or_next|is_between, ":item_id", horses_begin, horses_end),
             (this_or_next|eq, ":item_id", "itm_warhorse_sarranid"),
             (eq, ":item_id", "itm_warhorse_steppe"),
             (assign, ":player_is_horseman", 1),
           (try_end),

           (try_begin),
             (lt, ":round_time", 20), #at start of game spawn at base entry point (only enemies)
             (try_begin),
               (eq, ":player_team", 0), #defenders in siege mod at start of round
               (call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":player_is_horseman"),
               (assign, ":entry_no", reg0),
             (else_try),
               (eq, ":player_team", 1), #attackers in siege mod at start of round
               (assign, ":entry_no", multi_initial_spawn_point_team_2), #change later
             (try_end),
           (else_try),
             (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":player_is_horseman"),
             (assign, ":entry_no", reg0),
           (try_end),

           (player_spawn_new_agent, ":player_no", ":entry_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 1),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1),
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      multiplayer_server_check_end_map,

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),

    (
    "multiplayer_bt",mtf_battle_mode,-1, #battle mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_battle),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (assign, "$g_battle_death_mode_started", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         (try_begin),
           (multiplayer_is_server),
           (assign, "$server_mission_timer_while_player_joined", 0),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),

           (entry_point_get_position, pos0, multi_death_mode_point),
           (position_set_z_to_ground_level, pos0),
           (position_move_z, pos0, -2000),

           (position_move_x, pos0, 100),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

           (position_move_x, pos0, -200),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

           (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
           (prop_instance_get_position, pos0, ":pole_1_id"),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (position_move_z, pos0, multi_headquarters_flag_initial_height),
           (prop_instance_set_position, reg0, pos0),

           (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
           (prop_instance_get_position, pos0, ":pole_2_id"),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
           (position_move_z, pos0, multi_headquarters_flag_initial_height),
           (prop_instance_set_position, reg0, pos0),

           (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
           (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         #Equipment cost fix
         (agent_set_slot, ":agent_no", slot_agent_bought_horse, -1),
         (try_begin),
             (multiplayer_is_server),
             (neg|agent_is_human, ":agent_no"),  #Spawned agent is horse
             (agent_get_rider, ":rider_agent_id", ":agent_no"),
             (agent_is_active, ":rider_agent_id"),
             (neg|agent_is_non_player, ":rider_agent_id"),
             (agent_get_player_id, ":rider_player_id", ":rider_agent_id"),
             (neg|player_item_slot_is_picked_up, ":rider_player_id", ek_horse),
             (agent_set_slot, ":rider_agent_id", slot_agent_bought_horse, ":agent_no"),

             #Debugging
             #(str_store_player_username, s0, ":rider_player_id"), #used in multiplayer mode only
             #(agent_get_item_id, ":my_mount_type", ":agent_no"), #(works only for horses, returns -1 otherwise)
             #(str_store_item_name, s1, ":my_mount_type"),
             #(multiplayer_send_string_to_player, ":rider_player_id", multiplayer_event_show_server_message, "@{s0} bought a {s1}"),
             ##
         (try_end),
         ###
         (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),

         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
             (try_begin),
               (eq, "$g_team_balance_next_round", 1),
               (assign, "$g_team_balance_next_round", 0),
             (try_end),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin), #count players and if round ended understand this.
           (agent_is_human, ":dead_agent_no"),
           (assign, ":team1_living_players", 0),
           (assign, ":team2_living_players", 0),
           (try_for_agents, ":cur_agent"),
             (agent_is_human, ":cur_agent"),
             (try_begin),
               (agent_is_alive, ":cur_agent"),
               (agent_get_team, ":cur_agent_team", ":cur_agent"),
               (try_begin),
                 (eq, ":cur_agent_team", 0),
               (val_add, ":team1_living_players", 1),
               (else_try),
                 (eq, ":cur_agent_team", 1),
                 (val_add, ":team2_living_players", 1),
               (try_end),
             (try_end),
           (try_end),
           (try_begin),
             (eq, "$g_round_ended", 0),
             (try_begin),
               (this_or_next|eq, ":team1_living_players", 0),
               (eq, ":team2_living_players", 0),
               (assign, "$g_winner_team", -1),
               (assign, reg0, "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":team1_living_players", 0),
                 (try_begin),
                   (neq, ":team2_living_players", 0),
                   (team_get_score, ":team_2_score", 1),
                   (val_add, ":team_2_score", 1),
                   (team_set_score, 1, ":team_2_score"),
                   (assign, "$g_winner_team", 1),
                 (try_end),

                 (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, "$g_winner_team"), #1 is winner team
                 (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
               (else_try),
                 (try_begin),
                   (neq, ":team1_living_players", 0),
                   (team_get_score, ":team_1_score", 0),
                   (val_add, ":team_1_score", 1),
                   (team_set_score, 0, ":team_1_score"),
                   (assign, "$g_winner_team", 0),
                 (try_end),

                 (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, "$g_winner_team"), #0 is winner team
                 (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
               (try_end),
               (store_mission_timer_a, "$g_round_finish_time"),
               (assign, "$g_round_ended", 1),
             (try_end),
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),

           (ge, ":dead_agent_no", 0),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (ge, ":dead_agent_player_id", 0),

           (set_fixed_point_multiplier, 100),

           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (agent_get_position, pos0, ":dead_agent_no"),

           (position_get_x, ":x_coor", pos0),
           (position_get_y, ":y_coor", pos0),
           (position_get_z, ":z_coor", pos0),

           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_x, ":x_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_y, ":y_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_z, ":z_coor"),
         (try_end),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds"),

                 (assign, ":overtime_needed", 0), #checking for if overtime is needed. Overtime happens when lower heighted flag is going up
                 (try_begin),
                   (eq, "$g_battle_death_mode_started", 2), #if death mod is currently open

                   (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
                   (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
                   (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
                   (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

                   (prop_instance_get_position, pos1, ":pole_1_id"),
                   (prop_instance_get_position, pos2, ":pole_2_id"),
                   (prop_instance_get_position, pos3, ":flag_1_id"),
                   (prop_instance_get_position, pos4, ":flag_2_id"),

                   (get_distance_between_positions, ":height_of_flag_1", pos1, pos3),
                   (get_distance_between_positions, ":height_of_flag_2", pos2, pos4),
                   (store_add, ":height_of_flag_1_plus", ":height_of_flag_1", min_allowed_flag_height_difference_to_make_score),
                   (store_add, ":height_of_flag_2_plus", ":height_of_flag_2", min_allowed_flag_height_difference_to_make_score),

                   (try_begin),
                     (le, ":height_of_flag_1", ":height_of_flag_2_plus"),
                     (prop_instance_is_animating, ":is_animating", ":flag_1_id"),
                     (eq, ":is_animating", 1),
                     (prop_instance_get_animation_target_position, pos5, ":flag_1_id"),
                     (position_get_z, ":flag_2_animation_target_z", pos5),
                     (position_get_z, ":flag_1_cur_z", pos3),
                     (ge, ":flag_2_animation_target_z", ":flag_1_cur_z"),
                     (assign, ":overtime_needed", 1),
                   (try_end),

                   (try_begin),
                     (le, ":height_of_flag_2", ":height_of_flag_1_plus"),
                     (prop_instance_is_animating, ":is_animating", ":flag_2_id"),
                     (eq, ":is_animating", 1),
                     (prop_instance_get_animation_target_position, pos5, ":flag_2_id"),
                     (position_get_z, ":flag_2_animation_target_z", pos5),
                     (position_get_z, ":flag_2_cur_z", pos4),
                     (ge, ":flag_2_animation_target_z", ":flag_2_cur_z"),
                     (assign, ":overtime_needed", 1),
                   (try_end),
                 (try_end),
                 (eq, ":overtime_needed", 0),
                 ],
       [ #round time is up
         (store_mission_timer_a, "$g_round_finish_time"),
         (assign, "$g_round_ended", 1),
         (assign, "$g_winner_team", -1),

         (try_begin), #checking for winning by death mod
           (eq, "$g_battle_death_mode_started", 2), #if death mod is currently open

           (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
           (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
           (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
           (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

           (prop_instance_get_position, pos1, ":pole_1_id"),
           (prop_instance_get_position, pos2, ":pole_2_id"),
           (prop_instance_get_position, pos3, ":flag_1_id"),
           (prop_instance_get_position, pos4, ":flag_2_id"),

           (get_distance_between_positions, ":height_of_flag_1", pos1, pos3),
           (get_distance_between_positions, ":height_of_flag_2", pos2, pos4),

           (try_begin),
             (ge, ":height_of_flag_1", ":height_of_flag_2"), #if flag_1 is higher than flag_2
             (store_sub, ":difference_of_heights", ":height_of_flag_1", ":height_of_flag_2"),
             (ge, ":difference_of_heights", min_allowed_flag_height_difference_to_make_score), #if difference between flag heights is greater than
             (assign, "$g_winner_team", 0),                                                    #"min_allowed_flag_height_difference_to_make_score" const value
           (else_try), #if flag_2 is higher than flag_1
             (store_sub, ":difference_of_heights", ":height_of_flag_2", ":height_of_flag_1"),
             (ge, ":difference_of_heights", min_allowed_flag_height_difference_to_make_score), #if difference between flag heights is greater than
             (assign, "$g_winner_team", 1),                                                    #"min_allowed_flag_height_difference_to_make_score" const value
           (try_end),
         (try_end),

         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", "$g_winner_team"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
         (try_end),
        ]),

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),
         (try_end),
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),

             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------
             (get_max_players, ":num_players"),
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),

             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),
         #team balance check part finished
         ]),

      #checking for starting "death mode part 1"
      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 0),
                 (store_mission_timer_a, ":seconds_past_till_round_started"),
                 (val_sub, ":seconds_past_till_round_started", "$g_round_start_time"),
                 (store_div, "$g_multiplayer_round_max_seconds_div_2", "$g_multiplayer_round_max_seconds", 2),
                 (ge, ":seconds_past_till_round_started", "$g_multiplayer_round_max_seconds_div_2")],
       [
         (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
         (assign, "$g_battle_death_mode_started", 1),
         ]),

      #checking during "death mode part 1" for entering "death mode part 2"
      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 1),
                 (store_mission_timer_a, ":seconds_past_till_death_mode_part_1_started"),
                 (val_sub, ":seconds_past_till_death_mode_part_1_started", "$g_death_mode_part_1_start_time"),
                 (store_add, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
                 (ge, ":seconds_past_till_death_mode_part_1_started", ":g_battle_waiting_seconds_plus_reduced_waiting_seconds"), #death mod start if anybody did not dies in "$g_battle_waiting_seconds" seconds
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_15", "$g_multiplayer_round_max_seconds", 15),
                 (lt, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_15")], #death mod cannot start at last 15 seconds
       [
         (assign, "$g_battle_death_mode_started", 2),
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_start_death_mode"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_start_death_mode),
         (try_end),

         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         #death mode started make 4 item related to death mode visible.
         (store_random_in_range, "$g_random_entry_point", 0, 3),
         (val_add, "$g_random_entry_point", multi_death_mode_point),

         (entry_point_get_position, pos0, "$g_random_entry_point"),
         (position_set_z_to_ground_level, pos0),

         (position_move_x, pos0, 100),
         (prop_instance_set_position, ":pole_1_id", pos0),

         (position_move_x, pos0, -200),
         (prop_instance_set_position, ":pole_2_id", pos0),

         (prop_instance_get_position, pos0, ":pole_1_id"),
         (position_move_z, pos0, multi_headquarters_flag_initial_height),
         (prop_instance_set_position, ":flag_1_id", pos0),

         (prop_instance_get_position, pos0, ":pole_2_id"),
         (position_move_z, pos0, multi_headquarters_flag_initial_height),
         (prop_instance_set_position, ":flag_2_id", pos0),

         (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
         ]),

      (3, 0, 0, [(multiplayer_is_server),  #this trigger is to reduce "$g_battle_waiting_seconds" at between last 66th and last 24th seconds 1 per 3 seconds, total 14 seconds.
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 1),

                 (store_mission_timer_a, ":seconds_past_till_death_mode_part_1_started"),
                 (val_sub, ":seconds_past_till_death_mode_part_1_started", "$g_death_mode_part_1_start_time"),
                 (store_add, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
                 (val_sub, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", 20), #in last 20 seconds to master of field below code effects
                 (ge, ":seconds_past_till_death_mode_part_1_started", ":g_battle_waiting_seconds_plus_reduced_waiting_seconds"),], #death mod start if anybody did not dies in "$g_battle_waiting_seconds" seconds
        [
                 (assign, ":there_are_fighting_agents", 0),

                 (try_for_agents, ":agent_no_1"),
                   (eq, ":there_are_fighting_agents", 0),
                   (agent_is_human, ":agent_no_1"),
                   (try_for_agents, ":agent_no_2"),
                     (agent_is_human, ":agent_no_2"),
                     (neq, ":agent_no_1", ":agent_no_2"),

                     (agent_get_team, ":agent_no_1_team", ":agent_no_1"),
                     (agent_get_team, ":agent_no_2_team", ":agent_no_2"),

                     (neq, ":agent_no_1_team", ":agent_no_2_team"),

                     (agent_get_position, pos1, ":agent_no_1"),
                     (agent_get_position, pos2, ":agent_no_2"),

                     (get_sq_distance_between_positions_in_meters, ":sq_dist_in_meters", pos1, pos2),

                     (le, ":sq_dist_in_meters", multi_max_sq_dist_between_agents_to_longer_mof_time),

                     (assign, ":there_are_fighting_agents", 1),
                   (try_end),
                 (try_end),

                 (try_begin),
                   (eq, ":there_are_fighting_agents", 1),
                   (val_add, "$g_reduced_waiting_seconds", 3),
                   #(display_message, "@{!}DEBUG : there are fighting agents"),
                 (try_end),
        ]),

      (3, 0, 0, [(multiplayer_is_server),  #this trigger is to reduce "$g_battle_waiting_seconds" at between last 66th and last 24th seconds 1 per 3 seconds, total 14 seconds.
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 1),

                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_60", "$g_multiplayer_round_max_seconds", 66),
                 (ge, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_60"),

                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_20", "$g_multiplayer_round_max_seconds", 24),
                 (le, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_20"),
                 ],
       [
         (val_add, "$g_reduced_waiting_seconds", 1),
         ]),

      (0, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 2)],
       [
         (set_fixed_point_multiplier, 100),
         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         (prop_instance_get_position, pos1, ":pole_1_id"),
         (prop_instance_get_position, pos2, ":pole_2_id"),
         (prop_instance_get_position, pos3, ":flag_1_id"),
         (prop_instance_get_position, pos4, ":flag_2_id"),

         (copy_position, pos7, pos1),
         (position_move_z, pos7, multi_headquarters_flag_initial_height),
         (copy_position, pos8, pos2),
         (position_move_z, pos8, multi_headquarters_flag_initial_height),

         (get_distance_between_positions, ":dist_1", pos1, pos3),
         (get_distance_between_positions, ":dist_2", pos2, pos4),

         (assign, ":there_are_agents_from_only_team_1_around_their_flag", 0),
         (assign, ":there_are_agents_from_only_team_2_around_their_flag", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":agent_id", ":player_no"),
           (ge, ":agent_id", 0),
           (agent_is_human, ":agent_id"),
           (agent_is_alive, ":agent_id"),
           (agent_get_team, ":agent_team", ":agent_id"),
           (agent_get_position, pos0, ":agent_id"),

           (agent_get_horse, ":agent_horse", ":agent_id"),
           (eq, ":agent_horse", -1), #horseman cannot move flag

           (try_begin),
             (eq, ":agent_team", 0),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_1 area, so flag_1 situation can be 1 or -2
                 (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_2 area, so flag_2 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (else_try),
             (eq, ":agent_team", 1),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag 2 area, so flag_2 situation can be 1 or -2
                 (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag_1 area, so flag_1 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         #controlling battle win by death mode conditions
         (try_begin),
           (ge, ":dist_1", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_1_score", 0),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 0, ":team_1_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_1_score"),
           (try_end),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (else_try),
           (ge, ":dist_2", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 1),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_2_score", 1),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 1, ":team_2_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_2_score"),
           (try_end),

           (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, 0), #0 is winner team
           (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (try_end),

         (try_begin),
           (eq, "$g_round_ended", 0),

           (position_get_z, ":flag_1_cur_z", pos3),
           (prop_instance_is_animating, ":is_animating", ":flag_1_id"),
           (try_begin), #if flag_1 is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_1_id"), #stop flag_1
           (else_try), #if flag_1 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1), #if there are agents from only team_2 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (gt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going up
             (get_distance_between_positions, ":time_1", pos3, pos7),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 16),
             (prop_instance_animate_to_position, ":flag_1_id", pos7, ":time_1"), #move flag_1 down
           (else_try), #if flag_1 is going down or stopping
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1), #if there is agents from only team_1 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (lt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going down
             (copy_position, pos5, pos1),
             (position_move_z, pos5, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_1", pos3, pos5),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 8),
             (prop_instance_animate_to_position, ":flag_1_id", pos5, ":time_1"), #move flag_1 up
           (try_end),

           (position_get_z, ":flag_2_cur_z", pos4),
           (prop_instance_is_animating, ":is_animating", ":flag_2_id"),
           (try_begin), #if flag is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_2_id"), #stop flag_2
           (else_try), #if flag_2 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -1), #if there are agents from only team_1 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (gt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going up
             (get_distance_between_positions, ":time_2", pos4, pos8),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 16),
             (prop_instance_animate_to_position, ":flag_2_id", pos8, ":time_2"), #move flag_2 down
           (else_try), #if flag_2 is going down or stopping
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1), #if there is agents from only team_2 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (lt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going down
             (copy_position, pos6, pos2),
             (position_move_z, pos6, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_2", pos4, pos6),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 8),
             (prop_instance_animate_to_position, ":flag_2_id", pos6, ":time_2"), #move flag_2 up
           (try_end),
         (try_end),
         ]),

      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),
         (try_end),
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             #(eq, "$g_team_balance_next_round", 1), #control if at pre round players are warned about team change.

             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"),
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"),
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)

             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0),

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),


         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (neq, ":player_no", -1), ##
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           #(player_get_value_of_original_items, ":old_items_value", ":player_no"),
           #(player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
           #Equipment cost fix
           (assign, reg0, 0),
           (player_get_troop_id, ":player_no_troop_id", ":player_no"),
           (call_script, "script_player_get_value_of_original_items", ":player_no", ":player_agent", ":player_no_troop_id"),
           (assign, ":old_items_value", reg0),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
           #Debugging
           #(multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, "@{reg0}g for your old items value added to your total gold"),
           ###
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_slot_eq, ":player_no", slot_player_spawned_this_round, 1),

           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),

           (try_begin),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (val_add, ":player_gold", ":per_round_gold_addition"),
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end
           # (get_max_players, ":num_players"),
           # (try_for_range, ":player_no", 0, ":num_players"),
             # (neq, ":player_no", -1), ##
             # (player_is_active, ":player_no"),
             # (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
             # (player_get_agent_id, ":player_agent", ":player_no"),
             # (ge, ":player_agent", 0),
             # (agent_is_alive, ":player_agent"),
             # (player_save_picked_up_items_for_next_spawn, ":player_no"),
             # #(player_get_value_of_original_items, ":old_items_value", ":player_no"),
             # #(player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
             # #Equipment cost fix
             # (player_get_agent_id, ":agent_no", ":player_no"),
             # (neq, ":agent_no", -1),
             # # (display_message, "@Calculating value of original items!"),
             # (player_get_troop_id, ":player_no_troop_id", ":player_no"),
             # (call_script, "script_player_get_value_of_original_items", ":player_no", ":agent_no", ":player_no_troop_id"),
             # (assign, ":old_items_value", reg0),
             # (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
             # ###
           # (try_end),
           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),

         (try_begin),
           (eq, "$g_battle_death_mode_started", 2),
           (call_script, "script_move_death_mode_flags_down"),
         (try_end),

         (assign, "$g_battle_death_mode_started", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         #initialize moveable object positions
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_round_ended", 0),

         (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start times for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999), #this will also initialize moveable object slots.
         (try_end),
       ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),

           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (try_begin),
             (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

             (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
             (lt, ":player_team", multi_team_spectator),

             (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
             (ge, ":player_troop", 0),

             (assign, ":spawn_new", 0),
             (assign, ":num_active_players_in_team_0", 0),
             (assign, ":num_active_players_in_team_1", 0),
             (try_begin),
               (assign, ":num_active_players", 0),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no_2", 0, ":num_players"),
                 (player_is_active, ":player_no_2"),
                 (val_add, ":num_active_players", 1),
                 (player_get_team_no, ":player_team_2", ":player_no_2"),
                 (try_begin),
                   (eq, ":player_team_2", 0),
                   (val_add, ":num_active_players_in_team_0", 1),
                 (else_try),
                   (eq, ":player_team_2", 1),
                   (val_add, ":num_active_players_in_team_1", 1),
                 (try_end),
               (try_end),

               (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),

               (store_mission_timer_a, ":round_time"),
               (val_sub, ":round_time", "$g_round_start_time"),

               (this_or_next|lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
               (this_or_next|le, ":num_active_players", 2),
               (eq, ":multipication_of_num_active_players_in_teams", 0),

               (eq, "$g_round_ended", 0),
               (assign, ":spawn_new", 1),
             (try_end),
             (eq, ":spawn_new", 1),
             (try_begin),
               (eq, ":player_team", 0),
               (assign, ":entry_no", multi_initial_spawn_point_team_1),
             (else_try),
               (eq, ":player_team", 1),
               (assign, ":entry_no", multi_initial_spawn_point_team_2),
             (try_end),
             (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
             (player_spawn_new_agent, ":player_no", ":entry_no"),
             (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (else_try), #spawning as a bot (if option ($g_multiplayer_player_respawn_as_bot) is 1)
             (eq, "$g_multiplayer_player_respawn_as_bot", 1),
             (player_get_agent_id, ":player_agent", ":player_no"),
             (ge, ":player_agent", 0),
             (neg|agent_is_alive, ":player_agent"),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
             (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),

             (player_get_team_no, ":player_team", ":player_no"),
             (assign, ":is_found", 0),
             (try_for_agents, ":cur_agent"),
               (eq, ":is_found", 0),
               (agent_is_alive, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_get_team ,":cur_team", ":cur_agent"),
               (eq, ":cur_team", ":player_team"),
               (assign, ":is_found", 1),
               #(player_control_agent, ":player_no", ":cur_agent"),
             (try_end),

             (try_begin),
               (eq, ":is_found", 1),
               (call_script, "script_find_most_suitable_bot_to_control", ":player_no"),
               (player_control_agent, ":player_no", reg0),

               (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
               (val_add, ":num_spawns", 1),
               (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      multiplayer_server_check_end_map,

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        (try_begin),
          (eq, "$g_battle_death_mode_started", 2),
          (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
        (try_end),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),


    (
    "multiplayer_fd",mtf_battle_mode,-1, #fight and destroy mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_destructible_target_1", "spr_catapult_destructible"),
         (assign, "$g_destructible_target_2", "spr_trebuchet_destructible"),

         #assigning destructible object team nos to 0. (0 is also used for showing defender team in siege mode)
         (scene_prop_get_num_instances, ":num_destructible_target_1", "$g_destructible_target_1"),
         (try_for_range, ":destructible_target_1_no", 0, ":num_destructible_target_1"),
           (scene_prop_get_instance, ":destructible_target_1_id", "$g_destructible_target_1", ":destructible_target_1_no"),
           (ge, ":destructible_target_1_id", 0),
           (scene_prop_set_team, ":destructible_target_1_id", 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_destructible_target_2", "$g_destructible_target_2"),
         (try_for_range, ":destructible_target_2_no", 0, ":num_destructible_target_2"),
           (scene_prop_get_instance, ":destructible_target_2_id", "$g_destructible_target_2", ":destructible_target_2_no"),
           (ge, ":destructible_target_2_id", 0),
           (scene_prop_set_team, ":destructible_target_2_id", 0),
         (try_end),

         (try_begin),
           (scene_prop_get_num_instances, ":num_catapults", "spr_catapult_destructible"),
           (ge, ":num_catapults", 1),
           (scene_prop_get_instance, ":catapult_scene_prop_id", "spr_catapult_destructible", 0),
           (scene_prop_get_team, "$g_defender_team", ":catapult_scene_prop_id"),
         (else_try),
           (scene_prop_get_num_instances, ":num_trebuchets", "spr_trebuchet_destructible"),
           (ge, ":num_trebuchets", 1),
           (scene_prop_get_instance, ":trebuchet_scene_prop_id", "spr_trebuchet_destructible", 0),
           (scene_prop_get_team, "$g_defender_team", ":trebuchet_scene_prop_id"),
         (try_end),

         (assign, "$g_number_of_targets_destroyed", 0),

         (try_begin),
           (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
           (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),
         (try_end),

         (start_presentation, "prsnt_multiplayer_destructible_targets_display"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
        ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines

             (start_presentation, "prsnt_multiplayer_destructible_targets_display"),
             (try_begin),
               (eq, "$g_team_balance_next_round", 1),
               (assign, "$g_team_balance_next_round", 0),
             (try_end),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin), #count players and if round ended understand this.
           (agent_is_human, ":dead_agent_no"),
           (assign, ":team1_living_players", 0),
           (assign, ":team2_living_players", 0),
           (try_for_agents, ":cur_agent"),
             (agent_is_human, ":cur_agent"),
             (try_begin),
               (agent_is_alive, ":cur_agent"),
               (agent_get_team, ":cur_agent_team", ":cur_agent"),
               (try_begin),
                 (eq, ":cur_agent_team", 0),
               (val_add, ":team1_living_players", 1),
               (else_try),
                 (eq, ":cur_agent_team", 1),
                 (val_add, ":team2_living_players", 1),
               (try_end),
             (try_end),
           (try_end),
           (try_begin),
             (eq, "$g_round_ended", 0),
             (try_begin),
               (this_or_next|eq, ":team1_living_players", 0),
               (eq, ":team2_living_players", 0),
               (assign, "$g_winner_team", -1),
               (assign, reg0, "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":team1_living_players", 0),
                 (try_begin),
                   (neq, ":team2_living_players", 0),
                   (assign, "$g_winner_team", 1),
                 (try_end),

                 (try_begin),
                   (eq, "$g_winner_team", -1),
                 (else_try),
                   (eq, "$g_defender_team", 1), #if defender team killed all attackers
                   (try_begin),
                     (neg|multiplayer_is_server),
                     (call_script, "script_calculate_number_of_targets_destroyed"),
                   (try_end),
                   (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), #1 or -1 is winner team
                 (else_try),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_attackers_won_the_round, 0), #1 or -1 is winner team
                 (try_end),
               (else_try),
                 (try_begin),
                   (neq, ":team1_living_players", 0),
                   (assign, "$g_winner_team", 0),
                 (try_end),

                 (try_begin),
                   (eq, "$g_winner_team", -1),
                 (else_try),
                   (eq, "$g_defender_team", 0), #if defender team killed all attackers
                   (try_begin),
                     (neg|multiplayer_is_server),
                     (call_script, "script_calculate_number_of_targets_destroyed"),
                   (try_end),
                   (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), #0 or -1 is winner team
                 (else_try),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_attackers_won_the_round, 0), #0 or -1 is winner team
                 (try_end),
               (try_end),
               (store_mission_timer_a, "$g_round_finish_time"),
               (assign, "$g_round_ended", 1),


               (try_begin), #destroy score (condition : remained no one)
                 (multiplayer_is_server),
                 (ge, "$g_winner_team", 0),
                 (lt, "$g_winner_team", 2),
                 (neq, "$g_winner_team", -1),

                 (team_get_score, ":team_score", "$g_winner_team"),
                 (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
                 (val_add, ":team_score", ":num_targets_remained"),

                 #for only server itself-----------------------------------------------------------------------------------------------
                 (call_script, "script_team_set_score", "$g_winner_team", ":team_score"),
                 #for only server itself-----------------------------------------------------------------------------------------------
                 (get_max_players, ":num_players"),
                 (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                   (player_is_active, ":player_no"),
                   (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, "$g_winner_team", ":team_score"),
                 (try_end),
               (try_end), #destroy score end


               (try_begin),
                 (neq, "$g_defender_team", "$g_winner_team"),
                 (neq, "$g_winner_team", -1),
                 (assign, "$g_number_of_targets_destroyed", 2),
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),

           (ge, ":dead_agent_no", 0),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (ge, ":dead_agent_player_id", 0),

           (set_fixed_point_multiplier, 100),

           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (agent_get_position, pos0, ":dead_agent_no"),

           (position_get_x, ":x_coor", pos0),
           (position_get_y, ":y_coor", pos0),
           (position_get_z, ":z_coor", pos0),

           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_x, ":x_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_y, ":y_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_z, ":z_coor"),
         (try_end),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),


      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_number_of_targets_destroyed", 2),
                 ],
       [
         (store_mission_timer_a, "$g_round_finish_time"),
         (assign, "$g_round_ended", 1),

         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", -9),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, -9),
         (try_end),
         ]),

      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds"),
                 ],
       [ #round time is up
         (store_mission_timer_a, "$g_round_finish_time"),
         (assign, "$g_round_ended", 1),
         (assign, "$g_winner_team", -9),

         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.

         (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"),
         (try_end),

         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", "$g_winner_team"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
         (try_end),

         (try_begin), #destroy score (condition : time is up)
           (multiplayer_is_server),
           (assign, "$g_winner_team", "$g_defender_team"),

           (team_get_score, ":team_score", "$g_winner_team"),
           (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
           (val_add, ":team_score", ":num_targets_remained"),

           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", "$g_winner_team", ":team_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, "$g_winner_team", ":team_score"),
           (try_end),
         (try_end), #destroy score end
        ]),

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),
         (try_end),
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),

             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------
             (get_max_players, ":num_players"),
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),

             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),
         #team balance check part finished
         ]),

      (0, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 2)],
       [
         (set_fixed_point_multiplier, 100),
         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         (prop_instance_get_position, pos1, ":pole_1_id"),
         (prop_instance_get_position, pos2, ":pole_2_id"),
         (prop_instance_get_position, pos3, ":flag_1_id"),
         (prop_instance_get_position, pos4, ":flag_2_id"),

         (copy_position, pos7, pos1),
         (position_move_z, pos7, multi_headquarters_flag_initial_height),
         (copy_position, pos8, pos2),
         (position_move_z, pos8, multi_headquarters_flag_initial_height),

         (get_distance_between_positions, ":dist_1", pos1, pos3),
         (get_distance_between_positions, ":dist_2", pos2, pos4),

         (assign, ":there_are_agents_from_only_team_1_around_their_flag", 0),
         (assign, ":there_are_agents_from_only_team_2_around_their_flag", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":agent_id", ":player_no"),
           (ge, ":agent_id", 0),
           (agent_is_human, ":agent_id"),
           (agent_is_alive, ":agent_id"),
           (agent_get_team, ":agent_team", ":agent_id"),
           (agent_get_position, pos0, ":agent_id"),

           (agent_get_horse, ":agent_horse", ":agent_id"),
           (eq, ":agent_horse", -1), #horseman cannot move flag

           (try_begin),
             (eq, ":agent_team", 0),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_1 area, so flag_1 situation can be 1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_2 area, so flag_2 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (else_try),
             (eq, ":agent_team", 1),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag 2 area, so flag_2 situation can be 1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag_1 area, so flag_1 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         #controlling battle win by death mode conditions
         (try_begin),
           (ge, ":dist_1", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_1_score", 0),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 0, ":team_1_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_1_score"),
           (try_end),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (else_try),
           (ge, ":dist_2", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 1),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_2_score", 1),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 1, ":team_2_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_2_score"),
           (try_end),

           (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, 0), #0 is winner team
           (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (try_end),

         (try_begin),
           (eq, "$g_round_ended", 0),

           (position_get_z, ":flag_1_cur_z", pos3),
           (prop_instance_is_animating, ":is_animating", ":flag_1_id"),
           (try_begin), #if flag_1 is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_1_id"), #stop flag_1
           (else_try), #if flag_1 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1), #if there are agents from only team_2 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (gt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going up
             (get_distance_between_positions, ":time_1", pos3, pos7),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 16),
             (prop_instance_animate_to_position, ":flag_1_id", pos7, ":time_1"), #move flag_1 down
           (else_try), #if flag_1 is going down or stopping
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1), #if there is agents from only team_1 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (lt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going down
             (copy_position, pos5, pos1),
             (position_move_z, pos5, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_1", pos3, pos5),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 8),
             (prop_instance_animate_to_position, ":flag_1_id", pos5, ":time_1"), #move flag_1 up
           (try_end),

           (position_get_z, ":flag_2_cur_z", pos4),
           (prop_instance_is_animating, ":is_animating", ":flag_2_id"),
           (try_begin), #if flag is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_2_id"), #stop flag_2
           (else_try), #if flag_2 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -1), #if there are agents from only team_1 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (gt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going up
             (get_distance_between_positions, ":time_2", pos4, pos8),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 16),
             (prop_instance_animate_to_position, ":flag_2_id", pos8, ":time_2"), #move flag_2 down
           (else_try), #if flag_2 is going down or stopping
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1), #if there is agents from only team_2 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (lt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going down
             (copy_position, pos6, pos2),
             (position_move_z, pos6, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_2", pos4, pos6),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 8),
             (prop_instance_animate_to_position, ":flag_2_id", pos6, ":time_2"), #move flag_2 up
           (try_end),
         (try_end),
         ]),

      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),
         (try_end),
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             #(eq, "$g_team_balance_next_round", 1), #control if at pre round players are warned about team change.

             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"),
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"),
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)

             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0),

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),

         (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
         (store_mul, ":defender_money_add", ":num_targets_remained", multi_destroy_save_or_destroy_target_money_add),
         (store_mul, ":attacker_money_add", "$g_number_of_targets_destroyed", multi_destroy_save_or_destroy_target_money_add),
         (val_add, ":defender_money_add", 100), #defenders cannot get money from destroying catapult thats why they get more money per round.
         (val_sub, ":attacker_money_add", 100), #attackers also get money from destroying catapult thats why they get less money per round.
         (get_max_players, ":num_players"),

         (val_mul, ":defender_money_add", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":defender_money_add", 100),
         (val_mul, ":attacker_money_add", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":attacker_money_add", 100),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
		   (player_slot_eq, ":player_no", slot_player_spawned_this_round, 1),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),
           (val_add, ":player_gold", ":per_round_gold_addition"), #standard
           (try_begin),
             (eq, ":player_team", "$g_defender_team"),
             (val_add, ":player_gold", ":defender_money_add"),
           (else_try),
             (val_add, ":player_gold", ":attacker_money_add"),
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end

           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_damage_given_to_target_1, 0),
           (player_set_slot, ":player_no", slot_player_damage_given_to_target_2, 0),
         (try_end),

         #initialize moveable object positions
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_round_ended", 0),

         (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),

         (start_presentation, "prsnt_multiplayer_destructible_targets_display"),

         #initializing catapult & trebuchet positions and hit points for destroy mod.
         (call_script, "script_initialize_objects"),

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start times for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999), #this will also initialize moveable object slots.
         (try_end),
       ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),

           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (try_begin),
             (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

             (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
             (lt, ":player_team", multi_team_spectator),

             (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
             (ge, ":player_troop", 0),

             (assign, ":spawn_new", 0),
             (assign, ":num_active_players_in_team_0", 0),
             (assign, ":num_active_players_in_team_1", 0),
             (try_begin),
               (assign, ":num_active_players", 0),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no_2", 0, ":num_players"),
                 (player_is_active, ":player_no_2"),
                 (val_add, ":num_active_players", 1),
                 (player_get_team_no, ":player_team_2", ":player_no_2"),
                 (try_begin),
                   (eq, ":player_team_2", 0),
                   (val_add, ":num_active_players_in_team_0", 1),
                 (else_try),
                   (eq, ":player_team_2", 1),
                   (val_add, ":num_active_players_in_team_1", 1),
                 (try_end),
               (try_end),

               (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),

               (store_mission_timer_a, ":round_time"),
               (val_sub, ":round_time", "$g_round_start_time"),

               (this_or_next|lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
               (this_or_next|le, ":num_active_players", 2),
               (eq, ":multipication_of_num_active_players_in_teams", 0),

               (eq, "$g_round_ended", 0),
               (assign, ":spawn_new", 1),
             (try_end),
             (eq, ":spawn_new", 1),
             (try_begin),
               (eq, ":player_team", 0),
               (assign, ":entry_no", multi_initial_spawn_point_team_1),
             (else_try),
               (eq, ":player_team", 1),
               (assign, ":entry_no", multi_initial_spawn_point_team_2),
             (try_end),
             (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
             (player_spawn_new_agent, ":player_no", ":entry_no"),
             (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (else_try), #spawning as a bot (if option ($g_multiplayer_player_respawn_as_bot) is 1)
             (eq, "$g_multiplayer_player_respawn_as_bot", 1),
             (player_get_agent_id, ":player_agent", ":player_no"),
             (ge, ":player_agent", 0),
             (neg|agent_is_alive, ":player_agent"),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
             (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),

             (player_get_team_no, ":player_team", ":player_no"),
             (assign, ":is_found", 0),
             (try_for_agents, ":cur_agent"),
               (eq, ":is_found", 0),
               (agent_is_alive, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_get_team ,":cur_team", ":cur_agent"),
               (eq, ":cur_team", ":player_team"),
               (assign, ":is_found", 1),
             (try_end),

             (try_begin),
               (eq, ":is_found", 1),
               (call_script, "script_find_most_suitable_bot_to_control", ":player_no"),
               (player_control_agent, ":player_no", reg0),

               (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
               (val_add, ":num_spawns", 1),
               (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      multiplayer_server_check_end_map,

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),

  (
    "bandit_lair",mtf_battle_mode|mtf_synch_inventory,charge,
    "Ambushing a bandit lair",
    [
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse, aif_start_alarmed, 7,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (6,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (7,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (8,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (9,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (10,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
    ], vc_weather +
    [
      common_battle_init_banner,

      common_inventory_not_available,

      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),

        (assign, "$relative_of_merchant_is_found", 0),

        (try_begin),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),

          (agent_get_position, pos4, ":agent_no"),
          (agent_set_scripted_destination, ":agent_no", pos4, 1),
        (try_end),

        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),
          (agent_set_team, ":agent_no", 7),
          (team_set_relation, 0, 7, 0),
        (try_end),
        ]),

	   (0, 0, 0,
	   [
         (party_get_template_id, ":template", "$g_encountered_party"),
         (eq, ":template", "pt_looter_lair"),
         (check_quest_active, "qst_save_relative_of_merchant"),
         (eq, "$relative_of_merchant_is_found", 0),
	   ],
	   [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),
          (agent_set_scripted_destination, ":agent_no", pos0),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 200),
          #(assign, "$g_talk_troop", "trp_relative_of_merchant"),
          (start_mission_conversation, "trp_relative_of_merchant"),
        (try_end),
	   ]),

      (ti_tab_pressed, 0, 0,
       [
        (display_message, "str_cannot_leave_now"),
       ], []),

      (1, 0, ti_once, [],
       [
        (assign, "$defender_reinforcement_stage", 0),
        (assign, "$bandits_spawned_extra", 0),
	   ]),

	   (1, 0, 0, [],
	   [
        (try_for_agents, ":bandit_id"),
          (agent_is_alive, ":bandit_id"),
          (agent_get_team, ":agent_team_1", ":bandit_id"),
          (eq, ":agent_team_1", 1),
          (agent_is_in_special_mode, ":bandit_id"),
          (agent_is_human, ":bandit_id"),

          (agent_get_position, pos0, ":bandit_id"),
          (try_for_agents, ":player_team_agent_id"),
            (agent_is_alive, ":player_team_agent_id"),
            (agent_get_team, ":agent_team_2", ":player_team_agent_id"),
            (eq, ":agent_team_2", 0),
            (agent_is_human, ":player_team_agent_id"),

            (store_agent_hit_points, ":bandit_hit_points", ":bandit_id"),

            (assign, ":continue", 0),
            (try_begin),
              (lt, ":bandit_hit_points", 100),

              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),

                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),

                (agent_clear_scripted_mode, ":bandit_2_id"),
              (try_end),

              (assign, ":continue", 1),
            (else_try),
              (agent_get_position, pos1, ":bandit_id"),
              (agent_get_position, pos2, ":player_team_agent_id"),
              (get_distance_between_positions, ":distance", pos1, pos2),
              (le, ":distance", 4000),

              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),

                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),

                (agent_clear_scripted_mode, ":bandit_2_id"),
              (try_end),

              (assign, ":continue", 1),
            (try_end),

            (eq, ":continue", 1),

            (agent_clear_scripted_mode, ":bandit_id"),
          (try_end),
        (try_end),
	   ]),

	   (30, 0, 0,
	   [
	     (le, "$defender_reinforcement_stage", 1),
	   ],
	   [
          (store_character_level, ":player_level", "trp_player"),
          (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
          (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),

          (lt, "$bandits_spawned_extra", ":number_of_bandits_will_be_spawned_at_each_period"),
          (val_add, "$bandits_spawned_extra", 1),

          (party_get_template_id, ":template", "$g_encountered_party"),
          (store_random_in_range, ":random_value", 0, 2),

          (try_begin),
            (eq, ":template", "pt_sea_raider_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_sea_raider"),
          (else_try),
            (eq, ":template", "pt_sea_raider_lair_2"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_sea_raider"),
          (else_try),
            (eq, ":template", "pt_forest_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_forest_bandit"),
          (else_try),
            (eq, ":template", "pt_desert_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_desert_bandit"),
          (else_try),
            (eq, ":template", "pt_mountain_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_mountain_bandit"),
          (else_try),
            (eq, ":template", "pt_taiga_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_taiga_bandit"),
          (else_try),
            (eq, ":template", "pt_steppe_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_steppe_bandit"),
          (else_try),
            (eq, ":template", "pt_sabir_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_sabir_bandit"),
          (else_try),
            (eq, ":template", "pt_armenian_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_armenian_brigand"),
          (else_try),
            (eq, ":template", "pt_coptic_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_coptic_footman"),
          (else_try),
            (eq, ":template", "pt_arab_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_arab_bandit"),
          (else_try),
            (this_or_next|eq, ":template", "pt_looter_lair"),
            (neq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_looter"),
          (else_try),
            (assign, ":bandit_troop", "trp_looter"),
          (try_end),

          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (store_random_in_range, ":random_entry_point", 2, 11),
          (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
       ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (try_begin),
            (neg|agent_is_ally, ":dead_agent_no"),
            (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
            (try_begin),
              (eq, ":is_wounded", 1),
              (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
            (try_end),
          (try_end),

          (party_add_members, "p_temp_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties

          (eq, ":is_wounded", 1),
          (party_wound_members, "p_temp_casualties", ":dead_agent_troop_id", 1),
        (try_end),

        (assign, ":number_of_enemies", 0),
        (try_for_agents, ":cur_agent"),
          (agent_is_non_player, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":number_of_enemies", 1),
        (try_end),

        (try_begin),
          (le, ":number_of_enemies", 2),
          (le, "$defender_reinforcement_stage", 1),
          (val_add, "$defender_reinforcement_stage", 1),

          (store_character_level, ":player_level", "trp_player"),
          (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
          (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),
          (try_begin),
            (ge, "$defender_reinforcement_stage", 2),
            (val_sub, ":number_of_bandits_will_be_spawned_at_each_period", "$bandits_spawned_extra"),
          (try_end),

          (party_get_template_id, ":template", "$g_encountered_party"),
          (store_random_in_range, ":random_value", 0, 2),

          (try_begin),
            (eq, ":template", "pt_sea_raider_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_sea_raider"),
          (else_try),
            (eq, ":template", "pt_sea_raider_lair_2"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_sea_raider"),
          (else_try),
            (eq, ":template", "pt_forest_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_forest_bandit"),
          (else_try),
            (eq, ":template", "pt_desert_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_desert_bandit"),
          (else_try),
            (eq, ":template", "pt_mountain_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_mountain_bandit"),
          (else_try),
            (eq, ":template", "pt_taiga_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_taiga_bandit"),
          (else_try),
            (eq, ":template", "pt_steppe_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_steppe_bandit"),
          (else_try),
            (eq, ":template", "pt_sabir_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_sabir_bandit"),
          (else_try),
            (eq, ":template", "pt_armenian_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_armenian_brigand"),
          (else_try),
            (eq, ":template", "pt_coptic_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_coptic_footman"),
          (else_try),
            (eq, ":template", "pt_arab_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_arab_bandit"),
          (else_try),
            (this_or_next|eq, ":template", "pt_looter_lair"),
            (neq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_looter"),
          (else_try),
            (assign, ":bandit_troop", "trp_looter"),
          (try_end),

          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (try_for_range, ":unused", 0, ":number_of_bandits_will_be_spawned_at_each_period"),
            (store_random_in_range, ":random_entry_point", 2, 11),
            (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
          (try_end),
        (try_end),

        #no need to adjust courage in bandit lair for now
        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
       ]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),

      (2, 0, ti_once,
       [
         (neg|main_hero_fallen),
         (num_active_teams_le, 1),
       ],
       [
         (party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),
           (eq, ":template", "pt_looter_lair"),
           (check_quest_active, "qst_save_relative_of_merchant"),

           (store_faction_of_party, ":starting_town_faction", "$g_starting_town"),

           (try_begin),
             (eq, ":starting_town_faction", "fac_kingdom_1"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),
             (eq, ":starting_town_faction", "fac_kingdom_2"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),
             (eq, ":starting_town_faction", "fac_kingdom_3"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),
             (eq, ":starting_town_faction", "fac_kingdom_4"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),
             (eq, ":starting_town_faction", "fac_kingdom_5"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),
             (eq, ":starting_town_faction", "fac_kingdom_6"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (try_end),

           (get_player_agent_no, ":player_agent"),
           (agent_get_position, pos0, ":player_agent"),
           (assign, ":minimum_distance", 100000),
           (try_for_range, ":entry_no", 1, 10),
             (entry_point_get_position, pos1, ":entry_no"),
             (get_distance_between_positions, ":dist", pos0, pos1),
             (le, ":dist", ":minimum_distance"),
             (ge, ":dist", 1000),
             (assign, ":nearest_entry_point", ":entry_no"),
             (assign, ":minimum_distance", ":dist"),
           (try_end),

           (add_visitors_to_current_scene, ":nearest_entry_point", ":troop_of_merchant", 1, 0),
         (try_end),
       ]),

       common_battle_order_panel,
       common_battle_order_panel_tick,

       (1, 4, ti_once,
       [
         (assign, ":continue", 0),

         (party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),
           (eq, ":template", "pt_looter_lair"),
           (check_quest_active, "qst_save_relative_of_merchant"),

           (this_or_next|main_hero_fallen),
           (eq, "$relative_of_merchant_is_found", 1),

           (assign, ":continue", 1),
         (else_try),
           (this_or_next|neq, ":template", "pt_looter_lair"), #SB : neq|eq?
           (neg|check_quest_active, "qst_save_relative_of_merchant"),

           (store_mission_timer_a,":cur_time"),
           (ge, ":cur_time", 5),

           (this_or_next|main_hero_fallen),
           (num_active_teams_le, 1),

           (assign, ":continue", 1),
         (try_end),

         (eq, ":continue", 1),
       ],
       [
         (try_begin),
           (main_hero_fallen),
         (else_try),
           (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
         (try_end),

         (finish_mission),
         ]),
      ]),

  (
    "alley_fight", mtf_battle_mode,charge,
    "Alley fight",
    [
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse,aif_start_alarmed,7,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    ], vc_weather +
    [
      common_battle_init_banner,

      common_inventory_not_available,

      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (neq, ":agent_no", ":player_agent"),
        (assign, "$g_main_attacker_agent", ":agent_no"),
        (agent_ai_set_aggressiveness, ":agent_no", 199),

        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", startup_merchants_begin, startup_merchants_end),
          (agent_set_team, ":agent_no", 7),
          (team_set_relation, 0, 7, 0),
        (try_end),
      ]),

       (0, 0, 0,
       [
         (eq, "$talked_with_merchant", 0),
       ],
       [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", startup_merchants_begin, startup_merchants_end),
          (agent_set_scripted_destination, ":agent_no", pos0),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 200),
          (assign, "$talk_context", tc_back_alley),
          (start_mission_conversation, ":troop_no"),
        (try_end),
       ]),

      (1, 0, 0, [],
      [
        (get_player_agent_no, ":player_agent"),
        (ge, "$g_main_attacker_agent", 0),
        (ge, ":player_agent", 0),
        (agent_is_active, "$g_main_attacker_agent"),
        (agent_is_active, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),
        (agent_get_position, pos1, "$g_main_attacker_agent"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (ge, ":dist", 5),
        (agent_set_scripted_destination, "$g_main_attacker_agent", pos0),
      ]),

      (ti_tab_pressed, 0, 0, [],
      [
        (display_message, "str_cannot_leave_now"),
      ]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),

      (0, 0, ti_once,
       [
         (neg|main_hero_fallen),
         (num_active_teams_le, 1),
       ],
       [
         (call_script, "script_get_troop_of_merchant"),
         (add_visitors_to_current_scene, 3, reg0, 1, 0),
       ]),

      (1, 0, ti_once,
       [
         (eq, "$talked_with_merchant", 1),
       ],
       [
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         (finish_mission),
         (assign, "$g_main_attacker_agent", 0),
         (assign, "$talked_with_merchant", 1),

         (assign, "$current_startup_quest_phase", 1),

         (change_screen_return),
         (set_trigger_result, 1),

         (get_player_agent_no, ":player_agent"),
         (store_agent_hit_points, ":hit_points", ":player_agent"),

         (try_begin),
           (lt, ":hit_points", 90),
           (agent_set_hit_points, ":player_agent", 90),
         (try_end),
       ]),

      (1, 3, ti_once,
       [
         (main_hero_fallen),
       ],
       [
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         (finish_mission),
         (assign, "$g_main_attacker_agent", 0),
         (assign, "$talked_with_merchant", 1),

         (assign, "$current_startup_quest_phase", 1),

         (change_screen_return),
         (set_trigger_result, 1),

         (get_player_agent_no, ":player_agent"),
         (store_agent_hit_points, ":hit_points", ":player_agent"),

         (try_begin),
           (lt, ":hit_points", 90),
           (agent_set_hit_points, ":player_agent", 90),
         (try_end),
       ]),
     ]),

  (
    "meeting_merchant",0,-1,
    "Meeting with the merchant",
    [
      (0,mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
    ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),

        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", startup_merchants_begin, startup_merchants_end),
          (agent_set_team, ":agent_no", 7),
          (team_set_relation, 0, 7, 0),
        (try_end),
      ]),

      (1, 0, ti_once, [],
      [
        (assign, "$dialog_with_merchant_ended", 0),
        (store_current_scene, ":cur_scene"),
        (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_begin),
          (gt, "$sneaked_into_town", disguise_none),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (eq, "$talk_context", tc_tavern_talk),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_tavern),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),

      (1, 0, 0,
      [
        (assign, ":continue", 0),
        (try_begin),
          (ge, "$dialog_with_merchant_ended", 6),
          (assign, ":continue", 1),
        (else_try),
          (ge, "$dialog_with_merchant_ended", 1),
          (neg|conversation_screen_is_active),

          (try_begin),
            (eq, "$dialog_with_merchant_ended", 1),
            (check_quest_active, "qst_collect_men"),
            (tutorial_box, "str_start_up_first_quest", "@Tutorial"),
          (try_end),

          (val_add, "$dialog_with_merchant_ended", 1),
          (assign, ":continue", 0),
        (try_end),

        (try_begin),
          (conversation_screen_is_active),
          (tutorial_message, -1),
          (assign, ":continue", 0),
        (try_end),

        (eq, ":continue", 1),
      ],
      [
        (tutorial_message_set_size, 17, 17),
        (tutorial_message_set_position, 500, 650),
        (tutorial_message_set_center_justify, 0),
        (tutorial_message_set_background, 1),
        (tutorial_message, "str_press_tab_to_exit_from_town"),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        #(call_script, "script_change_banners_and_chest"),
      ]),

      (ti_inventory_key_pressed, 0, 0,
      [
        (set_trigger_result, 1),
      ], []),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (gt, "$dialog_with_merchant_ended", 0),

          (assign, ":max_dist", 0),
          (party_get_position, pos1, "$current_town"),
          (try_for_range, ":unused", 0, 10),
            (map_get_random_position_around_position, pos0, pos1, 2),
            (get_distance_between_positions, ":dist", pos0, pos1),
            (ge, ":dist", ":max_dist"),
            (assign, ":max_dist", ":dist"),
            (copy_position, pos2, pos0),
          (try_end),

          (party_set_position, "p_main_party", pos2),

          (finish_mission),

          (assign, "$current_startup_quest_phase", 2),

          (tutorial_message, -1),

          (tutorial_message_set_background, 0),

          (change_screen_map),

          (try_begin),
            (check_quest_finished, "qst_save_town_from_bandits"),
            (assign, "$g_do_one_more_meeting_with_merchant", 1),
          (else_try),
            #will do this at first spawning in the map
            (set_spawn_radius, 50),
            (try_for_range, ":unused", 0, 20),
              (spawn_around_party, "p_main_party", "pt_looters"),
            (try_end),
          (try_end),

          (set_trigger_result, 1),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], []),
    ]),

  (
    "town_fight",0,-1,
    "Town Fight",
    [
      (0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source,af_override_horse,0,1,[]),
      (10,mtef_visitor_source,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (14,mtef_visitor_source,af_override_horse,0,1,[]),
      (15,mtef_visitor_source,af_override_horse,0,1,[]),
      (16,mtef_visitor_source,af_override_horse,0,1,[]),
      (17,mtef_visitor_source,af_override_horse,0,1,[]),
      (18,mtef_visitor_source,af_override_horse,0,1,[]),
      (19,mtef_visitor_source,af_override_horse,0,1,[]),
      (20,mtef_visitor_source,af_override_horse,0,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
	  (23,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (24,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (25,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (26,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (27,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (28,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (29,mtef_visitor_source,af_override_horse,0,1,[]),
	  (30,mtef_visitor_source,af_override_horse,0,1,[]),
	  (31,mtef_visitor_source,af_override_horse,0,1,[]),
      (32,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (33,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (34,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (35,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (36,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (37,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (38,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (39,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	  (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	  (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	  (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
      (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ], vc_weather +
    [
      common_battle_init_banner,

      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),

        (agent_set_team, ":agent_no", 0),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (mission_disable_talk),

        (assign, "$g_main_attacker_agent", 0),
        (set_party_battle_mode),

        (assign, "$number_of_bandits_killed_by_player", 0),
        (assign, "$number_of_civilian_loses", 0),

        (set_fixed_point_multiplier, 100),
	  ]),

      (1, 0, ti_once,
      [
        (call_script, "script_init_town_walker_agents"),
      ],
      []),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (agent_get_team, ":dead_agent_team_no", ":dead_agent_no"),
          (eq, ":dead_agent_team_no", 1),

          (get_player_agent_no, ":player_agent"),
          (eq, ":player_agent", ":killer_agent_no"),

          (val_add, "$number_of_bandits_killed_by_player", 1),
        (else_try),
          (eq, ":dead_agent_team_no", 0),

          (val_add, "$number_of_civilian_loses", 1),
        (try_end),
      ]),

      (1, 0, 0,
      [
        (lt, "$merchant_sign_count", 8),
  	    (val_add, "$merchant_sign_count", 1),

  	    (try_begin),
  	      (eq, "$merchant_sign_count", 2),
          (get_player_agent_no, ":player_agent"),
  	      (try_for_agents, ":agent_no"),
  	        (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
  	        (is_between, ":agent_troop_id", startup_merchants_begin, startup_merchants_end),

  	        (assign, "$g_city_merchant_troop_id", ":agent_troop_id"),
  	        (assign, "$g_city_merchant_agent_id", ":agent_no"),

  	        (agent_get_position, pos0, ":player_agent"),
  	        (agent_get_position, pos1, ":agent_no"),

  	        (assign, ":max_dif", -1000),
            (try_for_range, ":target_entry_point", 0, 64),
              #(neg|entry_point_is_auto_generated, ":target_entry_point"),
              (entry_point_get_position, pos6, ":target_entry_point"),
              (get_distance_between_positions, ":dist_to_player", pos0, pos6),
              (get_distance_between_positions, ":dist_to_merchant", pos1, pos6),
              (store_sub, ":dif", ":dist_to_merchant", ":dist_to_player"),
              (ge, ":dist_to_merchant", 15),
              (ge, ":dif", ":max_dif"),
              (copy_position, pos2, pos6),
              (assign, ":max_dif", ":dif"),
            (try_end),

    	    (agent_set_scripted_destination, ":agent_no", pos2, 0),
            (agent_set_speed_limit, ":agent_no", 10),
          (try_end),
        (else_try),
  	      (eq, "$merchant_sign_count", 5),

          (get_player_agent_no, ":player_agent"),
	      (agent_get_position, pos0, ":player_agent"),

  	      (agent_set_scripted_destination, "$g_city_merchant_agent_id", pos0, 0),
          (agent_set_speed_limit, "$g_city_merchant_agent_id", 10),
        (else_try),
  	      (eq, "$merchant_sign_count", 7),

  	      (agent_clear_scripted_mode, "$g_city_merchant_agent_id"),

  	      (assign, "$talk_context", tc_town_talk),
  	      (start_mission_conversation, "$g_city_merchant_troop_id"),
  	    (try_end),
  	  ],
	  []),

	  (1, 0, 0, [],
	  [
	    (ge, "$merchant_sign_count", 8),

	    (get_player_agent_no, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 0),

          (agent_get_position, pos0, ":agent_no"),

          (assign, ":minimum_distance", 10000),
          (try_for_agents, ":bandit_no"),
            (agent_is_alive, ":bandit_no"),
            (agent_get_team, ":bandit_team", ":bandit_no"),
            (eq, ":bandit_team", 1),

            (agent_get_position, pos1, ":bandit_no"),

            (get_distance_between_positions, ":dist", pos0, pos1),
            (le, ":dist", ":minimum_distance"),
            (assign, ":minimum_distance", ":dist"),
            (copy_position, pos2, pos1),
          (try_end),

          (assign, reg1, ":dist"),
          (try_begin),
            (le, ":minimum_distance", 500),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),
            (lt, ":minimum_distance", 10000),
            (agent_set_scripted_destination, ":agent_no", pos2, 0),
          (try_end),
        (try_end),
      ]),

      (3, 0, 0,
      [
        (lt, "$merchant_sign_count", 8),
  	    (call_script, "script_tick_town_walkers")
  	  ],
	  []),

      (2, 0, 0,
      [
        (call_script, "script_center_ambiance_sounds")
      ],
      []),

      (ti_before_mission_start, 0, 0,
      [],
      [
        (call_script, "script_change_banners_and_chest")
      ]),

      (1, 4, ti_once,
       [
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1),

         (ge, "$merchant_sign_count", 8),
       ],
       [
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         (assign, "$current_startup_quest_phase", 4),

         (mission_enable_talk),

         (finish_mission),

         (unlock_achievement, ACHIEVEMENT_GET_UP_STAND_UP),

         (change_screen_return),
         (set_trigger_result, 1),
       ]),

      (ti_inventory_key_pressed, 0, 0,
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (set_trigger_result,1),
        (else_try),
          (eq, "$g_mt_mode", tcm_disguised),
          (display_message,"str_cant_use_inventory_disguised"),
        (else_try),
          (display_message, "str_cant_use_inventory_now"),
        (try_end),
      ], []),

      (ti_tab_pressed, 0, 0,
      [
        (display_message, "str_cannot_leave_now"),
      ], []),
  ]),

    (
    "multiplayer_duel",mtf_battle_mode,-1, #duel mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_duel),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         #make everyone see themselves as allies, no friendly fire
         (team_set_relation, 0, 0, 1),
         (team_set_relation, 0, 1, 1),
         (team_set_relation, 1, 1, 1),
         (mission_set_duel_mode, 1),
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"), # close this line and open map in deathmatch mod and use all ladders firstly
         ]),                                                            # to be able to edit maps without damaging any headquarters flags ext.

      (ti_after_mission_start, 0, 0, [],
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (call_script, "script_initialize_all_scene_prop_slots"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin),
           (get_player_agent_no, ":player_agent"),
           (agent_is_active, ":player_agent"),
           (agent_slot_ge, ":player_agent", slot_agent_in_duel_with, 0),
           (try_begin),
             (eq, ":dead_agent_no", ":player_agent"),
             (display_message, "str_you_have_lost_a_duel"),
           (else_try),
             (agent_slot_eq, ":player_agent", slot_agent_in_duel_with, ":dead_agent_no"),
             (display_message, "str_you_have_won_a_duel"),
           (try_end),
         (try_end),
         (try_begin),
           (agent_slot_ge, ":dead_agent_no", slot_agent_in_duel_with, 0),
           (agent_get_slot, ":duelist_agent_no", ":dead_agent_no", slot_agent_in_duel_with),
           (agent_set_slot, ":dead_agent_no", slot_agent_in_duel_with, -1),
           (try_begin),
             (agent_is_active, ":duelist_agent_no"),
             (agent_set_slot, ":duelist_agent_no", slot_agent_in_duel_with, -1),
             (agent_clear_relations_with_agents, ":duelist_agent_no"),
             (try_begin),
               (agent_get_player_id, ":duelist_player_no", ":duelist_agent_no"),
               (neg|player_is_active, ":duelist_player_no"), #might be AI
               (agent_force_rethink, ":duelist_agent_no"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"),
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1),
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      (0, 0, 0, [],
       [
         (multiplayer_is_server),
         (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
         (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
         (try_begin),
           (gt, ":total_req", 0),
           (store_random_in_range, ":random_req", 0, ":total_req"),
           (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
           (try_begin),
             (lt, ":random_req", 0),
             #add to team 1
             (assign, ":selected_team", 0),
             (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
           (else_try),
             #add to team 2
             (assign, ":selected_team", 1),
             (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
           (try_end),

           (team_get_faction, ":team_faction_no", ":selected_team"),
           (assign, ":available_troops_in_faction", 0),

           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_add, ":available_troops_in_faction", 1),
           (try_end),

           (store_random_in_range, ":random_troop_index", 0, ":available_troops_in_faction"),
           (assign, ":end_cond", multiplayer_ai_troops_end),
           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_sub, ":random_troop_index", 1),
             (lt, ":random_troop_index", 0),
             (assign, ":end_cond", 0),
             (assign, ":selected_troop", ":troop_no"),
           (try_end),

           (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"),
           (store_current_scene, ":cur_scene"),
           (modify_visitors_at_site, ":cur_scene"),
           (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", -1),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 0),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         #checking for restarting the map
         (assign, ":end_map", 0),
         (try_begin),
           (store_mission_timer_a, ":mission_timer"),
           (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
           (gt, ":mission_timer", ":game_max_seconds"),
           (assign, ":end_map", 1),
         (try_end),
         (try_begin),
           (eq, ":end_map", 1),
           (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
           (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
           (call_script, "script_game_set_multiplayer_mission_end"),
         (try_end),
         ]),

      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),

      (1, 0, 0, [],
       [
         (store_mission_timer_a, ":mission_timer"),
         (store_sub, ":duel_start_time", ":mission_timer", 3),
         (try_for_agents, ":cur_agent"),
           (agent_slot_ge, ":cur_agent", slot_agent_in_duel_with, 0),
           (agent_get_slot, ":duel_time", ":cur_agent", slot_agent_duel_start_time),
           (ge, ":duel_time", 0),
           (le, ":duel_time", ":duel_start_time"),
           (agent_set_slot, ":cur_agent", slot_agent_duel_start_time, -1),
           (agent_get_slot, ":opponent_agent", ":cur_agent", slot_agent_in_duel_with),
           (agent_is_active, ":opponent_agent"),
           (agent_add_relation_with_agent, ":cur_agent", ":opponent_agent", -1),
           (agent_force_rethink, ":cur_agent"),
         (try_end),
         ]),
      ],
  ),

  ("religious_center_noricum",0,-1,
    "Holy Place",
    [(0,mtef_scene_source|mtef_team_0,0,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
      (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),

      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (18,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (19,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (20,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      #can_spawn_commoners,
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      (ti_after_mission_start, 0, 0, [], [(call_script, "script_music_set_situation_with_culture", mtf_sit_town)]),
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),

      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent_no"),
          (get_player_agent_no, ":player_agent"),
          (call_script, "script_init_town_agent", ":agent_no"),
          (try_begin),
            (neq, ":player_agent", ":agent_no"),
            (agent_set_team, ":agent_no", 7),
          (try_end),
      ]),

      # (1, 0, ti_once, [],
        # [
          # #(call_script, "script_init_town_walker_agents"),
          # (play_track, "track_paganholysite", 1),
      # ]),

      (0,8,0,[],
        [
          (try_for_agents,":agent_no"),
            (agent_is_alive,":agent_no"),
            (agent_is_human,":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (this_or_next|eq, ":troop_no", "trp_imperial_town_walker_1"),
            (this_or_next|eq, ":troop_no", "trp_imperial_town_walker_2"),
            (this_or_next|eq, ":troop_no", "trp_miles_romani"),
            (eq, ":troop_no", "trp_refugee"),

            (assign, ":continue_walk", 0),
            (store_random_in_range, ":continue_walk", 1, 100),
            (try_begin),
              (le, ":continue_walk", 40),
              (agent_set_stand_animation, ":agent_no", "anim_stand_man"),
              (agent_set_walk_forward_animation, ":agent_no", "anim_walk_forward"),
              (agent_set_animation, ":agent_no", "anim_stand_man"),
              (agent_set_animation_progress, ":agent_no", 10),

              (agent_get_position, pos1, ":agent_no"),
              (store_random_in_range, ":points", 4, 33),
              (entry_point_get_position, pos2, ":points"),
              (agent_set_speed_limit, ":agent_no", 1),
              (agent_set_scripted_destination, ":agent_no", pos2),
            (try_end),
          (try_end),
      ]),

      (0, 0, ti_once, [],
        [
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (call_script, "script_town_init_doors", 0),
          (try_begin),
            (eq, "$town_nighttime", 0),
            (play_sound, "snd_town_ambiance", sf_looping),
          (try_end),
      ]),


      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (1,0,0,[                        (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (store_mission_timer_a, ":cur_time"),
          (le, ":cur_time", 20),
        ],
        [
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (ge, ":cur_time", 16),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
          (else_try),
            (ge, ":cur_time", 8),
            (tutorial_message_set_background, 1),
            #(tutorial_message, "@You can feel the proximity of the gods. You can make sacrifices to the gods. If you're lucky, the gods may hear you and grant your wish."),
          (try_end),
      ]),

      (ti_on_leave_area, 0, 0, [
          (assign,"$g_leave_town",1),
          ], []),
    ]
  ),

  ("diocletian_palace_visit",0,-1,
    "Diocletian's Palace",
    [(0,mtef_scene_source|mtef_team_0,0,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
      (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),

      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      #can_spawn_commoners,
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      (ti_after_mission_start, 0, 0, [], [(call_script, "script_music_set_situation_with_culture", mtf_sit_town)]),
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),

      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent_no"),
          (get_player_agent_no, ":player_agent"),
          (call_script, "script_init_town_agent", ":agent_no"),
          (try_begin),
            (neq, ":player_agent", ":agent_no"),
            (agent_set_team, ":agent_no", 7),
          (try_end),
      ]),

      # (1, 0, ti_once, [],
        # [
          # #(call_script, "script_init_town_walker_agents"),
          # (play_track, "track_paganholysite", 1),
      # ]),

      (0,8,0,[],
        [
          (try_for_agents,":agent_no"),
            (agent_is_alive,":agent_no"),
            (agent_is_human,":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (this_or_next|eq, ":troop_no", "trp_silingi_warrior"),
            (this_or_next|eq, ":troop_no", "trp_refugee"),
            (this_or_next|eq, ":troop_no", "trp_imperial_town_walker_1"),
            (this_or_next|eq, ":troop_no", "trp_imperial_town_walker_2"),
            (eq, ":troop_no", "trp_palace_farmer"),

            (assign, ":continue_walk", 0),
            (store_random_in_range, ":continue_walk", 1, 100),
            (try_begin),
              (le, ":continue_walk", 40),
              (agent_set_stand_animation, ":agent_no", "anim_stand_man"),
              (agent_set_walk_forward_animation, ":agent_no", "anim_walk_forward"),
              (agent_set_animation, ":agent_no", "anim_stand_man"),
              (agent_set_animation_progress, ":agent_no", 10),

              (agent_get_position, pos1, ":agent_no"),
              (store_random_in_range, ":points", 4, 33),
              (entry_point_get_position, pos2, ":points"),
              (agent_set_speed_limit, ":agent_no", 1),
              (agent_set_scripted_destination, ":agent_no", pos2),
            (try_end),
          (try_end),
      ]),

      (0, 0, ti_once, [],
        [
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (call_script, "script_town_init_doors", 0),
          (try_begin),
            (eq, "$town_nighttime", 0),
            (play_sound, "snd_town_ambiance", sf_looping),
          (try_end),
      ]),


      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (1,0,0,[                        (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (store_mission_timer_a, ":cur_time"),
          (le, ":cur_time", 20),
        ],
        [
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (ge, ":cur_time", 16),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
          (else_try),
            (ge, ":cur_time", 8),
            (tutorial_message_set_background, 1),
            #(tutorial_message, "@You can feel the proximity of the gods. You can make sacrifices to the gods. If you're lucky, the gods may hear you and grant your wish."),
          (try_end),
      ]),

      (ti_on_leave_area, 0, 0, [
          (assign,"$g_leave_town",1),
          ], []),
    ]
  ),




#roman baths mision chief
     (
    "dungeon_ruins_1",mtf_battle_mode,-1,
    "dungeon",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #player

     (1,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (2,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (3,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (4,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
     (5,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (6,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slave hunter
   (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
     (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (9,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (10,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (11,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (12,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (13,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (14,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slave crusher
   (15,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (16,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (17,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slaver chief
   (18,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (19,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (20,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (21,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (22,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (23,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (24,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slave crusher
#   (25,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),#PRISONERS BEGIN
#   (26,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
#   (27,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
#   (28,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
#   (29,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
#   (30,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),#PRISONERS END
     ], vc_weather +
    [

##      (ti_on_agent_spawn, 0, 0, [],
##       [ (store_trigger_param_1, ":agent_no"),
##     (agent_get_troop_id,":troop_id",":agent_no"),
##     (try_begin),
##      (is_between,":troop_id",dungeon_prisoners_begin,dungeon_prisoners_end),
##      (agent_set_slot,":agent_no",slot_agent_tournament_point,0),#using slot to store if agent has been talked to or not in dialogs.py
##     (try_end),
##         ]),

      (ti_before_mission_start, 0, 0, [],
       [
     (assign,"$g_battle_result",0),
     (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
     (team_set_relation,1,2,0),
     (team_set_relation,0,1,0),
         ]),

  (0, 0, ti_once,
          [
          (assign, "$defender_team_2", 2),
          ], []
  ),

  (0, 0, ti_once,
          [
          (set_show_messages, 0),
          (team_give_order, "$defender_team_2", grc_infantry, mordr_stand_ground),
          (team_give_order, "$defender_team_2", grc_archers, mordr_stand_ground),
          (team_give_order, "$defender_team_2", grc_cavalry, mordr_stand_ground),
          (set_show_messages, 1),
          ], []
  ),

                        (0.1, 0, ti_once, [
            (store_skill_level,":player_sneaking_skill","skl_athletics","trp_player"),


                       (try_begin),
                       (eq,":player_sneaking_skill",10),
                (assign,":sneak_distance",500),
            (else_try),
                (eq,":player_sneaking_skill",9),
                (assign,":sneak_distance",600),
            (else_try),
                (eq,":player_sneaking_skill",8),
                (assign,":sneak_distance",700),
            (else_try),
                (eq,":player_sneaking_skill",7),
                (assign,":sneak_distance",800),
            (else_try),
                (eq,":player_sneaking_skill",6),
                (assign,":sneak_distance",900),
            (else_try),
                (eq,":player_sneaking_skill",5),
                (assign,":sneak_distance",1000),
            (else_try),
                (eq,":player_sneaking_skill",4),
                (assign,":sneak_distance",1100),
            (else_try),
                (eq,":player_sneaking_skill",3),
                (assign,":sneak_distance",1200),
            (else_try),
                (eq,":player_sneaking_skill",2),
                (assign,":sneak_distance",1300),
            (else_try),
                (eq,":player_sneaking_skill",1),
                (assign,":sneak_distance",1400),
            (else_try),
                (assign,":sneak_distance",1500),
           (try_end),
        (get_player_agent_no,":player_agent"),
  (agent_get_position,pos1,":player_agent"),
  (assign,":continue",0),
  (try_for_agents, ":cur_agent"),
    (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
    (this_or_next|eq, ":cur_agent_troop", "trp_unique_bandit_1"),
    (this_or_next|eq, ":cur_agent_troop", "trp_robber"),
    (this_or_next|eq, ":cur_agent_troop", "trp_rich_bandit"),
    (this_or_next|eq, ":cur_agent_troop", "trp_brigand"),
    (this_or_next|eq, ":cur_agent_troop", "trp_bandit"),
    (eq, ":cur_agent_troop", "trp_robber"),
    (agent_get_position,pos2,":cur_agent"),
    (get_distance_between_positions,":distance",pos1,pos2),
    (lt,":distance",":sneak_distance"),
    (assign,":continue",1),
  (try_end),
  (eq,":continue",1),
            ],
           [(set_party_battle_mode),
            (try_for_agents, ":cur_agent"),
              (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
              (eq, ":cur_agent_troop", "trp_brigand"),
              (agent_set_team, ":cur_agent", 2),
            (try_end),
             ]),

#TEMPERED      SETUP KEY AGENTS

    (0,0,ti_once,[],
    [ (mission_enable_talk),
      (assign, "$talk_context", tc_hero_freed),
      (try_for_agents,":cur_agent"),
        (agent_get_troop_id,":cur_troop_id",":cur_agent"),
        (try_begin),
          (eq,":cur_troop_id","trp_brigand"),
          (assign,"$slaver_1",":cur_agent"),
        (else_try),
          (eq,":cur_troop_id","trp_rich_bandit"),
          (assign,"$slaver_2",":cur_agent"),
        (else_try),
          (eq,":cur_troop_id","trp_unique_bandit_1"),
          (assign,"$slaver_3",":cur_agent"),
        (try_end),
      (try_end),
    ]),

#TEMPERED     CHECK FOR DEFEAT AGAINST GUARDS
    (5, 3, ti_once,
     [
     (main_hero_fallen,0),
     (assign,"$g_spy_rescue_active",-2),
     (assign,"$g_battle_result",-1),
     (assign,"$g_encountered_party",-1),
    (call_script, "script_change_troop_renown", "trp_player", -5),
    (display_message, "@ Bandits strike you with anger and you fall into a puddle of blood. They think you're dead...",color_good_news),
            (store_troop_gold, ":gold", "trp_player"),
     (try_begin),
    (ge, ":gold", 100),
    (troop_remove_gold, "trp_player", 100),
    (else_try),
    (call_script, "script_change_troop_renown", "trp_player", -5),
    (try_end),
     ],
     [
      (finish_mission),
       ]),

#TEMPERED     SCRIPT PRISONERS TO FOLLOW PLAYER
    (1,1,1,[],
    [(get_player_agent_no,":player_agent"),
     (agent_get_position,pos1,":player_agent"),
     (try_for_agents,":cur_agent"),
     (agent_get_team  ,":team_no",":cur_agent"),
     (agent_get_wielded_item,":has_weapon",":cur_agent",0),#Tempered get right hand weapon (-1 for none)
      (try_begin),
        (neq,":cur_agent",":player_agent"),
        (eq,":team_no",0),
        (eq,":has_weapon",-1),
          (agent_set_scripted_destination,":cur_agent",pos1,1),
      (try_end),
     (try_end),
     ]),
#TEMPERED RELEASE PRISONERS FROM SCRIPTED MODE

   (2,0,0,[],
    [(get_player_agent_no,":player_agent"),
     (try_for_agents,":cur_agent"),
     (agent_get_team  ,":team_no",":cur_agent"),
     (agent_get_wielded_item,":has_weapon",":cur_agent",0),
      (try_begin),
        (neq,":cur_agent",":player_agent"),
        (eq,":team_no",0),
        (neq,":has_weapon",-1),
          (agent_clear_scripted_mode,":cur_agent"),
      (try_end),
     (try_end),
     ]),

#TEMPERED     CHECK FOR VICTORY OVER GUARDS
    ( 1, 1, ti_once,
     [
     (num_active_teams_le, 2),
     (neg|main_hero_fallen),
      ],
        [
     (assign, "$g_battle_result", 1),
     (assign,"$g_encountered_party",-1),
 #    (display_message,"@ The bandits and slavers have been dealt with. The ruins are clear of life once again.",color_good_news),
    ]),
#TEMPERED     CHECK FOR TAB PRESS
##      (ti_tab_pressed, 0, 0, [],
##     [
##      (display_message,"@There is no turning back now!!"),
##    ]),
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),


#TEMPERED     SET DARKNESS AND MUSIC FOR DUNGEON
      (0, 0, ti_once, [],
     [
        (call_script, "script_music_set_situation_with_culture", 0), #prison
          (store_random_in_range, ":fog_distance", 25, 50),
          (store_random_in_range, ":haze_power", 25, 65),
          (set_global_haze_amount, ":haze_power"),
          (set_fog_distance, ":fog_distance", 0xC4C1C9),
       ]),

#TEMPERED     check for key 1
      (2, 0, ti_once, [ (neg|agent_is_alive,"$slaver_1"),
                        (eq,"$g_romanruins1",0),
                        ],
     [
      (display_message,"@__You just killed a rich bandit. Rummaging through his stuff you find some treasures:",color_good_news),
    (call_script, "script_change_player_honor", 2),
    (call_script, "script_troop_add_gold", "trp_player", 300),
            (troop_add_item, "trp_player","itm_augst_helmet_2",0),
            (troop_add_item, "trp_player","itm_gold_jewelry",0),
                        (assign,"$g_romanruins1",1),
       ]),

#TEMPERED     check for key 2
      (2, 0, ti_once, [ (neg|agent_is_alive,"$slaver_2"),
                        (eq,"$g_romanruins2",0),
                        ],
     [
      (display_message,"@__You have killed the bandit king's bodyguard. Rummaging through his stuff you find some treasures:",color_good_news),
    (call_script, "script_change_player_honor", 5),
    (call_script, "script_troop_add_gold", "trp_player", 400),
            (troop_add_item, "trp_player","itm_arabian_sword_a",0),
                        (assign,"$g_romanruins2",1),
       ]),

#TEMPERED     check for key 3
      (2, 0, ti_once, [ (neg|agent_is_alive,"$slaver_3"),],
     [
      (display_message,"@__You have killed the leader of the bandits, a roman deserter by the name of Faustinus. Picking through the remains of the once proud soldier, you find some treasures:",color_good_news),
    (call_script, "script_change_player_honor", 15),
    (call_script, "script_change_troop_renown", "trp_player", 25),
    (call_script, "script_troop_add_gold", "trp_player", 625),
        (troop_add_item, "trp_player","itm_common_mail_short_6",0),
       (mission_disable_talk),
                        (assign,"$g_historia2",1),
       ]),

(0, 0, 0,[(key_clicked, key_k),
            (tutorial_message, "@ "),
], []),
    ],
  ),
       #roman baths chief acaba

  ("wolfman_forest",0,-1, #
    "forest",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (14,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (15,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (16,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 650, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (ti_before_mission_start, 0, 0, [
        ],
        [
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),

      (1, 4, ti_once,
        [ (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (check_quest_active,"qst_the_wolfmen"),(quest_slot_eq,"qst_the_wolfmen",slot_quest_current_state,8),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (display_message, "@You have lost the battle against the Cynocephali. They think you're dead...",color_good_news),
            (call_script, "script_change_troop_renown", "trp_player", -10),
            (call_script, "script_fail_quest", "qst_the_wolfmen"),
            (disable_party, "p_wolfmen_lair"),
            (finish_mission),
            (leave_encounter),
            (change_screen_return),
          (else_try),
            (tutorial_message_set_background, 1),
            (tutorial_message,"@You have defeated the ferocious Cynocephali, and now whatever valuables they have are yours for the taking..."),
            (call_script, "script_troop_add_gold", "trp_player", 850),
            (call_script, "script_end_quest", "qst_the_wolfmen"),
            (call_script, "script_change_troop_renown", "trp_player", 50),
            (call_script, "script_change_player_honor", 2),
            (add_xp_as_reward,1000),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (disable_party, "p_wolfmen_lair"),
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),


      (0.1, 0, ti_once,
        [
          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (check_quest_active,"qst_the_wolfmen"),(quest_slot_eq,"qst_the_wolfmen",slot_quest_current_state,8),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (team_set_relation, 0, 1, -1),  #Teams
          (team_set_relation, 0, 2, -1),
          (team_set_relation, 1, 0, -1),
          (team_set_relation, 1, 2, -1),
          (team_set_relation, 2, 0, -1),
          (team_set_relation, 2, 1, -1),
          (set_party_battle_mode),
      ]),


      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (neq, ":troop", "trp_player"),
          (troop_is_hero, ":troop"),
          (main_party_has_troop, ":troop"),

          (get_player_agent_no, ":player"),
          (agent_get_team, ":playerteam", ":player"),
          (agent_get_position,pos1,":player"),

          (agent_set_team, ":agent", ":playerteam"),
          (agent_set_division, ":agent", 8),
          (agent_add_relation_with_agent, ":agent", ":player", 1),
          (agent_set_is_alarmed, ":agent", 1),
          (set_show_messages, 0),
          (team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
          (set_show_messages, 1),
      ]),

      (0,7,0,[(eq, "$cam_time", 1),],
        [
          (tutorial_message, -1),
          (tutorial_message_set_background, 0),
          (assign, "$cam_time", 0),
      ]),

#TEMPERED     SET DARKNESS AND MUSIC FOR DUNGEON
      (0, 0, ti_once, [],
     [
        (call_script, "script_music_set_situation_with_culture", 0), #prison
          (store_random_in_range, ":fog_distance", 25, 50),
          (store_random_in_range, ":haze_power", 25, 65),
          (set_global_haze_amount, ":haze_power"),
          (set_fog_distance, ":fog_distance", 0x131313),
       ]),

      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

    ],),

("wolfmen_ambush",mtf_battle_mode,-1,
    "ambushed by berserkers",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#player
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#player
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#guard
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#unused
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#unused
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#unused
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (17,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (18,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (19,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (20,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (21,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    ],
   vc_weather + [

    passable_allies,
    custom_commander_critical_strike,
###TO BULLY RETARTED CHEATERS
    (0, 0, 0, [
	(eq, 1, 0), #madsci need to cheat to test
    (this_or_next|key_is_down, key_left_alt),
    (key_is_down, key_right_alt),
    (key_is_down, key_f4),
    (this_or_next|key_is_down, key_left_control),
    (key_is_down, key_right_control),
    ],
    [
    (get_player_agent_no, ":player"),
    (agent_deliver_damage_to_agent,":player",":player",10000,"itm_warhammer"),
    (display_message, "@DIE CHEATER! DIE CHEATER! DIE CHEATER!"),
    (jump_to_menu, "mnu_wolfmen_ambush_lost"),
    (finish_mission),
    (call_script, "script_change_troop_renown", "trp_player", -500),
    (call_script, "script_change_player_honor", -200),
    (store_troop_gold, ":gold", "trp_player"),
    (troop_remove_gold, "trp_player", ":gold"),
    (troop_clear_inventory, "trp_player"),
    ]),
###TO BULLY RETARDED CHEATERS
    (0, 0, 0, [
	(eq, 1, 0), #madsci need to cheat to test
    (this_or_next|key_is_down, key_left_control),
    (key_is_down, key_right_control),
    (key_is_down, key_h),
    ],
    [
    (get_player_agent_no, ":player"),
    (agent_deliver_damage_to_agent,":player",":player",10000,"itm_warhammer"),
    (display_message, "@DIE CHEATER! DIE CHEATER! DIE CHEATER!"),
    (jump_to_menu, "mnu_wolfmen_ambush_lost"),
    (finish_mission),
    (call_script, "script_change_troop_renown", "trp_player", -500),
    (call_script, "script_change_player_honor", -200),
    (store_troop_gold, ":gold", "trp_player"),
    (troop_remove_gold, "trp_player", ":gold"),
    (troop_clear_inventory, "trp_player"),
    ]),

    (ti_before_mission_start,0,0,[],[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    (assign, "$g_battle_result", 0),

    (try_begin),
        (eq, "$temp", -2),
        (team_set_relation, 0,1,1),
        (team_set_relation, 1,0,1),
        (team_set_relation, 1,2,1),
        (team_set_relation, 0,2,1),
    (else_try),
        (team_set_relation, 0,1,-1),
        (team_set_relation, 1,0,-1),
    (try_end),
    # (set_cheer_at_no_enemy, 0),
    ]),

      (0, 0, ti_once, [],
        [
          (store_random_in_range, ":fog_distance", 25, 50),
          (store_random_in_range, ":haze_power", 25, 65),
          (set_global_haze_amount, ":haze_power"),
          (set_fog_distance, ":fog_distance", 0x131313),
       ]),

    (0,5,ti_once,[
    (main_hero_fallen),
    ],[
    (main_hero_fallen),
    (jump_to_menu, "mnu_wolfmen_ambush_lost"), #player must fall
    (quest_set_slot, "qst_the_wolfmen", slot_quest_current_state, 3),
    (finish_mission, 3),
    (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),

    (0, 0, 15, [
    (store_mission_timer_a, ":timer"),
    (ge, ":timer", 20),
    (ge, "$temp", 1),],
    [
    (store_random_in_range, ":entry", 15,18),
    (add_visitors_to_current_scene, ":entry", "trp_cynocephalus", 2),
    (display_message, "@More enemies have arrived!"),
    (val_sub, "$temp", 1),
    ]),

    (0, 0, 2, [],
    [
      (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
      (try_end),
    ]),

    common_inventory_not_available,
]),

  ("wolfmen_duel",mtf_battle_mode|mtf_commit_casualties,-1,
    "duel!",
    [
      (0, mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []), #player start
      (1, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []), #opponent start

     ], vc_weather +
     [

      custom_commander_critical_strike,

      (ti_on_agent_spawn, 0, 0, [],
        [

            (store_trigger_param_1, ":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (eq, ":troop_no", "trp_cynocephalus_boss"),

            (agent_set_no_death_knock_down_only, ":agent_no", 1),
            (assign, "$temp", 0),

      ]),

      (ti_on_agent_knocked_down, 0, 0, [],
        [
          (store_trigger_param_1, ":dead_agent"),
          (agent_get_troop_id, ":troop", ":dead_agent"),
          (eq, ":troop", "trp_cynocephalus_boss"),
          (val_add, "$temp", 1),
          (try_begin),
            (gt, "$temp", 2),
            (agent_set_no_death_knock_down_only, ":dead_agent", 0),
          (try_end),
      ]),

      (ti_before_mission_start, 0, ti_once, [], [

      (store_random_in_range, ":fog_distance", 80, 100),
      (store_random_in_range, ":haze_power", 70, 100),
      (set_global_haze_amount, ":haze_power"),
      (set_fog_distance, ":fog_distance", 0x333333),
      ] ),

      (1, 4, ti_once, [
          (assign, ":continue", 0),
          (try_for_agents,":cur_agent"),
            (agent_get_troop_id,":cur_troop_id",":cur_agent"),
            (eq,":cur_troop_id","trp_cynocephalus_boss"),
            (neg|agent_is_alive,":cur_agent"),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
        ],
        [
          (quest_set_slot, "qst_the_wolfmen", slot_quest_current_state, 6),\
          (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
          (finish_mission,4),
          (assign, "$auto_menu", "mnu_wolfmen_duel_won"),
          (change_screen_map),
      ]),
      (1, 4, ti_once,
        [
          (main_hero_fallen),
          #(eq, "$cam_mode", 0),
        ],
        [
          (assign, "$temp", 22),
          (finish_mission,4),
          (assign, "$auto_menu", "mnu_wolfmen_duel_lost"),
          (change_screen_map),
      ]),
    ],),

("wolfmen_raid",mtf_battle_mode|mtf_synch_inventory,-1,
    "battle",
    [
        (0, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (1, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (2, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (3, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (4, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (5, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (6, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (7, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (8, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (9, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (10, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (11, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (12, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (13, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (14, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (15, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (16, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (17, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (18, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (19, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (20, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (21, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (22, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (23, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (24, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (25, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (26, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (27, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (28, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (29, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (30, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (31, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (32, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (33, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (34, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (35, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (36, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (37, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (38, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (39, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (40, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (41, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (42, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (43, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (44, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (45, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (46, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (47, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (48, mtef_team_1|mtef_visitor_source, af_override_everything, 0, 1, []),
        (49, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),

        (50,mtef_team_1|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #attackers
        (51,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #inf
        (52,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #cav
        (53,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (54,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (55,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (56,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (57,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (58,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #player
    ], vc_weather +
    [

      (ti_before_mission_start, 0, 0, [],
        [
          (assign,"$g_battle_result",0),
          (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
          (team_set_relation,1,2,-1),
          (team_set_relation,0,1,-1),
      ]),

      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          ], []),

    (ti_before_mission_start, 0, ti_once, [], [
      (store_random_in_range, ":fog_distance", 80, 100),
      (store_random_in_range, ":haze_power", 70, 100),
      (set_global_haze_amount, ":haze_power"),
      (set_fog_distance, ":fog_distance", 0x333333),
    ] ),

 (ti_before_mission_start, 0, 0, [
             ],
    [
    (try_begin),
        (eq, "$temp3", 1),
        (scene_set_day_time, 16),
        (set_global_cloud_amount, 0),
    (try_end),]),
    common_inventory_not_available,
    common_battle_init_banner,
    immersive_troops,
    common_music_situation_update,
    common_battle_check_friendly_kills,
    common_siege_refill_ammo,

    (ti_after_mission_start, 0, 0, [], [(call_script, "script_music_set_situation_with_culture", mtf_sit_fight)]),

    (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),

    (1, 10, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
    [
      (try_begin),
        (main_hero_fallen),
        (assign, "$auto_menu", "$temp2"),
        #(jump_to_menu, "$temp2"),
      (else_try),
        (assign, "$auto_menu", "$temp1"),
        #(jump_to_menu, "$temp1"),
      (try_end),
      (stop_all_sounds, 1),
      (finish_mission),
    ]),

      (0, 0, ti_once, #orders for troops
        [
          (set_show_messages, 0),
          #defenders
          (team_give_order, 1, grc_everyone, mordr_stand_closer),
          (team_give_order, 1, grc_everyone, mordr_stand_closer),
          (team_give_order, 1, grc_everyone, mordr_stand_closer),
          (team_give_order, 1, grc_everyone, mordr_hold),

          (team_give_order, 0, grc_everyone, mordr_charge),

          (set_show_messages, 1),
          ], []
      ),


  ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications
),


  ("attila_sword_location_visit",0,-1,
    "Grove visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      #setting up first part - attila's sword location
      (ti_before_mission_start, 0, 0, [
          (eq,"$sword_found",0),
        ],
        [
          #teams neutral en principio
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),

      (ti_escape_pressed, 0, 0, [
          (lt,"$sword_found",4),
      ], [
          (assign,"$sword_found",0),
          (jump_to_menu, "mnu_attila_sword_location"),
          (finish_mission),
      ]),

      (0.1, 0, ti_once,
        [
          (eq,"$sword_found",1),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (set_party_battle_mode),
      ]),

      (0, 0, 0,[
          (ge,"$sword_found",1),
          (le,"$sword_found",2),

          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
        ],
        [
          (try_begin),
            (eq,"$sword_found",1),
            (assign,"$sword_found",2),
            (try_for_agents,":agent"),
              (agent_is_alive,":agent"),
              (agent_is_human,":agent"),
              (agent_get_team, ":cur_team", ":agent"),
              (agent_get_troop_id, ":troop_no", ":agent"),
              (try_begin),
                (neq, ":cur_team", 0),
                (is_between, ":troop_no", "trp_priscus", "trp_bigilas_son"),
                (agent_set_team, ":agent", 2),
                (agent_ai_set_aggressiveness, ":agent", 5),
                (agent_set_is_alarmed, ":agent", 1),
              (try_end),
              (team_set_relation, 2, 0, -1),
              (team_set_relation, 0, 2, -1),
            (try_end),
          (try_end),
      ]),

      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [
        (try_begin),
            (eq,"$sword_found",2),
            (display_message, "str_cannot_leave_now"),
        (else_try),
            (set_trigger_result,1),
        (try_end),], []),

      (1, 4, ti_once,
        [
          (eq,"$sword_found",2),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (call_script, "script_change_troop_renown", "trp_player", -10),
            (display_message, "@You have lost the duel to Bigilas. He thinks you're dead...",color_good_news),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (call_script, "script_fail_quest", "qst_sword_of_mars"),
            (finish_mission,4),
          (else_try),
            (tutorial_message_set_background, 1),
            (tutorial_message,"@The battle against Bigilas was hard, but you've risen to victory. Looking around, you find the sword and some gold..."),
            (call_script, "script_troop_add_gold", "trp_player", 3000),
            (troop_add_item, "trp_player", "itm_sword_of_mars",0),
            (call_script, "script_change_player_right_to_rule", 15),
            (call_script, "script_change_troop_renown", "trp_player", 10),
            (call_script, "script_succeed_quest", "qst_sword_of_mars"),
            (call_script, "script_end_quest", "qst_sword_of_mars"),
            (assign,"$sword_found",3),
            (assign, "$ildico_companion", 1), #allows dialogue to recruit her
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),
      #attila's sword location end
    ],),



  ("nero_visit",0,-1,
    "Grove of Nymphs visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      #setting up first part
      (ti_before_mission_start, 0, 0, [
          (eq,"$nero_interaction",0),
        ],
        [
          #teams neutral en principio
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),

      (ti_escape_pressed, 0, 0, [
          (lt,"$g_bagadua_quest",5),
      ], [
          (assign,"$nero_interaction",0),
          (jump_to_menu, "mnu_nero_grove"),
          (finish_mission),
      ]),

      (0.1, 0, ti_once,
        [
          (eq,"$nero_interaction",1),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (set_party_battle_mode),
      ]),

      (0, 0, 0,[
          (ge,"$nero_interaction",0),
          (le,"$nero_interaction",5),

          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
        ],
        [
          (try_begin),
            (eq,"$nero_interaction",1),
            (assign,"$nero_interaction",2),
            (try_for_agents,":agent"),
              (agent_is_alive,":agent"),
              (agent_is_human,":agent"),
              (agent_get_team, ":cur_team", ":agent"),
              (agent_get_troop_id, ":troop_no", ":agent"),
              (try_begin),
                (neq, ":cur_team", 0),
                (is_between, ":troop_no", "trp_german_bard", "trp_gandhara_mercenary"),
                (agent_set_team, ":agent", 2),
                (agent_ai_set_aggressiveness, ":agent", 5),
                (agent_set_is_alarmed, ":agent", 1),
              (try_end),
              (team_set_relation, 2, 0, -1),
              (team_set_relation, 0, 2, -1),
            (try_end),
          (try_end),
      ]),

      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (1, 4, ti_once,
        [
          (eq,"$nero_interaction",2),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (call_script, "script_change_troop_renown", "trp_player", -5),
            (display_message, "@You have lost your fight against Nero... He thinks you're dead",color_good_news),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (call_script, "script_fail_quest", "qst_nero_larper_quest"),
            (call_script, "script_cancel_quest", "qst_nero_larper_quest"), #madsci
            (disable_party, "p_grove_of_nymphs"),
            (finish_mission,4),
          (else_try),
            (tutorial_message_set_background, 1),
            #(tutorial_message,"@Your fight against Nero was hard, but you've emerged victorious. You should visit Longinus with the lyre..."),
            (tutorial_message,"@Your fight against Nero was hard, but you've emerged victorious."),
            (call_script, "script_troop_add_gold", "trp_player", 1000),
            (troop_add_item, "trp_player", "itm_nero_lyre_final",0),
            (call_script, "script_change_troop_renown", "trp_player", 5),
            (quest_set_slot,"qst_nero_larper_quest", slot_quest_current_state, 5),
            (call_script, "script_cancel_quest", "qst_nero_larper_quest"), #madsci I assume this quest is over now?
            (assign,"$nero_interaction",3),
            (disable_party, "p_grove_of_nymphs"),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),
    ],),

  ("abandoned_temple_visit",0,-1,
    "abandoned temple visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (ti_before_mission_start, 0, 0, [
          (eq,"$mithraic_temple_explored",0),
        ],
        [
          #teams neutral en principio
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),

      (ti_escape_pressed, 0, 0, [
          (lt,"$mithraic_temple_explored",4),
      ], [
          (assign,"$mithraic_temple_explored",0),
          (jump_to_menu, "mnu_abandoned_mithraic_temple"),
          (finish_mission),
      ]),

      (0.1, 0, ti_once,
        [
          (eq,"$mithraic_temple_explored",1),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (set_party_battle_mode),
      ]),

      (1, 0, 0,[
          (ge,"$mithraic_temple_explored",1),
          (le,"$mithraic_temple_explored",2),

          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
        ],
        [
          (try_begin),
            (eq,"$mithraic_temple_explored",1),

            (assign,"$mithraic_temple_explored",2),
            (try_for_agents,":agent"),
              (agent_is_alive,":agent"),
              (agent_is_human,":agent"),
              (agent_get_team, ":cur_team", ":agent"),
              (agent_get_troop_id, ":troop_no", ":agent"),
              (try_begin),
                (neq, ":cur_team", 0),
                (is_between, ":troop_no", "trp_chrisitan_zealot", "trp_dplmc_chamberlain"),
                (agent_set_team, ":agent", 2),
                (agent_ai_set_aggressiveness, ":agent", 5),
                (agent_set_is_alarmed, ":agent", 1),
              (try_end),
              (team_set_relation, 2, 0, -1),
              (team_set_relation, 0, 2, -1),
            (try_end),
          (try_end),
      ]),

      (3, 0, ti_once,
        [
          (eq,"$mithraic_temple_explored",2),
        ],
        [
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (store_random_in_range, ":random_entry_point", 2, 4),
          (add_visitors_to_current_scene, ":random_entry_point", "trp_brigand", 4), #spawns 4 bandits to assist in attacking the player
      ]),

      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (1, 4, ti_once,
        [
          (eq,"$mithraic_temple_explored",2),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (call_script, "script_change_troop_renown", "trp_player", -5),
            (display_message, "@You lost have the fight against the bandits. They think you're dead...",color_good_news),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (call_script, "script_fail_quest", "qst_mithras_quest"),
            (disable_party, "p_abandoned_mithraic_temple"),
            (finish_mission,4),
          (else_try),
            (tutorial_message_set_background, 1),
            (tutorial_message,"@The battle against the bandits was tough, but you emerge victorious. Searching around the rest of the cave, you find what you are looking for..."),
            (call_script, "script_troop_add_gold", "trp_player", 1000),
            (troop_add_item, "trp_player", "itm_mithras_relic",0),
            (quest_set_slot,"qst_mithras_quest", slot_quest_current_state, 4),
            (call_script, "script_change_troop_renown", "trp_player", 5),
            (assign,"$mithraic_temple_explored",3),
            (disable_party, "p_abandoned_mithraic_temple"),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),
    ],),


  ("abandoned_silver_mine",0,-1,
    "Silver Mines",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (14,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (15,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (16,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 650, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (ti_before_mission_start, 0, 0, [
        (eq,"$basilius_interaction",0),
        ],
        [
          #teams neutral on start
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),


      (ti_escape_pressed, 0, 0, [
          (check_quest_active,"qst_bagadua_quest"),
          (quest_slot_eq,"qst_bagadua_quest",slot_quest_current_state,2),
        ], [
          (quest_set_slot,"qst_bagadua_quest",slot_quest_current_state, 1),
          (finish_mission),
          (leave_encounter),
          (change_screen_return),
      ]),

      (1, 4, ti_once,
        [ (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (eq,"$basilius_interaction",1),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (display_message, "@You have lost the fight against Basilius, he and his men flee, believing you are dead...",color_good_news),
            (call_script, "script_change_troop_renown", "trp_player", -15),

            (try_begin), #checks if the quest is active, if so fails it
              (check_quest_active,"qst_bagadua_quest"),
              (call_script, "script_fail_quest", "qst_bagadua_quest"),
            (try_end),

            (assign, "$abandoned_silver_mine", 1), #basilius was not killed
            (finish_mission),
            (leave_encounter),
            (change_screen_return),
          (else_try),
            (tutorial_message_set_background, 1),
            (tutorial_message,"@You have killed the so called 'king' of the bagadua, Basilius, ending his banditry once and for all..."),
            (call_script, "script_troop_add_gold", "trp_player", 675),
            (call_script, "script_change_troop_renown", "trp_player", 15),
		(troop_set_slot, "trp_knight_bagadua_1", slot_troop_occupation, dplmc_slto_dead), #madsci make sure the game knows this guy is dead as well
		(troop_set_note_available,"trp_knight_bagadua_1",1),
		(faction_set_slot, "fac_forest_bandits", slot_faction_leader, "trp_generic_agitator"),

            (try_begin), #checks if the quest is active, if so fails it
              (check_quest_active,"qst_bagadua_quest"),
              (call_script, "script_succeed_quest", "qst_bagadua_quest"),
              (quest_set_slot,"qst_bagadua_quest",slot_quest_current_state, 3),
              (str_store_troop_name_link, s2, "trp_hydatius"),
              (add_quest_note_from_sreg, "qst_bagadua_quest", 5, "@Basilius has been killed. Return to {s2} for your reward.",0),
            (try_end),

            (assign, "$abandoned_silver_mine", 2), #basilius was killed
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),


      (0.1, 0, ti_once,
        [
          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (eq,"$basilius_interaction",1),
        ],
        [
          (mission_disable_talk),
          (team_set_relation, 0, 1, -1),  #Teams
          (team_set_relation, 0, 2, -1),
          (team_set_relation, 1, 0, -1),
          (team_set_relation, 1, 2, -1),
          (team_set_relation, 2, 0, -1),
          (team_set_relation, 2, 1, -1),
          (set_party_battle_mode),
      ]),


      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (neq, ":troop", "trp_player"),
          (troop_is_hero, ":troop"),
          (main_party_has_troop, ":troop"),

          (get_player_agent_no, ":player"),
          (agent_get_team, ":playerteam", ":player"),
          (agent_get_position,pos1,":player"),

          (agent_set_team, ":agent", ":playerteam"),
          (agent_set_division, ":agent", 8),
          (agent_add_relation_with_agent, ":agent", ":player", 1),
          (agent_set_is_alarmed, ":agent", 1),
          (set_show_messages, 0),
          (team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
          (set_show_messages, 1),
      ]),

      (0,7,0,[(eq, "$cam_time", 1),],
        [
          (tutorial_message, -1),
          (tutorial_message_set_background, 0),
          (assign, "$cam_time", 0),
      ]),

      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

    ],),

  ("mithras_quest_villa",0,-1, #
    "Villa",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (14,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (15,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (16,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 650, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (ti_before_mission_start, 0, 0, [
        ],
        [
          #teams neutral en principio
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),

      (ti_escape_pressed, 0, 0, [
          (check_quest_active,"qst_mithras_statue_quest"),
          (quest_slot_eq,"qst_mithras_statue_quest",slot_quest_current_state,7),
        ], [
          (quest_set_slot,"qst_mithras_statue_quest",slot_quest_current_state, 2), #
          (finish_mission),
          (leave_encounter),
          (change_screen_return),
      ]),

      (ti_escape_pressed, 0, 0, [
          (check_quest_active,"qst_agrippinus_quest"),
          (quest_slot_eq,"qst_agrippinus_quest",slot_quest_current_state,2),
        ], [
          (quest_set_slot,"qst_agrippinus_quest",slot_quest_current_state, 1), #
          (finish_mission),
          (leave_encounter),
          (change_screen_return),
      ]),

      (1, 4, ti_once,
        [ (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (check_quest_active,"qst_mithras_statue_quest"),(quest_slot_eq,"qst_mithras_statue_quest",slot_quest_current_state,7),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (display_message, "@You have lost the fight against Gnaeus Turibius and his guards. They think you're dead...",color_good_news),
            (call_script, "script_change_troop_renown", "trp_player", -10),
            (call_script, "script_fail_quest", "qst_mithras_statue_quest"),
            (finish_mission),
            (leave_encounter),
            (change_screen_return),
          (else_try),
            (tutorial_message_set_background, 1),
            (tutorial_message,"@You have defeated Gnaeus Turibius and his guards. You and your companions loot his villa for valuables..."),
            (call_script, "script_troop_add_gold", "trp_player", 3750),
            (call_script, "script_change_troop_renown", "trp_player", 5),
            (call_script, "script_change_player_honor", -5),
            (troop_add_items, "trp_player", "itm_wine",2),
            (quest_set_slot,"qst_mithras_statue_quest",slot_quest_current_state, 3), # fight final
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (assign, "$g_mithras_statue_quest", 3), #will be used for violent option
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),


      (0.1, 0, ti_once,
        [
          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (check_quest_active,"qst_mithras_statue_quest"),(quest_slot_eq,"qst_mithras_statue_quest",slot_quest_current_state,7),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (team_set_relation, 0, 1, -1),  #Teams
          (team_set_relation, 0, 2, -1),
          (team_set_relation, 1, 0, -1),
          (team_set_relation, 1, 2, -1),
          (team_set_relation, 2, 0, -1),
          (team_set_relation, 2, 1, -1),
          (set_party_battle_mode),
      ]),

      #agrippinus quest
      (ti_escape_pressed, 0, 0, [
          (check_quest_active,"qst_agrippinus_quest"),
          (quest_slot_eq,"qst_agrippinus_quest",slot_quest_current_state,2),
        ], [
          (quest_set_slot,"qst_agrippinus_quest",slot_quest_current_state, 1),
          (finish_mission),
          (leave_encounter),
          (change_screen_return),
      ]),

      (1, 4, ti_once,
        [ (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (check_quest_active,"qst_agrippinus_quest"),(quest_slot_eq,"qst_agrippinus_quest",slot_quest_current_state,2),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (display_message, "@You have lost the fight against Agrippinus, he and his men flee, believing you are dead. Majorian will not be happy...",color_good_news),
            (call_script, "script_change_troop_renown", "trp_player", -20),
            (call_script, "script_change_player_relation_with_troop", "trp_kingdom_1_lord", -10),
            (call_script, "script_fail_quest", "qst_agrippinus_quest"),
            (finish_mission),
            (leave_encounter),
            (change_screen_return),
          (else_try),
            (tutorial_message_set_background, 1),
            (tutorial_message,"@You have defeated Agrippinus and his guards. Although wounded, Agrippinus is alive, and is taken into custody"),
            (call_script, "script_troop_add_gold", "trp_player", 1000),
            (call_script, "script_change_troop_renown", "trp_player", 5),
            (party_force_add_prisoners, "p_main_party", "trp_agrippinus", 1), #adds agrippinus as prisoner
            (quest_set_slot,"qst_agrippinus_quest",slot_quest_current_state, 3),
            (add_quest_note_from_sreg, "qst_agrippinus_quest", 5, "@Agrippinus has been captured. Return him to Majorian for your reward.",0),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission,4),
            (leave_encounter),
            (change_screen_return),
          (try_end),
      ]),


      (0.1, 0, ti_once,
        [
          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (check_quest_active,"qst_agrippinus_quest"),(quest_slot_eq,"qst_agrippinus_quest",slot_quest_current_state,2),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (team_set_relation, 0, 1, -1),  #Teams
          (team_set_relation, 0, 2, -1),
          (team_set_relation, 1, 0, -1),
          (team_set_relation, 1, 2, -1),
          (team_set_relation, 2, 0, -1),
          (team_set_relation, 2, 1, -1),
          (set_party_battle_mode),
      ]),


      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (neq, ":troop", "trp_player"),
          (troop_is_hero, ":troop"),
          (main_party_has_troop, ":troop"),

          (get_player_agent_no, ":player"),
          (agent_get_team, ":playerteam", ":player"),
          (agent_get_position,pos1,":player"),

          (agent_set_team, ":agent", ":playerteam"),
          (agent_set_division, ":agent", 8),
          (agent_add_relation_with_agent, ":agent", ":player", 1),
          (agent_set_is_alarmed, ":agent", 1),
          (set_show_messages, 0),
          (team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
          (set_show_messages, 1),
      ]),



      (0,7,0,[(eq, "$cam_time", 1),],
        [
          (tutorial_message, -1),
          (tutorial_message_set_background, 0),
          (assign, "$cam_time", 0),
      ]),

      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

    ],),

   (
    "berserker_mission",0,-1,
    "berserker visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (1,mtef_visitor_source,af_override_horse,0,1,[]),
     ], vc_weather +
    [

     (0, 0, ti_once, [],[
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "trp_donar_berserker"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (try_begin),
                       (main_hero_fallen),
          (finish_mission),
         (leave_encounter),
        (change_screen_return),
                       (else_try),
                       (eq, ":not_alive",1),
                (display_message, "@ You have beaten the berserker, as you go through his belongings you find..."),
                (troop_add_item, "trp_player", "itm_gold_jewelry",0),
                (troop_add_item, "trp_player", "itm_donars_club",0),
                (call_script, "script_troop_add_gold", "trp_player", 850),
                (call_script, "script_change_troop_renown", "trp_player", 15),
                           (assign,"$g_hero_result",1),
                       (finish_mission),
                       (leave_encounter),
                       (change_screen_return),
                       (try_end),
                       ]),

                        (0.1, 0, ti_once, [
            (store_skill_level,":player_sneaking_skill","skl_athletics","trp_player"),


                       (try_begin),
                       (eq,":player_sneaking_skill",10),
                (assign,":sneak_distance",500),
            (else_try),
                (eq,":player_sneaking_skill",9),
                (assign,":sneak_distance",600),
            (else_try),
                (eq,":player_sneaking_skill",8),
                (assign,":sneak_distance",700),
            (else_try),
                (eq,":player_sneaking_skill",7),
                (assign,":sneak_distance",800),
            (else_try),
                (eq,":player_sneaking_skill",6),
                (assign,":sneak_distance",900),
            (else_try),
                (eq,":player_sneaking_skill",5),
                (assign,":sneak_distance",1000),
            (else_try),
                (eq,":player_sneaking_skill",4),
                (assign,":sneak_distance",1100),
            (else_try),
                (eq,":player_sneaking_skill",3),
                (assign,":sneak_distance",1200),
            (else_try),
                (eq,":player_sneaking_skill",2),
                (assign,":sneak_distance",1300),
            (else_try),
                (eq,":player_sneaking_skill",1),
                (assign,":sneak_distance",1400),
            (else_try),
                (assign,":sneak_distance",1500),
           (try_end),
        (get_player_agent_no,":player_agent"),
  (agent_get_position,pos1,":player_agent"),
  (assign,":continue",0),
  (try_for_agents, ":cur_agent"),
    (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
    (eq, ":cur_agent_troop", "trp_donar_berserker"),
             (assign,"$old_1",":cur_agent"),
    (agent_get_position,pos2,":cur_agent"),
    (get_distance_between_positions,":distance",pos1,pos2),
    (lt,":distance",":sneak_distance"),
    (assign,":continue",1),
  (try_end),
  (eq,":continue",1),
            ],
           [(set_party_battle_mode),
            (try_for_agents, ":cur_agent"),
              (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
              (eq, ":cur_agent_troop", "trp_donar_berserker"),
            (agent_set_team, ":cur_agent", 1),
            (try_end),
             ]),

      (2, 0, ti_once, [ (neg|agent_is_alive,"$old_1"),],
     [
                (display_message, "@ You have beaten the berserker, as you go through his belongings you find..."),
                (troop_add_item, "trp_player", "itm_gold_jewelry",0),
                (troop_add_item, "trp_player", "itm_donars_club",0),
                (call_script, "script_troop_add_gold", "trp_player", 850),
                (call_script, "script_change_troop_renown", "trp_player", 15),
                           (assign,"$g_hero_result",1),
       ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),
      ],),
#duels for excubitor quest
  (
    "alexandria_revolt",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [ (0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[itm_club]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),
      (7,mtef_visitor_source|mtef_team_1,af_override_horse|af_override_weapons,aif_start_alarmed,1,[itm_club]),

     ], vc_weather +
    [
      common_inventory_not_available,

      common_battle_init_banner,

      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),

      (1, 4, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
             (jump_to_menu, "mnu_alexandria_zealot_battle_lost"),
           (else_try),
             (jump_to_menu, "mnu_alexandria_zealot_battle_won"),
           (try_end),
           (finish_mission),
           ]),
    ],),


  ( "sinuessa_battle",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (1,mtef_defenders|mtef_team_0,0,aif_start_alarmed,65,[]),
     (0,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,65,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ], vc_weather +
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         (assign, ":initial_courage_score", 5000),

         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 35),
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700

         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"),

         (agent_get_party_id, ":agent_party", ":agent_no"),
         (party_get_morale, ":cur_morale", ":agent_party"),

         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"),

         #average = 5000 + 700 + 1500 = 7200; min : 5700, max : 8700
         #morale effect = min : -2100(party morale is 0), average : 0(party morale is 70), max : 900(party morale is 100)
         #min starting : 3600, max starting  : 9600, average starting : 7200
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"),
         ]),

      common_battle_init_banner,

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),

        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
        (call_script, "script_apply_death_effect_on_courage_scores_vc", ":dead_agent_no", ":killer_agent_no"), #madsci
       ]),

      common_battle_tab_press,
      immersive_troops,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (try_begin),
          (store_mission_timer_a, ":elapsed_time"),
          (gt, ":elapsed_time", 20),
          (str_store_string, s5, "str_retreat"),
          (call_script, "script_simulate_retreat", 10, 20, 1),
        (try_end),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (call_script, "script_place_player_banner_near_inventory_bms"),

         (party_clear, "p_routed_enemies"),

         (assign, "$g_latest_order_1", 1),
         (assign, "$g_latest_order_2", 1),
         (assign, "$g_latest_order_3", 1),
         (assign, "$g_latest_order_4", 1),
         ]),


      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_place_player_banner_near_inventory"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           (assign, "$g_defender_reinforcement_limit", 2),
                           ##diplomacy begin
                           (call_script, "script_init_death_cam"),
                           # (assign, "$g_dplmc_charge_when_dead", 0),
                           ##diplomacy end
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [

      #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
      #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
      (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
      (assign, ":total_enemy_soldiers", reg0),

      #decrease number of agents already in battle area to find all number of reinforcement enemies
      (assign, ":enemy_soldiers_in_battle_area", 0),
      (try_for_agents,":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_party_id, ":agent_party", ":cur_agent"),
        (try_begin),
          (neq, ":agent_party", "p_main_party"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":enemy_soldiers_in_battle_area", 1),
        (try_end),
      (try_end),
      (store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

      (try_begin),
        (lt, ":total_enemy_reinforcements", 15),
        (ge, "$defender_reinforcement_stage", 2),
        (eq, "$defender_reinforcement_limit_increased", 0),
        (val_add, "$g_defender_reinforcement_limit", 1),
        (assign, "$defender_reinforcement_limit_increased", 1),
      (try_end),
      #new (25.11.09) ends


      (lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_defenders", 0),
                 (lt,":num_defenders",6)],
           [(add_reinforcements_to_entry,0,7),(assign, "$defender_reinforcement_limit_increased", 0),(val_add,"$defender_reinforcement_stage",1)]),

      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",6)],
           [(add_reinforcements_to_entry,3,7),(val_add,"$attacker_reinforcement_stage",1)]),

      #common_battle_check_victory_condition,
      #common_battle_victory_display,

      (1, 4, ti_once,
        [
          (store_mission_timer_a,":cur_time"),
          (ge, ":cur_time", 5),
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (assign, "$g_battle_result", 1),
            (call_script, "script_count_mission_casualties_from_agents"),
            (jump_to_menu, "mnu_sinuessa_battle_lost"),
          (else_try),
            (assign,"$g_battle_won",1),
            (assign, "$g_battle_result", 1),
            (call_script, "script_count_mission_casualties_from_agents"),
            (jump_to_menu, "mnu_sinuessa_battle_won"),
          (try_end),
          (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
          (finish_mission, 4),
      ]),

#madsci
      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  (assign, "$g_dplmc_cam_activated", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
            ]),

      common_battle_inventory,

	#madsci
      (3, 0, 0, [
          (this_or_next|eq, "$battle_phase", BP_Fight),
          (eq, "$battle_phase", 0),
          (mission_tpl_are_all_agents_spawned), #madsci
          (call_script, "script_apply_effect_of_other_people_on_courage_scores_vc"),
              ], []), #calculating and applying effect of people on others courage scores

      (3, 0, 0, [
          (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),
            #(call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
            (call_script, "script_decide_run_away_or_not_vc", ":agent_no", ":mission_time"), #madsci
          (try_end),
              ], []), #controlling courage score and if needed deciding to run away for each agent

      common_battle_order_panel,
      common_battle_order_panel_tick,

    ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications + ai_horn,  #SB : horse cull
  ),

  ("venedi_battle",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [
     (0,mtef_team_0, af_override_horse,aif_start_alarmed,60,[]),
     (1,mtef_team_0, af_override_horse,aif_start_alarmed,60,[]),
     (2,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (3,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (4,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (5,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (6,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (7,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (8,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (9,mtef_visitor_source|mtef_team_1,  0,aif_start_alarmed,1,[]),
     (10,mtef_visitor_source|mtef_team_1, 0,aif_start_alarmed,1,[]),

    ], vc_weather +
    [
      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      common_music_situation_update,
      common_battle_init_banner,
      common_inventory_not_available,


      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      common_after_mission_start,
      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 4, ti_once,
        [
          (store_mission_timer_a,":cur_time"),
          (ge, ":cur_time", 5),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (assign,"$g_battle_won",1),
          (assign, "$g_battle_result", 1),
          (call_script, "script_count_mission_casualties_from_agents"),
          (jump_to_menu, "mnu_venedi_battle_won"),
          (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
          (finish_mission, 4),
      ]),

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (call_script, "script_cf_dplmc_battle_continuation"),
              (else_try),
                ##diplomacy end
                (assign, "$pin_player_fallen", 1),
                (str_store_string, s5, "str_retreat"),
                (call_script, "script_simulate_retreat", 10, 20, 1),
                (assign, "$g_battle_result", -1),
                (set_mission_result,-1),
                (call_script, "script_count_mission_casualties_from_agents"),
                (jump_to_menu, "mnu_venedi_battle_lost"),
                (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
                (finish_mission, 4),
                ##diplomacy begin
              (try_end),
              ##diplomacy end
            ]),

      (
      0, 0, ti_once, [],
      [
      (set_show_messages, 0),
        (try_for_range, ":cur_group", 0, 9),
          (team_give_order, 1, ":cur_group", mordr_stand_closer),
          (team_give_order, 1, ":cur_group", mordr_stand_closer),
        (try_end),
       (set_show_messages, 1),
        ]
      ),

    ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + enhanced_common_battle_triggers,
  ),

("agrippinus_villa_fight", mtf_battle_mode,-1,
    "battle",
    [ (0,mtef_visitor_source|mtef_team_0, 0,aif_start_alarmed,0,[]),
      (1,mtef_visitor_source|mtef_team_0, 0,aif_start_alarmed,0,[]),
      (2,mtef_visitor_source|mtef_team_1, 0,aif_start_alarmed,0,[]),
      (3,mtef_visitor_source|mtef_team_1, 0,aif_start_alarmed,0,[]),
      (4,mtef_visitor_source|mtef_team_1, 0,aif_start_alarmed,0,[]),
    ], vc_weather +
    [
    (ti_on_agent_spawn, 0, 0, [],
   [
    (store_trigger_param_1, ":agent"),
    (agent_is_human, ":agent"),
    (agent_is_ally, ":agent"),
    (agent_get_troop_id, ":troop", ":agent"),
    (neq, ":troop", "trp_player"),
    (try_begin),
        (troop_is_hero, ":troop"),
        (agent_set_damage_modifier,  ":agent", 250),
        (agent_set_accuracy_modifier,  ":agent", 500),
    (else_try),
        (agent_set_damage_modifier,  ":agent", 150),
        (agent_set_accuracy_modifier,  ":agent", 500),
    (try_end),
    ]),


 (ti_before_mission_start, 0, 0, [
             ],
    [
    (try_begin),
        (eq, "$temp3", 1),
        (scene_set_day_time, 16),
        (set_global_cloud_amount, 0),
    (try_end),]),
    common_inventory_not_available,
    common_battle_init_banner,
    immersive_troops,
    common_music_situation_update,
    common_battle_check_friendly_kills,

    (ti_after_mission_start, 0, 0, [], [(call_script, "script_music_set_situation_with_culture", mtf_sit_fight)]),

    (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),

    (1, 10, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
    [
      (try_begin),
        (main_hero_fallen),
        (jump_to_menu, "$temp2"),
      (else_try),
        (jump_to_menu, "$temp1"),
      (try_end),
      (stop_all_sounds, 1),
      (finish_mission),
    ]),

    (0, 0, ti_once, [],
    [
    (set_fixed_point_multiplier, 100),
    (set_show_messages, 0),
    (entry_point_get_position, pos10, 1),
    (position_get_y, ":y", pos10),
    (val_add, ":y", 10000),
    (position_set_y, pos10, ":y"),
    (team_set_order_position, 0, grc_everyone, pos10),
    (try_for_range, ":cur_group", 0, grc_everyone),
      (team_give_order, 0, ":cur_group", mordr_hold),
      (team_give_order, 0, ":cur_group", mordr_spread_out),
    (try_end),

    (entry_point_get_position, pos10, 4),
    (position_get_y, ":y", pos10),
    (val_add, ":y", 10000),
    (position_set_y, pos10, ":y"),
    (team_set_order_position, 1, grc_everyone, pos10),
    (try_for_range, ":cur_group", 0, grc_everyone),
      (team_give_order, 1, ":cur_group", mordr_hold),
      (team_give_order, 1, ":cur_group", mordr_spread_out),
    (try_end),
    (set_show_messages, 1),
    ]),

    (0, 0, ti_once, [
    (store_mission_timer_a, ":time"),
    (gt, ":time", 10),
    ],
    [

    (set_show_messages, 0),
    (try_for_range, ":cur_group", 0, grc_everyone),
      (team_give_order, 0, ":cur_group", mordr_charge),
      (team_give_order, 0, ":cur_group", mordr_spread_out),
    (try_end),

    (try_for_range, ":cur_group", 0, grc_everyone),
      (team_give_order, 1, ":cur_group", mordr_charge),
      (team_give_order, 1, ":cur_group", mordr_spread_out),
    (try_end),
    (set_show_messages, 1),
    ]),
  ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications + ai_horn
),



("noricum_sarmatian_attack",mtf_battle_mode|mtf_synch_inventory,-1,
    "battle",
    [
        (0, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (1, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (2, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (3, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (4, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (5, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (6, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (7, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (8, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (9, mtef_team_0|mtef_visitor_source, af_override_horse, 0, 1, []),
        (10, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (11, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (12, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (13, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (14, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (15, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (16, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (17, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (18, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (19, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (20, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (21, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (22, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (23, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (24, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (25, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (26, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (27, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (28, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (29, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (30, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (31, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (32, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (33, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (34, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (35, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (36, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (37, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (38, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (39, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (40, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (41, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (42, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (43, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (44, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (45, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (46, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (47, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),
        (48, mtef_team_1|mtef_visitor_source, af_override_everything, 0, 1, []),
        (49, mtef_team_0|mtef_visitor_source, af_override_everything, 0, 1, []),

        (50,mtef_team_1|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #attackers
        (51,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #inf
        (52,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #cav
        (53,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (54,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (55,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (56,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (57,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #archers
        (58,mtef_team_0|mtef_visitor_source, 0,aif_start_alarmed,0,[]), #player
    ], vc_weather +
    [

      (ti_before_mission_start, 0, 0, [],
        [
          (assign,"$g_battle_result",0),
          (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
          (team_set_relation,1,2,-1),
          (team_set_relation,0,1,-1),
      ]),

      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          ], []),

 (ti_before_mission_start, 0, 0, [
             ],
    [
    (try_begin),
        (eq, "$temp3", 1),
        (scene_set_day_time, 16),
        (set_global_cloud_amount, 0),
    (try_end),]),
    common_inventory_not_available,
    common_battle_init_banner,
    immersive_troops,
    common_music_situation_update,
    common_battle_check_friendly_kills,
    common_siege_refill_ammo,

    (ti_after_mission_start, 0, 0, [], [(call_script, "script_music_set_situation_with_culture", mtf_sit_fight)]),

    (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),

    (1, 10, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
    [
      (try_begin),
        (main_hero_fallen),
        (jump_to_menu, "$temp2"),
      (else_try),
        (jump_to_menu, "$temp1"),
      (try_end),
      (stop_all_sounds, 1),
      (finish_mission),
    ]),

      (0, 0, ti_once, #orders for troops
        [
          (set_show_messages, 0),
          (team_give_order, 1, grc_everyone, mordr_stand_closer),
          (team_give_order, 1, grc_everyone, mordr_charge),

          (team_give_order, 0, grc_infantry, mordr_stand_closer), #infantry shield wall
          (team_give_order, 0, grc_infantry, mordr_stand_closer),
          (team_give_order, 0, grc_infantry, mordr_stand_closer),
          (team_give_order, 0, grc_infantry, mordr_hold),

          (team_give_order, 0, 3, mordr_stand_closer), #polearms shield wall
          (team_give_order, 0, 3, mordr_stand_closer),
          (team_give_order, 0, 3, mordr_stand_closer),
          (team_give_order, 0, 3, mordr_hold),

          (entry_point_get_position, pos10, 52),
          (team_set_order_position, 0, grc_infantry, pos10),
          (team_set_order_position, 0, 3, pos10),

          #(entry_point_get_position, pos10, 53),
          #(team_set_order_position, 0, grc_archers, pos10),
          (team_give_order, 0, grc_archers, mordr_stand_ground),

          (team_give_order, 0, grc_cavalry, mordr_stand_closer), #mordr_stand_ground
          (team_give_order, 0, grc_cavalry, mordr_charge),
          (set_show_messages, 1),
          ], []
      ),

  ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications
),


  ("br_abandoned_villa_visit",0,-1,
    "abandoned villa visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (ti_before_mission_start, 0, 0, [
          (check_quest_active,"qst_black_river"),
          (quest_slot_eq, "qst_black_river", slot_quest_current_state, 5),
        ],
        [
          #teams neutral en principio
          (team_set_relation, 0, 1, 0),  #Teams
          (team_set_relation, 0, 2, 0),
          (team_set_relation, 1, 0, 0),
          (team_set_relation, 1, 2, 0),
          (team_set_relation, 2, 0, 0),
          (team_set_relation, 2, 1, 0),
      ]),

      (ti_escape_pressed, 0, 0, [
          (quest_slot_eq, "qst_black_river", slot_quest_current_state, 6),
      ], [
          (quest_set_slot,"qst_black_river", slot_quest_current_state, 5),
          (jump_to_menu, "mnu_noricum_sarmatian_attack_won"),
          (finish_mission),
      ]),

      (0.1, 0, ti_once,
        [
          (quest_slot_eq, "qst_black_river", slot_quest_current_state, 6),
        ],
        [
          (mission_disable_talk), #ya no conversaciones
          (set_party_battle_mode),
      ]),

      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (neq, ":troop", "trp_player"),
          (troop_is_hero, ":troop"),
          (main_party_has_troop, ":troop"),

          (get_player_agent_no, ":player"),
          (agent_get_team, ":playerteam", ":player"),
          (agent_get_position,pos1,":player"),

          (agent_set_team, ":agent", ":playerteam"),
          (agent_set_division, ":agent", 8),
          (agent_add_relation_with_agent, ":agent", ":player", 1),
          (agent_set_is_alarmed, ":agent", 1),
          (set_show_messages, 0),
          (team_give_order, ":playerteam", 8, mordr_follow), #Division 8 to avoid potential conflicts
          (set_show_messages, 1),
      ]),

      (1, 0, 0,[
          (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
        ],
        [
          (try_begin),
            (quest_slot_eq, "qst_black_river", slot_quest_current_state, 6),
            (try_for_agents,":agent"),
              (agent_is_alive,":agent"),
              (agent_is_human,":agent"),
              (agent_get_team, ":cur_team", ":agent"),
              (agent_get_troop_id, ":troop_no", ":agent"),
              (try_begin),
                (neq, ":cur_team", 0),
                (is_between, ":troop_no", "trp_br_amatus", "trp_tuldila"),
                (agent_set_team, ":agent", 2),
                (agent_ai_set_aggressiveness, ":agent", 5),
                (agent_set_is_alarmed, ":agent", 1),
              (try_end),
              (team_set_relation, 2, 0, -1),
              (team_set_relation, 0, 2, -1),
            (try_end),
          (try_end),
      ]),

      (1, 0, ti_once,
        [
          (quest_slot_eq, "qst_black_river", slot_quest_current_state, 6),
        ],
        [
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (store_random_in_range, ":random_entry_point", 2, 6),
          (add_visitors_to_current_scene, ":random_entry_point", "trp_langobard_retainer", 4), #spawns bandits to attack player
      ]),

      (0, 0, ti_once, [], [
          (call_script, "script_combat_music_set_situation_with_culture"),
      ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (1, 4, ti_once,
        [
          (quest_slot_eq, "qst_black_river", slot_quest_current_state, 6),
          (this_or_next|main_hero_fallen),
          (num_active_teams_le,1),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (call_script, "script_change_troop_renown", "trp_player", -5),
            (display_message, "@You lost have the fight against the Langobards. They think you're dead...",color_good_news),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (call_script, "script_fail_quest", "qst_black_river"),
            (jump_to_menu, "mnu_black_river_lost"),
            (finish_mission,4),
          (else_try),
            (tutorial_message_set_background, 1),
            (quest_set_slot,"qst_black_river", slot_quest_current_state, 7),
            (call_script, "script_change_troop_renown", "trp_player", 5),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (jump_to_menu, "mnu_black_river_villa_won"),
            (finish_mission,4),
          (try_end),
      ]),
    ],),

  ("bounty_hunter_duel",mtf_battle_mode,-1,
    "bounty_hunter_duel",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
        [
          (assign,"$g_battle_result",0),
          (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
          (team_set_relation,1,2,-1),
          (team_set_relation,0,1,-1),
      ]),

      (1, 4, ti_once, #quest main
        [
          (main_hero_fallen),
          (eq, "$cam_mode", 0),
        ],
        [
          (jump_to_menu, "mnu_captivity_wilderness_taken_prisoner"),
          (call_script, "script_change_troop_renown", "trp_player", -10),
          (call_script, "script_fail_quest", "qst_sword_of_mars"),
          (finish_mission, 1),
      ]),

      #Victory normal
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [],
        [
          (display_message, "str_cannot_leave_now"),
      ]),
      (0, 0, ti_once, [],
        [
          (call_script, "script_music_set_situation_with_culture", 0), #prison
      ]),

      #Premios
      (2, 0, ti_once, [
          (neg|conversation_screen_is_active),   (neg|main_hero_fallen),     (num_active_teams_le, 1),
        ],
        [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          (tutorial_message_set_background, 1),
          (tutorial_message,"@Berchios lies dead, his men defeated.^You have fulfilled your mission. It's time to go back to Ildico to tell her the news."),
          (call_script, "script_change_troop_renown", "trp_player", 5),
          (call_script, "script_troop_add_gold", "trp_player", 500),
          (quest_set_slot,"qst_sword_of_mars",slot_quest_current_state, 8),
          (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
          (finish_mission,6),
      ]),

    ],),

  ("drunkard_duel",mtf_battle_mode,-1,
    "bounty_hunter_duel",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
        [
          (assign,"$g_battle_result",0),
          (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
          (team_set_relation,1,2,-1),
          (team_set_relation,0,1,-1),
      ]),

      (1, 4, ti_once, #quest main
        [
          (main_hero_fallen),
          (eq, "$cam_mode", 0),
        ],
        [
          (tutorial_message,"@Despite your confidence, you were defeated by the drunkard..."),
          (call_script, "script_change_troop_renown", "trp_player", -10),
          (call_script, "script_fail_quest", "qst_caius_quest"),
          (finish_mission, 1),
      ]),

      #Victory normal
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [],
        [
          (display_message, "str_cannot_leave_now"),
      ]),
      (0, 0, ti_once, [],
        [
          (call_script, "script_music_set_situation_with_culture", 0), #prison
      ]),

      #Premios
      (2, 0, ti_once, [
          (neg|conversation_screen_is_active),   (neg|main_hero_fallen),     (num_active_teams_le, 1),
        ],
        [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          (tutorial_message_set_background, 1),
          (tutorial_message,"@The hunnic brute lies dead, on his corpse, a shiny object; what Caius was looking to be returned to him."),
          (call_script, "script_change_troop_renown", "trp_player", 1),
          (troop_add_item, "trp_player","itm_scythian_bong",0),
          (call_script, "script_troop_add_gold", "trp_player", 100),
          (quest_set_slot,"qst_caius_quest", slot_quest_current_state, 2),
          (call_script, "script_succeed_quest", "qst_caius_quest"),
          (quest_set_slot,"qst_caius_quest",slot_quest_current_state, 2),
          (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
          (finish_mission,6),
      ]),

    ],),

  ("religious_center",0,-1,
    "Holy Place",
    [ (0,mtef_scene_source|mtef_team_0,0,0,1,[]), #player
      (1,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),

      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (18,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (19,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (20,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      #can_spawn_commoners,
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      (ti_after_mission_start, 0, 0, [], [(call_script, "script_music_set_situation_with_culture", mtf_sit_town)]),
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),

      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (ti_on_agent_spawn, 0, 0, [],
        [
          (store_trigger_param_1, ":agent_no"),
          (get_player_agent_no, ":player_agent"),
          (call_script, "script_init_town_agent", ":agent_no"),
          (try_begin),
            (neq, ":player_agent", ":agent_no"),
            (agent_set_team, ":agent_no", 7),
          (try_end),
      ]),

      # (1, 0, ti_once, [],
        # [
          # #(call_script, "script_init_town_walker_agents"),
          # (play_track, "track_paganholysite", 1),
      # ]),

      (0,8,0,[],
        [
          (try_for_agents,":agent_no"),
            (agent_is_alive,":agent_no"),
            (agent_is_human,":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (this_or_next|eq, ":troop_no", "trp_khergit_townsman"),
            (this_or_next|eq, ":troop_no", "trp_khergit_townswoman"),
            (this_or_next|eq, ":troop_no", "trp_pict_town_walker_1"),
            (this_or_next|eq, ":troop_no", "trp_pict_town_walker_2"),
            (this_or_next|eq, ":troop_no", "trp_town_walker_1"),
            (this_or_next|eq, ":troop_no", "trp_town_walker_2"),
            (this_or_next|eq, ":troop_no", "trp_monk"),
            (this_or_next|eq, ":troop_no", "trp_zoroastrian_priest"),
            (this_or_next|eq, ":troop_no", "trp_imperial_town_walker_1"),
            (eq, ":troop_no", "trp_imperial_town_walker_2"),

            (assign, ":continue_walk", 0),
            (store_random_in_range, ":continue_walk", 1, 100),
            (try_begin),
              (le, ":continue_walk", 40),
              (agent_set_stand_animation, ":agent_no", "anim_stand_man"),
              (agent_set_walk_forward_animation, ":agent_no", "anim_walk_forward"),
              (agent_set_animation, ":agent_no", "anim_stand_man"),
              (agent_set_animation_progress, ":agent_no", 10),

              (agent_get_position, pos1, ":agent_no"),
              (store_random_in_range, ":points", 4, 33),
              (entry_point_get_position, pos2, ":points"),
              (agent_set_speed_limit, ":agent_no", 1),
              (agent_set_scripted_destination, ":agent_no", pos2),
            (try_end),
          (try_end),
      ]),

      (0, 0, ti_once, [],
        [
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (call_script, "script_town_init_doors", 0),
          (try_begin),
            (eq, "$town_nighttime", 0),
            (play_sound, "snd_town_ambiance", sf_looping),
          (try_end),
      ]),


      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (1,0,0,[                        (neg|conversation_screen_is_active),
          (neg|is_presentation_active, "prsnt_battle"),
          (neg|is_presentation_active, "prsnt_order_display"),
          (store_mission_timer_a, ":cur_time"),
          (le, ":cur_time", 20),
        ],
        [
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (ge, ":cur_time", 16),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
          (else_try),
            (ge, ":cur_time", 8),
            (tutorial_message_set_background, 1),
            #(tutorial_message, "@You can feel the proximity of the gods. You can make sacrifices to the gods. If you're lucky, the gods may hear you and grant your wish."),
          (try_end),
      ]),

      (ti_on_leave_area, 0, 0, [
          (assign,"$g_leave_town",1),
          ], []),
    ]
  ),

  ("visit_minor_town",mtf_battle_mode,-1,
    "visit",
    [
      (0,mtef_scene_source|mtef_team_0,0,0,1,[]),#player
      (1,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (2,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (3,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (4,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (5,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (6,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (7,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (8,mtef_visitor_source,af_override_horse,0,1,[]),#guard
      (9,mtef_visitor_source,af_override_horse,0,1,[]),#comitatus
      (10,mtef_visitor_source,af_override_horse,0,1,[]),#comitatus
      (11,mtef_visitor_source,af_override_horse,0,1,[]),#comitatus
      (12,mtef_visitor_source,af_override_horse,0,1,[]),#comitatus
      (13,mtef_visitor_source,af_override_horse,0,1,[]),
      (14,mtef_visitor_source,af_override_horse,0,1,[]),
      (15,mtef_visitor_source,af_override_horse,0,1,[]),
      (16,mtef_visitor_source,af_override_horse,0,1,[]),
      (17,mtef_visitor_source,af_override_horse,0,1,[]),
      (18,mtef_visitor_source,af_override_horse,0,1,[]),
      (19,mtef_visitor_source,af_override_horse,0,1,[]),
      (20,mtef_visitor_source,af_override_horse,0,1,[]),
      (21,mtef_visitor_source,af_override_horse,0,1,[]),
      (22,mtef_visitor_source,af_override_horse,0,1,[]),
      (23,mtef_visitor_source,af_override_horse,0,1,[]),
      (24,mtef_visitor_source,af_override_horse,0,1,[]),
      (25,mtef_visitor_source,af_override_horse,0,1,[]),
      (26,mtef_visitor_source,af_override_horse,0,1,[]),
      (27,mtef_visitor_source,af_override_horse,0,1,[]),
      (28,mtef_visitor_source,af_override_horse,0,1,[]),
      (29,mtef_visitor_source,af_override_horse,0,1,[]),
      (30,mtef_visitor_source,af_override_horse,0,1,[]),
      (31,mtef_visitor_source,af_override_horse,0,1,[]),
      (32,mtef_visitor_source,af_override_horse,0,1,[]),
      (33,mtef_visitor_source,af_override_horse,0,1,[]),#merchant 1
      (34,mtef_visitor_source,af_override_horse,0,1,[]),#merchant 2
      (35,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (36,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (37,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (38,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (39,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (40,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (41,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (42,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (43,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (44,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (45,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (46,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (47,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (48,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (49,mtef_visitor_source,af_override_horse,0,1,[]),#king
      (50,mtef_visitor_source,af_override_horse,0,1,[]),#king

    ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
      [
        (assign, "$g_main_attacker_agent", 0),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
	(assign, "$current_town", "$g_encountered_party"),
        (replace_scene_props, "spr_earth_sally_gate_right", "spr_empty"),
        (replace_scene_props, "spr_earth_sally_gate_left", "spr_empty"),
        (try_begin),#remove longboat for quest
            (neg|check_quest_active, "qst_finnsburh_quest"),
            (store_current_scene, ":scene"),
            (eq, ":scene", "scn_frisian_town"),
            (replace_scene_props, "spr_ship_sail_off", "spr_empty"),
        (try_end),
      ]),

      (0, 0, ti_once,
      [],
      [
	(mission_enable_talk), #madsci this is needed because of the mtf_battle_mode flag that we use so that players cant save during the quest mission
      ]),

    (1, 0, ti_once, [
    (check_quest_active, "qst_finnsburh_quest_2"),
    (quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 2),
    (neg|conversation_screen_is_active),
    (set_fixed_point_multiplier, 1),
    (init_position, pos11),
    (init_position, pos12),
    (get_player_agent_no, ":player_agent"),
    (agent_get_position, pos11, ":player_agent"),
    (assign, ":c", 0),
    (try_for_agents, ":agent"),
        (agent_is_active, ":agent"),
        (agent_get_troop_id, ":troop", ":agent"),
        (this_or_next|eq, ":troop", "trp_dani_hengest"),
        (this_or_next|eq, ":troop", "trp_dani_ordlaf"),
        (this_or_next|eq, ":troop", "trp_dani_guthlaf"),
        (this_or_next|eq, ":troop", "trp_dani_guthormr"),
        (this_or_next|eq, ":troop", "trp_dani_haddingr"),
        (eq, ":troop", "trp_kingdom_19_lord"),
        (agent_get_position, pos12, ":agent"),
        (get_distance_between_positions_in_meters, ":dist", pos11, pos12),
        (le, ":dist", 5),
        (assign, ":c", 1),
    (try_end),
    (eq, ":c", 1),
    ],
    [
    (play_track, "track_finnsburg_hengist_revenge",1),
    (start_mission_conversation, "trp_dani_ordlaf"),
    ]),

    (0, 0, ti_once,[
    (eq, "$g_severinus_quest", 6),
    (neg|conversation_screen_is_active)],
    [(start_mission_conversation, "trp_severinus"),]),
 #common_inventory_not_available,



      (3, 0, 0, [(eq, "$talk_context", tc_escape),],    # keep them fleeing
        [
        (try_for_agents, ":agent_no"),
            (agent_slot_ge, ":agent_no",  slot_agent_is_running_away, 1),
            # (neg|agent_is_ally, ":agent_no"),
            (store_random_in_range, ":rand", 13, 32),
            (entry_point_get_position, pos2, ":rand"),
            (agent_start_running_away, ":agent_no", pos2),
        (try_end),
      ]),

      (0,8,0,[(neq, "$talk_context", tc_escape),],
        [
          (try_for_agents,":agent_no"),
            (agent_is_alive,":agent_no"),
            (agent_is_human,":agent_no"),
            (agent_get_entry_no, ":entry", ":agent_no"),
            (is_between, ":entry", 13,32),
            (assign, ":continue_walk", 0),
            (store_random_in_range, ":continue_walk", 1, 100),
            (try_begin),
              (le, ":continue_walk", 38),
              (agent_set_stand_animation, ":agent_no", "anim_stand_man"),
              (agent_set_walk_forward_animation, ":agent_no", "anim_walk_forward"),
              (agent_set_animation, ":agent_no", "anim_stand_man"),
              (agent_set_animation_progress, ":agent_no", 10),

              (agent_get_position, pos1, ":agent_no"),
              (store_random_in_range, ":points", 13, 32),
              (entry_point_get_position, pos2, ":points"),
              (agent_set_speed_limit, ":agent_no", 1),
              (agent_set_scripted_destination, ":agent_no", pos2),
            (try_end),
          (try_end),
      ]),

  (0, 0, ti_once, [
(neg|all_enemies_defeated),
],
   [
    (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
   ]),

      (1, 0, ti_once,
      [],
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_end),
      ]),

      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
      ]),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
            (stop_all_sounds, 1),
            (finish_mission,0),
        (try_end),
      ],
      []),
	convert_horse_props_to_living_horses,
    ] + bodyguard_triggers
  ),

("minor_village_attack_quest",mtf_battle_mode|mtf_synch_inventory,-1,
  "You attack the village...",[
      (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]),

      (1,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (2,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (4,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (5,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (6,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (7,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (8,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (9,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (12,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (13,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (14,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (16,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (17,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (18,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (19,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (20,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (21,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (22,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (23,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (24,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (25,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (26,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (27,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (28,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (29,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (30,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (31,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (32,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (33,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#merchant 1
      (34,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#merchant 2
      (35,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#king

      (50,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]),
      (50,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),

      (51,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (52,mtef_defenders|mtef_team_0|mtef_infantry_first,af_override_horse,aif_start_alarmed,39,[]),
      (53,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

      (54,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,10,[]),
      (55,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,10,[]),
      (56,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,10,[]),
     ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],[
        (try_begin),#remove longboat for quest
            (neg|check_quest_active, "qst_finnsburh_quest"),
            (store_current_scene, ":scene"),
            (eq, ":scene", "scn_frisian_town"),
            (replace_scene_props, "spr_ship_sail_off", "spr_empty"),
        (try_end),
      ]),
      common_battle_mission_start,
      # common_battle_tab_press,
      immersive_troops,
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,
      common_siege_ai_trigger_init_after_2_secs,
      common_siege_defender_reinforcement_archer_reposition,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_inventory_not_available,

      (ti_tab_pressed, 0, 0, [],[
        (try_begin),
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",10),
          (eq, "$g_battle_won", 1),
          (call_script, "script_count_mission_casualties_from_agents"),
          (jump_to_menu, "$g_next_menu"),
          (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
          (finish_mission, 3),
        (else_try),
          (display_message,"str_cannot_leave_now"),
        (try_end),
      ]),
      (1, 4, 0,[(main_hero_fallen)],[
        (try_begin),
            (call_script, "script_cf_dplmc_battle_continuation"),
        (else_try),
            (assign, "$pin_player_fallen", 1),
            (str_store_string, s5, "str_retreat"),
            (call_script, "script_simulate_retreat", 10, 20, 1),
            (assign, "$g_battle_result", -1),
            (set_mission_result,-1),
            (call_script, "script_count_mission_casualties_from_agents"),
            (jump_to_menu, "$temp4"),
            (finish_mission,0),
        (try_end),
      ]),

      (0, 0, ti_once, [],[
        (set_show_messages, 0),
        (try_for_range, ":cur_group", 0, 9),
          (team_give_order, 1, ":cur_group", mordr_stand_ground),
          (team_give_order, 1, ":cur_group", mordr_stand_closer),
          (team_give_order, 1, ":cur_group", mordr_stand_closer),
        (try_end),
        (set_show_messages, 1),
      ]),

      (1, 0, 0, [
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",10),
          (store_normalized_team_count,":num_defenders", 1),
          (lt,":num_defenders",40)],
          [(add_reinforcements_to_entry,15,15),]),

      (1, 0, 5, [
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",10),
          (store_normalized_team_count,":num_attackers", 0),
          (lt,":num_attackers",30)],
          [(add_reinforcements_to_entry,0,19),]),


      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (assign, reg0, ":dead_agent_no"),
          (assign, reg1, ":killer_agent_no"),
          (assign, reg2, ":is_wounded"),
          (agent_get_team, reg3, ":dead_agent_no"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),
       ]),

  ]
  + dplmc_battle_mode_triggers + utility_triggers + battle_panel_triggers + enhanced_common_siege_triggers + battle_notifications,
),

  (
    "minor_village_attack",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the village...",
    [
      (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]),

      (1,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (2,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (4,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (5,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (6,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (7,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (8,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#guard
      (9,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (12,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#comitatus
      (13,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (14,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (16,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (17,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (18,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (19,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (20,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (21,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (22,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (23,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (24,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (25,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (26,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (27,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (28,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (29,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (30,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (31,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (32,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (33,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#merchant 1
      (34,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#merchant 2
      (35,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),#king

      (50,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,60,[]),
      (50,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),

      (51,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
      (52,mtef_defenders|mtef_team_0|mtef_infantry_first,af_override_horse,aif_start_alarmed,39,[]),
      (53,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

      (54,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,10,[]),
      (55,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,10,[]),
      (56,mtef_defenders|mtef_team_0|mtef_archers_first,af_override_horse,aif_start_alarmed,10,[]),
     ], vc_weather +
    [
      (ti_before_mission_start, 0, 0, [],
      [
        (try_begin),#remove longboat for quest
            (neg|check_quest_active, "qst_finnsburh_quest"),
            (store_current_scene, ":scene"),
            (eq, ":scene", "scn_frisian_town"),
            (replace_scene_props, "spr_ship_sail_off", "spr_empty"),
        (try_end),
      ]),
      common_battle_mission_start,
      common_battle_tab_press,
      immersive_troops,
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,
      common_siege_ai_trigger_init_after_2_secs,
      common_siege_defender_reinforcement_archer_reposition,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_inventory_not_available,

      (
      0, 0, ti_once, [],
      [
      (set_show_messages, 0),
        (try_for_range, ":cur_group", 0, 9),
          (team_give_order, 1, ":cur_group", mordr_stand_ground),
          (team_give_order, 1, ":cur_group", mordr_stand_closer),
          (team_give_order, 1, ":cur_group", mordr_stand_closer),
        (try_end),
       (set_show_messages, 1),
        ]
      ),

      (1, 0, 0, [
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",10),
          (store_normalized_team_count,":num_defenders", 1),
          (lt,":num_defenders",40)],
          [(add_reinforcements_to_entry,15,15),]),

      (1, 0, 5, [
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",10),
          (store_normalized_team_count,":num_attackers", 0),
          (lt,":num_attackers",30)],
          [(add_reinforcements_to_entry,0,19),]),


      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (assign, reg0, ":dead_agent_no"),
          (assign, reg1, ":killer_agent_no"),
          (assign, reg2, ":is_wounded"),
          (agent_get_team, reg3, ":dead_agent_no"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),
       ]),

    ]
    ##diplomacy begin
     + dplmc_battle_mode_triggers + utility_triggers + battle_panel_triggers + enhanced_common_siege_triggers + battle_notifications,
    ##diplomacy end
  ),

#this is for center management
("center_management",0,-1,
    "dungeon",
    [ (0,mtef_visitor_source,af_override_all,0,1,[]),
    ],
    [

    (0, 0, 0, [(neg|is_presentation_active, "prsnt_center_management"),],
        [
    (start_presentation, "prsnt_center_management"),
    ]),

    (ti_after_mission_start, 0, ti_once, [], [
    (mission_cam_set_screen_color, 0xFF000000),
    # (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
    ]),

    (0, 0, ti_once, [],
        [
    (set_rain, 2, 0),
    (set_rain, 1, 0),
    (set_rain, 0, 100),

    (assign, "$g_improvement_type", -1),
    ]),

    (ti_on_agent_spawn, 0, 0, [],
        [
    (store_trigger_param_1, ":agent"),
    (agent_set_speed_modifier, ":agent",0),
    ]),

      (ti_question_answered, 0, 0, [],
        [
        (store_trigger_param_1, ":answer"),
        (try_begin),
            (eq, ":answer", 0),
            (try_begin),#extort
                (eq, "$g_presentation_next_presentation", 3),
                (jump_to_menu, "mnu_center_extort_reaction"),
                (finish_mission),
            # (else_try), #decrees
                # (eq, "$g_presentation_next_presentation", 2),
                # (try_begin),
                    # (eq, "$temp", 1),#revoke decree
                    # (try_begin),
                        # (gt, "$g_player_chamberlain", 0),
                        # (store_troop_gold, ":cur_gold", "trp_household_possessions"),
                        # (ge, ":cur_gold", decree_cost),
                        # (call_script, "script_dplmc_withdraw_from_treasury", decree_cost),
                        # (party_set_slot, "$g_encountered_party", "$g_improvement_type", 0),
                    # (else_try),
                        # (store_troop_gold, ":cur_gold", "trp_player"),
                        # (ge, ":cur_gold", decree_cost),
                        # (troop_remove_gold, "trp_player", decree_cost),
                        # (party_set_slot, "$g_encountered_party", "$g_improvement_type", 0),
                    # (else_try),
                        # (display_message, "@Insufficient funds", message_alert),
                    # (try_end),
                    # #clear variables
                    # (assign, "$g_improvement_type", -1),
                    # (assign, "$temp", 0),
                # (else_try),
                    # (eq, "$temp", 2),#issue it!
                    # (try_begin),
                        # (gt, "$g_player_chamberlain", 0),
                        # (store_troop_gold, ":cur_gold", "trp_household_possessions"),
                        # (ge, ":cur_gold", decree_cost),
                        # (call_script, "script_dplmc_withdraw_from_treasury", decree_cost),
                        # (party_set_slot, "$g_encountered_party", "$g_improvement_type", 1),
                    # (else_try),
                        # (store_troop_gold, ":cur_gold", "trp_player"),
                        # (ge, ":cur_gold", decree_cost),
                        # (troop_remove_gold, "trp_player", decree_cost),
                        # (party_set_slot, "$g_encountered_party", "$g_improvement_type", 1),
                    # (else_try),
                        # (display_message, "@Insufficient funds", message_alert),
                    # (try_end),
                    # #clear variables
                    # (assign, "$g_improvement_type", -1),
                    # (assign, "$temp", 0),
                # (try_end),
            (else_try), #buildings
                (eq, "$g_presentation_next_presentation", 1),
                (try_begin),
                    (eq, "$temp", 1),#destroy a building
                    (call_script, "script_get_improvement_details", "$g_improvement_type", "$g_encountered_party"),
                    (val_mul, reg0, 3),
                    (val_div, reg0, 5),
                    (display_message, "@{s0} has been destroyed. You gained {reg0} of denars.", message_alert),
                    (troop_add_gold, "trp_player", reg0),
                    (party_set_slot, "$g_encountered_party", "$g_improvement_type", 0),

                    (try_begin),#clear also for temple god
                        (eq, "$g_improvement_type", slot_center_has_temple),
                        (party_set_slot, "$g_encountered_party", slot_center_has_temple_god, 0),
                    (try_end),
                    #clear variables
                    (assign, "$g_improvement_type", -1),
                    (assign, "$temp", 0),
                    (call_script, "script_change_center_prosperity", "$current_town", -4),
                    (call_script, "script_change_player_relation_with_center", "$current_town", -2),
                (else_try),
                    (eq, "$temp", 3),#cancle a building
                    (party_set_slot, "$current_town", slot_center_current_improvement, 0),
                    (party_get_slot, ":hours_left", "$current_town", slot_center_improvement_end_hour),
                    #player gets some money back
                    (store_current_hours, ":cur_hours"),
                    (val_sub, ":hours_left", ":cur_hours"),
                    (val_mul, ":hours_left", 10), #a paltry sum
                    (troop_add_gold, "trp_player", ":hours_left"),

                    #clear variables
                    (try_begin),#clear also for temple god
                        (eq, "$g_improvement_type", slot_center_has_temple),
                        (party_set_slot, "$g_encountered_party", slot_center_has_temple_god, 0),
                    (try_end),
                    (assign, "$g_improvement_type", -1),
                    (assign, "$temp", 0),
                    (call_script, "script_change_center_prosperity", "$current_town", -4),
                    (call_script, "script_change_player_relation_with_center", "$current_town", -2),
                (else_try),
                    (eq, "$temp", 4),#cancle a building
                    (party_set_slot, "$current_town", slot_center_current_improvement_2, 0),
                    (party_get_slot, ":hours_left", "$current_town", slot_center_improvement_2_end_hour),
                    #player gets some money back
                    (store_current_hours, ":cur_hours"),
                    (val_sub, ":hours_left", ":cur_hours"),
                    (val_mul, ":hours_left", 10), #a paltry sum
                    (troop_add_gold, "trp_player", ":hours_left"),
                    #clear variables
                    (try_begin),#clear also for temple god
                        (eq, "$g_improvement_type", slot_center_has_temple),
                        (party_set_slot, "$g_encountered_party", slot_center_has_temple_god, 0),
                    (try_end),
                    (assign, "$g_improvement_type", -1),
                    (assign, "$temp", 0),
                    (call_script, "script_change_center_prosperity", "$current_town", -4),
                    (call_script, "script_change_player_relation_with_center", "$current_town", -2),
                (else_try),
                    (eq, "$temp", 2),#build it!
                    (try_begin), #fast build
                        (ge, "$cheat_mode", 1),
                        (assign, "$diplomacy_var2", 0),
                        (call_script, "script_improve_center", "$g_encountered_party", "$lord_selected", "$diplomacy_var2"),
                    (else_try),
                        (try_begin),
                            (gt, "$g_player_chamberlain", 0),
                            (store_troop_gold, ":cur_gold", "trp_household_possessions"),
                            (ge, ":cur_gold", "$diplomacy_var"),
                            (call_script, "script_dplmc_withdraw_from_treasury", "$diplomacy_var"),
                            (call_script, "script_improve_center", "$g_encountered_party", "$lord_selected", "$diplomacy_var2"),
                        (else_try),
                            (store_troop_gold, ":cur_gold", "trp_player"),
                            (ge, ":cur_gold", "$diplomacy_var"),
                            (troop_remove_gold, "trp_player", "$diplomacy_var"),
                            (call_script, "script_improve_center", "$g_encountered_party", "$lord_selected", "$diplomacy_var2"),
                        (else_try),
                            (display_message, "@Insufficient funds", message_alert),
                        (try_end),
                    (try_end),
                    #clear variables
                    (assign, "$g_improvement_type", -1),
                    (assign, "$temp", 0),
                (try_end),
            (try_end),
        (else_try),
            (assign, "$g_improvement_type", -1),
            (assign, "$temp", 0),
            # (start_presentation, "prsnt_center_management"),
        (try_end),
      ]),
    ],
  ),
##END center management presentation


   ("longboat_cutscene",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source,af_override_horse,0,1,[]),#player
      (1,mtef_visitor_source,af_override_horse,0,1,[]),#player
      (2,mtef_visitor_source,af_override_horse,0,1,[]),#guard
	  (3,mtef_visitor_source,af_override_horse,0,1,[]),#legatus
      (4,mtef_visitor_source,af_override_horse,0,1,[]),#legatus

      (5,mtef_visitor_source,af_override_horse,0,1,[]),#unused
      (6,mtef_visitor_source,af_override_horse,0,1,[]),#unused
      (7,mtef_visitor_source,af_override_horse,0,1,[]),#unused
      (8,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (9,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (10,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (11,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (12,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (13,mtef_visitor_source,0,0,1,[]),#spectators
      (14,mtef_visitor_source,0,0,1,[]),#spectators
      (15,mtef_visitor_source,0,0,1,[]),#spectators
      (16,mtef_visitor_source,0,0,1,[]),#spectators
      (17,mtef_visitor_source,0,0,1,[]),#spectators
      (18,mtef_visitor_source,0,0,1,[]),#spectators
      (19,mtef_visitor_source,0,0,1,[]),#spectators
      (20,mtef_visitor_source,0,0,1,[]),#spectators
      (21,mtef_visitor_source,0,0,1,[]),#spectators
      (22,mtef_visitor_source,0,0,1,[]),#spectators
      (23,mtef_visitor_source,0,0,1,[]),#spectators
      (24,mtef_visitor_source,0,0,1,[]),#spectators
      (25,mtef_visitor_source,0,0,1,[]),#spectators
      (26,mtef_visitor_source,0,0,1,[]),#spectators
      (27,mtef_visitor_source,0,0,1,[]),#spectators
      (28,mtef_visitor_source,0,0,1,[]),#spectators
      (29,mtef_visitor_source,0,0,1,[]),#spectators
      (30,mtef_visitor_source,0,0,1,[]),#spectators
    ],
    [
    (ti_before_mission_start, 0, 0, [],
    [
    (scene_set_day_time, 6),
    (set_global_cloud_amount, 100),
    (set_global_haze_amount, 60),
    (set_fog_distance, 300, 0xFFc7d7ec),
    (set_rain, 1, 60),
	(assign, "$temp", -1),
    ]),

    (ti_tab_pressed,0,0,[],[
    (show_object_details_overlay, 1),
    (jump_to_menu, "$g_next_menu"),
    (finish_mission),
    ]),

    (ti_after_mission_start,0,0,[],[
    (show_object_details_overlay, 0),
    ]),

    (0, 0, ti_once,
       [],[
    (get_player_agent_no, ":player"),
    (agent_set_speed_modifier,":player", 0),
    (agent_set_horse_speed_factor, ":player", 0),
    (agent_set_visibility, ":player", 0),
	   ]),

    (0,0,0,[],
    [
    (store_mission_timer_a, ":cur_time"),
    (set_fixed_point_multiplier, 100),
    (try_begin),
        (eq, "$tutorial_state", 5),
        (ge, ":cur_time", 71),
        (jump_to_menu, "$g_next_menu"),
        (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
        (show_object_details_overlay,1),
        (finish_mission, 3),
        (val_add, "$tutorial_state", 1),
    (else_try),
        (ge, ":cur_time", 68),
        (eq, "$tutorial_state", 4),
        (set_fixed_point_multiplier, 1000),
        (entry_point_get_position, pos9, 30),
        (mission_cam_animate_to_position, pos9, 6000, 0),
        (val_add, "$tutorial_state", 1),
    (else_try),
        (ge, ":cur_time", 45),
        (eq, "$tutorial_state", 3),
        (set_fixed_point_multiplier, 1000),
        (entry_point_get_position, pos9, 29),
        (mission_cam_animate_to_position, pos9, 25000, 0),
        (val_add, "$tutorial_state", 1),
    (else_try),
        (ge, ":cur_time", 23),
        (eq, "$tutorial_state", 2),
        (entry_point_get_position, pos9, 28),
        (mission_cam_animate_to_position, pos9, 25000, 0),
        (val_add, "$tutorial_state", 1),
    (else_try),
        (ge, ":cur_time", 1),
        (eq, "$tutorial_state", 1),
        (entry_point_get_position, pos9, 27),
        (mission_cam_animate_to_position, pos9, 25000, 0),
        (val_add, "$tutorial_state", 1),
    (else_try),
        (eq, "$tutorial_state", 0),
        (set_fixed_point_multiplier, 1000),
        (mission_cam_set_mode, 1, 0, 0),
        (set_camera_in_first_person, 0),
        (init_position, pos10),
        (entry_point_get_position, pos10, 26),
        (mission_cam_set_position, pos10),
        (val_add, "$tutorial_state", 1),

        (set_fixed_point_multiplier, 1),
        (entry_point_get_position, pos11, 8),
        (try_for_prop_instances, ":ship"),
            (prop_instance_get_scene_prop_kind, ":is_ship", ":ship"),
            (is_between, ":is_ship", "spr_ship", "spr_snowy_barrel_a"),
		(assign, "$temp", ":ship"),
        (prop_instance_get_position, pos30, ":ship"),
        (prop_instance_get_position, pos31, ":ship"),
            (prop_instance_animate_to_position, ":ship", pos11, 8700),
            (display_message, "@Wodan! Wodan! Wodan! Wodan, guard us on our journey!"),
        (try_end),
    (try_end),
      ]),

#madsci lets keep people on the boat
    (0, 0, ti_once,
       [(ge, "$temp", 0),],[
		(try_for_agents, ":agent"),
		(agent_set_no_dynamics, ":agent", 1),
		(try_end),
	   ]),

      (0, 0, 0,
      [(ge, "$temp", 0),],
      [
	(set_fixed_point_multiplier, 100),
        (prop_instance_get_position, pos30, "$temp"),
	(position_get_x, ":x", pos30),
	(position_get_y, ":y", pos30),
	(position_get_z, ":z", pos30),
	(position_get_x, ":x2", pos31),
	(position_get_y, ":y2", pos31),
	(position_get_z, ":z2", pos31),
	(val_sub, ":x", ":x2"),
	(val_sub, ":y", ":y2"),
	(val_sub, ":z", ":z2"),
		(try_for_agents, ":agent"),
		(agent_get_position, pos1, ":agent"),
		(position_move_z, pos1, ":z", 1),
		(position_move_x, pos1, ":x", 1),
		(position_move_y, pos1, ":y", 1),
		(agent_set_position, ":agent", pos1),
		(try_end),
        (prop_instance_get_position, pos31, "$temp"),
      ]),

    common_inventory_not_available,]),

("longboat_cutscene_2",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source,af_override_horse,0,1,[]),#player
      (1,mtef_visitor_source,af_override_horse,0,1,[]),#player
      (2,mtef_visitor_source,af_override_horse,0,1,[]),#guard
	  (3,mtef_visitor_source,af_override_horse,0,1,[]),#legatus
      (4,mtef_visitor_source,af_override_horse,0,1,[]),#legatus

      (5,mtef_visitor_source,af_override_horse,0,1,[]),#unused
      (6,mtef_visitor_source,af_override_horse,0,1,[]),#unused
      (7,mtef_visitor_source,af_override_horse,0,1,[]),#unused
      (8,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (9,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (10,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (11,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (12,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (13,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (14,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (15,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (16,mtef_visitor_source,0,0,1,[]),#spectators
      (17,mtef_visitor_source,0,0,1,[]),#spectators
      (18,mtef_visitor_source,0,0,1,[]),#spectators
      (19,mtef_visitor_source,0,0,1,[]),#spectators
      (20,mtef_visitor_source,0,0,1,[]),#spectators
      (21,mtef_visitor_source,0,0,1,[]),#spectators
      (22,mtef_visitor_source,0,0,1,[]),#spectators
      (23,mtef_visitor_source,0,0,1,[]),#spectators
      (24,mtef_visitor_source,0,0,1,[]),#spectators
      (25,mtef_visitor_source,0,0,1,[]),#spectators
      (26,mtef_visitor_source,0,0,1,[]),#spectators
      (27,mtef_visitor_source,0,0,1,[]),#spectators
      (28,mtef_visitor_source,0,0,1,[]),#spectators
      (29,mtef_visitor_source,0,0,1,[]),#spectators
      (30,mtef_visitor_source,0,0,1,[]),#spectators
    ],
    [
    (0, 0, ti_once,
       [],[
    (get_player_agent_no, ":player"),
    (agent_set_no_death_knock_down_only, ":player", 1),
	   ]),

    (ti_before_mission_start, 0, 0, [
			 ],
    [
    (scene_set_day_time, 20),
    (set_global_cloud_amount, 100),
    (set_global_haze_amount, 60),
    (set_fog_distance, 400, 0xFFc7d7ec),
    (set_rain, 1, 40),
    ]),

    (ti_tab_pressed,0,0,[],[
    (try_begin),
        (ge, "$g_battle_result", 6),
        (jump_to_menu, "$g_next_menu"),
        (mission_disable_talk),
        (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
        (finish_mission, 3),
    (else_try),
        (tutorial_box, "@Cannot leave now. Talk with the Dani champions first.", "@Hint"),
    (try_end),
    ]),

    (ti_before_mission_start,0,0,[],[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
    (assign, "$g_battle_result", 0),
    ]),
    (ti_after_mission_start,0,0,[],[
    (mission_enable_talk),
    ]),


    common_inventory_not_available,]),

#This is used for the dialogues
("longboat_landing_1",mtf_battle_mode,-1,"plundering a settlement", [
    (0,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#player
    (1,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#player
    (2,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#guard
	  (3,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#legatus
    (4,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#legatus
    (5,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#unused
    (6,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#unused
    (7,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#unused
    (8,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (9,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (10,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (11,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (12,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (13,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (14,mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),#spectators
    (15,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (16,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (17,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (18,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (19,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (20,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (21,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (22,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (23,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (24,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (25,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (26,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (27,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (28,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (29,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (30,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (31,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (32,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (33,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (34,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (35,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (36,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (37,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (38,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (39,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (40,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (41,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (42,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (43,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (44,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (45,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (46,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (47,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (48,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (49,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (50,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
  ],vc_weather + [
    #make it unable to move for the player during the dialogues
    (0, 0, ti_once,[],[
      (get_player_agent_no, ":player"),
      (agent_set_speed_modifier,":player", 0),
      (agent_set_horse_speed_factor, ":player", 0),
      (agent_set_no_death_knock_down_only, ":player", 1),
    ]),

    (ti_before_mission_start,0,0,[],[
      # (call_script, "script_music_set_situation_with_culture", mtf_sit_feast),
      (assign, "$g_battle_result", 0),
    ]),

    (0,0,ti_once,[
      (store_mission_timer_a, ":time"),
      (ge, ":time", 3),
      (eq, "$g_battle_result", 0),
      (neg|conversation_screen_is_active),
    ],[
      (mission_enable_talk),
      (start_mission_conversation, "$temp"),
    ]),

    (0,0,0,[
      (eq, "$g_battle_result", 1),
    ],[
      (mission_disable_talk),
      (jump_to_menu, "$g_next_menu"),
      (assign, "$g_battle_result", 2),
      (finish_mission, 3),
      (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),
    common_inventory_not_available,
]),

("finns_hall_murder",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#player
      (1,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#player
      (2,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#guard
      (3,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (4,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (5,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#unused
      (6,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#unused
      (7,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#unused
      (8,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (9,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (10,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (12,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (13,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (14,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (15,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (16,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (17,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (18,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (19,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (20,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (21,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (31,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (32,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (33,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (34,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (35,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (36,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (37,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (38,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (39,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (40,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (41,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (42,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (43,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (44,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (45,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (46,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (47,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (48,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (49,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
      (50,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    ],
   vc_weather + [

    (ti_on_agent_spawn, 0, 0, [],	# equipment troops
    [
    (store_trigger_param, ":agent", 1),
    (agent_get_troop_id, ":troop", ":agent"),
    (try_begin),
        (troop_is_hero, ":troop"),
        (agent_set_speed_modifier,":agent", 0),
        (agent_set_horse_speed_factor, ":agent", 0),

        (try_for_range, ":item_slot", ek_item_0, ek_head),
            (agent_get_item_slot, ":item", ":agent", ":item_slot"),
            (gt, ":item", -1),
            (try_begin),
                (is_between, ":item", weapons_begin, weapons_end),
                (agent_set_wielded_item,":agent",":item"),
            (else_try),
                (is_between, ":item", shields_begin, shields_end),
                (agent_set_wielded_item,":agent",":item"),
            (try_end),
        (try_end),
    (else_try),
        (eq, ":troop", "trp_frisian_freeman"),
        (agent_set_team, ":agent", 2),
    (try_end),
(try_begin),
(this_or_next|eq, ":troop", "trp_dani_guthlaf"),
(is_between, ":troop", "trp_dani_hocing", "trp_finn_garulf"),
(assign, ":banner_mesh", "mesh_banners_default_c"),
(cur_agent_set_banner_tableau_material, "tableau_game_troop_label_banner", ":banner_mesh"),
(try_end),
    ]),

    (ti_before_mission_start,0,0,[],[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
    (assign, "$g_battle_result", 0),
    (team_set_relation, 0,1,0),
    (team_set_relation, 1,0,0),
    # (set_cheer_at_no_enemy, 0),
    ]),

    # (ti_tab_pressed,0,0,[],[
    # (finish_mission),
    # ]),

    (ti_on_agent_killed_or_wounded, 0, 0, [],
    [
    (store_trigger_param_1, ":dead_agent"),
    (agent_get_troop_id, ":troop", ":dead_agent"),
    (try_begin),
        (eq, ":troop", "trp_finn_garulf"),
        (assign, "$g_battle_result", 2),
    (else_try),
        (eq, ":troop", "trp_frisian_freeman"),
        (val_add, "$g_battle_result", 1),
    (try_end),

    ]),

    (0,0,ti_once,[(eq, "$g_battle_result", 1),],[
    (team_set_relation, 2,3,-1),
    (team_set_relation, 3,2,-1),
    (team_set_relation, 1,2,1),
    (team_set_relation, 1,3,1),
    (team_set_relation, 0,2,1),
    (team_set_relation, 0,3,1),
    (team_set_relation, 2,1,1),
    (team_set_relation, 3,1,1),
    (team_set_relation, 2,0,1),
    (team_set_relation, 3,0,1),
    (try_for_agents, ":agent"),
        (agent_is_active, ":agent"),
        (agent_get_troop_id, ":troop", ":agent"),
        (try_begin),
            (eq, ":troop", "trp_finn_garulf"),
            (agent_set_damage_modifier, ":agent", 10),
            (entry_point_get_position, pos12, 17),
            (agent_set_position, ":agent", pos12),
            (agent_set_team, ":agent", 2),
            (agent_set_speed_modifier,":agent", 25),
            (agent_set_horse_speed_factor, ":agent", 25),
        (else_try),
            (eq, ":troop", "trp_dani_sigeferth"),
            (agent_set_damage_modifier, ":agent", 200),
            (agent_set_no_death_knock_down_only,":agent", 1),
            (agent_set_team, ":agent", 3),
            (agent_ai_set_aggressiveness, ":agent", 10000),
            (agent_set_speed_modifier,":agent", 125),
            (agent_set_horse_speed_factor, ":agent", 125),
        (try_end),
        (agent_force_rethink, ":agent"),
    (try_end),
    (mission_disable_talk),
    ]),

    (0,3,ti_once,[
(eq, "$g_battle_result", 2),
(neg|conversation_screen_is_active),
],[
    (try_for_agents, ":agent"),
        (agent_is_active, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_get_troop_id, ":troop", ":agent"),
        (try_begin),
            (eq, ":troop", "trp_dani_sigeferth"),
            (agent_set_damage_modifier, ":agent", 100),
            (agent_set_no_death_knock_down_only,":agent", 0),
            (agent_set_team, ":agent", 1),
        (try_end),
        (agent_ai_set_aggressiveness, ":agent", 10000),
        (agent_set_speed_modifier,":agent", 80),
        (agent_set_horse_speed_factor, ":agent", 80),
        (agent_force_rethink, ":agent"),
    (try_end),
    (mission_enable_talk),
    (start_mission_conversation, "$temp"),
    (assign, "$g_battle_result", 3),
    (team_set_relation, 1,2,-1),
    (team_set_relation, 2,1,-1),
    (quest_set_slot, "qst_finnsburh_quest", slot_quest_current_state, 6),
    ]),

    (0,0,ti_once,[
    (store_mission_timer_a, ":time"),
    (ge, ":time", 3),
    (eq, "$g_battle_result", 0),
    (neg|conversation_screen_is_active),
    ],[
    (mission_enable_talk),
    (start_mission_conversation, "$temp"),
    ]),

    # (ti_after_mission_start,0,0,[
    # ],[(set_cheer_at_no_enemy, 0),
    # ]),

    (0,5,ti_once,[
    (ge, "$g_battle_result", 11),
    ],[
    (try_begin),
        (neg|main_hero_fallen),
        (call_script, "script_change_troop_renown", "trp_player", 5),
        (add_xp_as_reward, 500),
    (try_end),
    (jump_to_menu, "$g_next_menu"),
    (assign, "$g_battle_result", 5),
    (finish_mission, 3),
    (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),

    common_inventory_not_available,
]),

("finns_hall_battle",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#player
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#player
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#unused
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#unused
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#unused
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (17,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (18,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (19,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (20,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (21,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    ],
   vc_weather + [

    (ti_on_agent_spawn, 0, 0, [],
    [
    (store_trigger_param_1, ":agent_no"),
    (agent_is_ally, ":agent_no"),
    (agent_get_troop_id, ":troop_id", ":agent_no"),
    (neq, ":troop_id", "trp_finn_hildeburh"),
    (cur_agent_set_banner_tableau_material, "tableau_game_troop_label_banner", "mesh_banners_default_c"),
    ]),
    passable_allies,
    custom_commander_critical_strike,
###TO BULLY RETARTED CHEATERS
    (0, 0, 0, [
	(eq, 1, 0), #madsci need to cheat to test
    (this_or_next|key_is_down, key_left_alt),
    (key_is_down, key_right_alt),
    (key_is_down, key_f4),
    (this_or_next|key_is_down, key_left_control),
    (key_is_down, key_right_control),
    ],
    [
    (get_player_agent_no, ":player"),
    (agent_deliver_damage_to_agent,":player",":player",10000,"itm_warhammer"),
    (display_message, "@DIE CHEATER! DIE CHEATER! DIE CHEATER!"),
    (jump_to_menu, "mnu_finnsburg_quest_battle_final"),
    (finish_mission),
    (call_script, "script_change_troop_renown", "trp_player", -500),
    (call_script, "script_change_player_honor", -200),
    (store_troop_gold, ":gold", "trp_player"),
    (troop_remove_gold, "trp_player", ":gold"),
    (troop_clear_inventory, "trp_player"),
    ]),
###TO BULLY RETARDED CHEATERS
    (0, 0, 0, [
	(eq, 1, 0), #madsci need to cheat to test
    (this_or_next|key_is_down, key_left_control),
    (key_is_down, key_right_control),
    (key_is_down, key_h),
    ],
    [
    (get_player_agent_no, ":player"),
    (agent_deliver_damage_to_agent,":player",":player",10000,"itm_warhammer"),
    (display_message, "@DIE CHEATER! DIE CHEATER! DIE CHEATER!"),
    (try_begin),
        (check_quest_active, "qst_finnsburh_quest_2"),
        (jump_to_menu, "mnu_finnsburg_revenge_lost"),
    (else_try),
        (jump_to_menu, "mnu_finnsburg_quest_battle_final"),
    (try_end),
    (finish_mission),
    (call_script, "script_change_troop_renown", "trp_player", -500),
    (call_script, "script_change_player_honor", -200),
    (store_troop_gold, ":gold", "trp_player"),
    (troop_remove_gold, "trp_player", ":gold"),
    (troop_clear_inventory, "trp_player"),
    ]),

    # (ti_on_agent_spawn, 0, 0, [
    # (quest_slot_eq, "qst_finnsburh_quest", slot_quest_current_state, 11),
    # ],	# equipment troops
    # [
    # (store_trigger_param, ":agent", 1),
    # (agent_get_team, ":team", ":agent"),
    # (eq, ":team", 0),
    # (agent_set_damage_modifier, ":agent", 250),
    # ]),

    (ti_before_mission_start,0,0,[],[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    (assign, "$g_battle_result", 0),

    (try_begin),
        (eq, "$temp", -2),
        (team_set_relation, 0,1,1),
        (team_set_relation, 1,0,1),
        (team_set_relation, 1,2,1),
        (team_set_relation, 0,2,1),
    (else_try),
        (team_set_relation, 0,1,-1),
        (team_set_relation, 1,0,-1),
    (try_end),
    # (set_cheer_at_no_enemy, 0),
    ]),

    # (ti_tab_pressed,0,0,[],[
    # (finish_mission),
    # ]),

    (1,5,ti_once,[
    (num_active_teams_le, 1),
    (eq, "$temp", -1),
    (neg|main_hero_fallen),
(neg|conversation_screen_is_active),
    ],[
    (try_begin),
        (check_quest_active, "qst_finnsburh_quest_2"),
        (quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 9),
        (mission_enable_talk),
        (start_mission_conversation, "trp_dani_hengest"),
        (quest_set_slot, "qst_finnsburh_quest_2", slot_quest_current_state, 10),
    (else_try),
        (call_script, "script_change_troop_renown", "trp_player", 25),
        (add_xp_as_reward, 500),
        (jump_to_menu, "mnu_finnsburg_quest_battle_won"),
        (finish_mission, 3),
        (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    (try_end),
    ]),
    (1,5,ti_once,[
    (check_quest_active, "qst_finnsburh_quest_2"),
    (quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 9),
    (num_active_teams_le, 2),
    (neg|main_hero_fallen),
(neg|conversation_screen_is_active),
    ],[
    (mission_enable_talk),
    (start_mission_conversation, "trp_dani_hengest"),
    (quest_set_slot, "qst_finnsburh_quest_2", slot_quest_current_state, 10),
    ]),

    (1,1,0,[(eq, "$temp", 0),],[(assign, "$temp", -1)]),

    (0,1,ti_once,[
    (quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 8),
    (eq, "$temp", -2),
    (neg|conversation_screen_is_active),
    ],[
    (start_mission_conversation, "trp_frisian_king"),
    ]),

      (4, 0, 0, [
      (check_quest_active, "qst_finnsburh_quest_2"),
      (quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 9),
      ],
        [
        (try_for_agents, ":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (eq, ":troop_no", "trp_finn_hildeburh"),
            (store_random_in_range, ":rand", 1, 25),
            (entry_point_get_position, pos2, ":rand"),
            (agent_start_running_away, ":agent_no", pos2),
        (try_end),
      ]),

    (ti_on_agent_spawn, 0, 0, [
    (quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 8),
    ],
    [
    (store_trigger_param, ":agent", 1),
    (agent_get_team, ":team", ":agent"),
    (eq, ":team", 1),
    (agent_get_troop_id, ":troop", ":agent"),
    (try_begin),
        (troop_is_hero, ":troop"),
        (neq, ":troop", "trp_player"),
        (agent_set_no_death_knock_down_only, ":agent", 1),
        (agent_set_damage_modifier, ":agent", 150),
    (try_end),
    ]),

    (0,5,ti_once,[
    (main_hero_fallen),
    ],[
    (main_hero_fallen),
    (try_begin),
        (check_quest_active, "qst_finnsburh_quest_2"),
        (jump_to_menu, "mnu_finnsburg_revenge_lost"),
    (else_try),
        (jump_to_menu, "mnu_finnsburg_quest_battle_final"),
    (try_end),
    (finish_mission, 3),
    (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),

    (0, 0, 15, [
    (store_mission_timer_a, ":timer"),
    (ge, ":timer", 10),
    (ge, "$temp", 1),],
    [
    (store_random_in_range, ":entry", 16,18),
    (add_visitors_to_current_scene, ":entry", "trp_frisian_freeman", 3),
    (add_visitors_to_current_scene, ":entry", "trp_frisian_companion", 1),
    (display_message, "@More enemies have arrived"),
    (val_sub, "$temp", 1),
    ]),

    (0, 0, 2, [],
    [
      (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
      (try_end),
    ]),

    common_inventory_not_available,
]),

("finn_camp_battle",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#player
      (1,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#player
      (2,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (3,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (4,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (5,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#unused
      (6,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#unused
      (7,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#unused
      (8,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (9,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (10,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    ],
   vc_weather + utility_triggers  + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers  +[

    (ti_on_agent_spawn, 0, 0, [],
    [
    (store_trigger_param_1, ":agent_no"),
    (agent_is_ally, ":agent_no"),
    (cur_agent_set_banner_tableau_material, "tableau_game_troop_label_banner", "mesh_banner_kingdom_19"),
    ]),

    passable_allies,
    custom_commander_critical_strike,
    equipment_randomization,
common_battle_init_banner,
###TO BULLY RETARTED CHEATERS
    (0, 0, 0, [
	(eq, 1, 0), #madsci need to cheat to test
    (this_or_next|key_is_down, key_left_alt),
    (key_is_down, key_right_alt),
    (key_is_down, key_f4),
    (this_or_next|key_is_down, key_left_control),
    (key_is_down, key_right_control),
    ],
    [
    (get_player_agent_no, ":player"),
    (agent_deliver_damage_to_agent,":player",":player",10000,"itm_warhammer"),
    (display_message, "@DIE CHEATER! DIE CHEATER! DIE CHEATER!"),
    (jump_to_menu, "mnu_finnsburg_revenge_lost"),
    (finish_mission),
    (call_script, "script_change_troop_renown", "trp_player", -500),
    (call_script, "script_change_player_honor", -200),
    (store_troop_gold, ":gold", "trp_player"),
    (troop_remove_gold, "trp_player", ":gold"),
    (troop_clear_inventory, "trp_player"),
    ]),
###TO BULLY RETARDED CHEATERS
    (0, 0, 0, [
	(eq, 1, 0), #madsci need to cheat to test
    (this_or_next|key_is_down, key_left_control),
    (key_is_down, key_right_control),
    (key_is_down, key_h),
    ],
    [
    (get_player_agent_no, ":player"),
    (agent_deliver_damage_to_agent,":player",":player",10000,"itm_warhammer"),
    (display_message, "@DIE CHEATER! DIE CHEATER! DIE CHEATER!"),
    (jump_to_menu, "mnu_finnsburg_revenge_lost"),
    (finish_mission),
    (call_script, "script_change_troop_renown", "trp_player", -500),
    (call_script, "script_change_player_honor", -200),
    (store_troop_gold, ":gold", "trp_player"),
    (troop_remove_gold, "trp_player", ":gold"),
    (troop_clear_inventory, "trp_player"),
    ]),

    (ti_on_agent_spawn, 0, 0, [
    ],
    [
    (store_trigger_param, ":agent", 1),
    (agent_get_troop_id, ":troop", ":agent"),
    (try_begin),
        (eq, ":troop", "trp_player"),
        (agent_set_team, ":agent", 0),
    (else_try),
        (troop_is_hero, ":troop"),
        (neq, ":troop", "trp_player"),
        (agent_set_no_death_knock_down_only, ":agent", 1),
        (agent_set_damage_modifier, ":agent", 150),
    (else_try),
        (this_or_next|eq, ":troop", "trp_northern_germanic_warrior"),
        (this_or_next|eq, ":troop", "trp_northern_germanic_freeman"),
        (this_or_next|eq, ":troop", "trp_frisian_freeman"),
        (eq, ":troop", "trp_frisian_companion"),
        (agent_set_ranged_damage_modifier, ":agent", 50),
        (agent_set_damage_modifier, ":agent", 75),
        (agent_set_accuracy_modifier, ":agent", 50),
    (try_end),
    ]),

    (ti_before_mission_start,0,0,[],[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    (assign, "$g_battle_result", 0),
    (assign, "$tutorial_state", 0),
    (team_set_relation, 0,3,-1),
    (team_set_relation, 2,3,-1),
    (team_set_relation, 0,2,1),
    # (set_cheer_at_no_enemy, 0),
    ]),

    # (ti_tab_pressed,0,0,[],[
    # (finish_mission),
    # ]),

    (1,4,ti_once,[
    (num_active_teams_le, 2),
    (eq, "$temp", -1),
    (neg|main_hero_fallen),
(neg|conversation_screen_is_active),
    ],[
    (mission_enable_talk),
    (call_script, "script_change_troop_renown", "trp_player", 5),
    (add_xp_as_reward, 250),
    (start_mission_conversation, "trp_dani_hengest"),
    # (tutorial_box, "@The Frisians are retreating! Search for Hengist and talk with him.", "@Victory"),
    # (finish_mission, 3),
    # (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),

    (1,1,0,[(eq, "$temp", 0),],[(assign, "$temp", -1)]),

    (0,0,0,[(quest_slot_eq, "qst_finnsburh_quest_2", slot_quest_current_state, 6),],
    [
    (store_mission_timer_a, ":cur_time"),
    (set_fixed_point_multiplier, 100),
    (try_begin),
        (ge, ":cur_time", 12),
        (eq, "$tutorial_state", 1),
        (val_add, "$tutorial_state", 1),
        (tutorial_message_set_background, 1),
        (tutorial_message, -1),
        (quest_set_slot, "qst_finnsburh_quest_2", slot_quest_current_state, 7),
    (else_try),
        (ge, ":cur_time", 1),
        (eq, "$tutorial_state", 0),
        (val_add, "$tutorial_state", 1),
        (tutorial_message_set_background, 1),
        (tutorial_message, "@Hengest shouts: ^^'Warriors! Take up your shields, think of valor. Fight in the vanguard and be resolute!'"),
    (try_end),
      ]),


    (0,5,ti_once,[
    (main_hero_fallen),
    ],[
    (jump_to_menu, "mnu_finnsburg_revenge_lost"),
    (finish_mission, 3),
    (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),
    (0,5,ti_once,[
    (neg|conversation_screen_is_active),
    (eq, "$g_battle_result", 1),
    ],[
    (jump_to_menu, "$g_next_menu"),
    (finish_mission, 3),
    (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),

    (0, 0, 4, [
    (num_active_teams_le, 2),
    (ge, "$temp", 1),],
    [
    (try_for_range, ":entry", 21,26),
        (add_visitors_to_current_scene, ":entry", "trp_frisian_freeman", 13),
        (add_visitors_to_current_scene, ":entry", "trp_frisian_companion",2),
    (try_end),
    (display_message, "@Another wave of Frisians arrives!"),
    (val_sub, "$temp", 1),
    ]),

    (ti_on_agent_killed_or_wounded, 0, 0, [],
    [
    (store_trigger_param_1, ":dead_agent"),
    (store_trigger_param_3, ":is_wounded"),
    (agent_get_troop_id, ":troop", ":dead_agent"),
    (main_party_has_troop, ":troop"),
    (try_begin),
        (this_or_next|eq, ":is_wounded", 1),
        (troop_is_hero, ":troop"),
        (party_wound_members, "p_main_party", ":troop", 1),
    (else_try),
        (party_remove_members, "p_main_party", ":troop", 1),
    (try_end),
    ]),

    (0, 0, 2, [],
    [
    (try_for_agents, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_get_team, ":team", ":agent_no"),
        (eq, ":team", 1),
        (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
    (try_end),
    ]),
    (ti_before_mission_start, 0, 0, [],
        [
        (set_global_cloud_amount, 25),
        (set_global_haze_amount, 25),
        (scene_set_day_time, 13),
        ]),


    common_inventory_not_available,
]),


("fleet_cutscene",mtf_battle_mode,-1,"plundering a settlement",[
    (0,mtef_scene_source,af_override_horse,0,1,[]),#player
    (1,mtef_visitor_source,af_override_horse,0,1,[]),#guard
    (2,mtef_visitor_source,af_override_horse,0,1,[]),#guard
	  (3,mtef_visitor_source,af_override_horse,0,1,[]),#legatus
    (4,mtef_visitor_source,af_override_horse,0,1,[]),#legatus

    (5,mtef_visitor_source,af_override_horse,0,1,[]),#unused
    (6,mtef_visitor_source,af_override_horse,0,1,[]),#unused
    (7,mtef_visitor_source,af_override_horse,0,1,[]),#unused
  #spectators begin
  #69 bis 73 sind mindestens 5 pro spawn
    (8,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (9,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (10,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (11,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (12,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (13,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (14,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (15,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (16,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (17,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (18,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (19,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (20,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (21,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (22,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (23,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (24,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (25,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (26,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (27,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (28,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (29,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (30,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (31,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (32,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (33,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (34,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (35,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (36,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (37,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (38,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (39,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (40,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (41,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (42,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (43,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (44,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (45,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (46,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (47,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (48,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (49,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (50,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (51,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (52,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (53,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (54,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (55,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (56,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (57,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (58,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (59,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (60,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (61,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (62,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (63,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (64,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (65,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (66,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (67,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (68,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (69,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (70,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (71,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (72,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (73,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (74,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (75,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (76,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (77,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (78,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (79,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (80,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (81,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (82,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (83,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (84,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (85,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (86,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (87,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (88,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (89,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (90,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (91,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (92,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (93,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (94,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (95,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (96,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (97,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (98,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (99,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (100,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (101,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (102,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (103,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (104,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (105,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (106,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (107,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (108,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (109,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (110,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (111,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (112,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (113,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (114,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (115,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (116,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (117,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (118,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (119,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (120,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (121,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (122,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (123,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (124,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (125,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (126,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
    (127,mtef_visitor_source,af_override_horse,0,1,[]),#spectators
  ],[
    (ti_before_mission_start, 0, 0, [],[
      (scene_set_day_time, 24),
      (set_global_cloud_amount, 100),
      (set_global_haze_amount, 100),
      (set_fog_distance, 350, 0xFF6c6c6c),
      (set_rain, 1, 250),
      (assign, "$temp", -1),
    ]),

    (ti_tab_pressed,0,0,[],[
      (show_object_details_overlay, 1),
      (jump_to_menu, "$g_next_menu"),
      (finish_mission),
    ]),

    (ti_after_mission_start,0,0,[],[
      (show_object_details_overlay, 0),
    ]),

    (0, 0, ti_once,[],[
      (get_player_agent_no, ":player"),
      (agent_set_speed_modifier,":player", 0),
      (agent_set_horse_speed_factor, ":player", 0),
      (agent_set_visibility, ":player", 0),
	   ]),

    (0,0,0,[],[
      (store_mission_timer_a, ":cur_time"),
      (set_fixed_point_multiplier, 100),
      (try_begin),
          (eq, "$tutorial_state", 5),
          (ge, ":cur_time", 73),
          (jump_to_menu, "$g_next_menu"),
          (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
          (show_object_details_overlay,1),
          (finish_mission, 3),
          (val_add, "$tutorial_state", 1),
          (play_sound,"snd_thunder"),
      (else_try),
          (ge, ":cur_time", 70),
          (eq, "$tutorial_state", 4),
          (set_fixed_point_multiplier, 1000),
          (entry_point_get_position, pos9, 104),
          (mission_cam_animate_to_position, pos9, 4000, 1),
          (val_add, "$tutorial_state", 1),
          (tutorial_message_set_background, 1),
          (tutorial_message, -1),
      (else_try),
          (ge, ":cur_time", 45),
          (eq, "$tutorial_state", 3),
          (set_fixed_point_multiplier, 1000),
          (entry_point_get_position, pos9, 103),
          (mission_cam_animate_to_position, pos9, 25000, 0),
          (val_add, "$tutorial_state", 1),
          (tutorial_message_set_background, 1),
          (try_begin),
            (check_quest_active, "qst_finnsburh_quest_2"),
            (tutorial_message, "@'All known gods of the ocean and gods of the sky and all unkown gods of the ocean and the sky, hear me! Guard our ships! But destroy the ships of Finn thereby he cannot escape our wrath!'"),
          (else_try),
            (tutorial_message, "@'By your will, let fate be kind, And by your hand, let glory be mine. Hail Freja, mighty and wise, Hail Freja, goddess of the slain.'"),
          (try_end),
      (else_try),
          (ge, ":cur_time", 23),
          (eq, "$tutorial_state", 2),
          (entry_point_get_position, pos9, 102),
          (mission_cam_animate_to_position, pos9, 25000, 0),
          (val_add, "$tutorial_state", 1),
          (tutorial_message_set_background, 1),
          (try_begin),
            (check_quest_active, "qst_finnsburh_quest_2"),
            (tutorial_message, "@'Dunraz! Dunraz! Dunraz! Hear me, great thunderer! Let Finn and his men tremble in fear! When they hear your hammer, Dunraz, great thunderer, then they know: The Dani are coming!'"),
          (else_try),
            (tutorial_message, "@'Should this be my final voyage, Let my deeds honor your name, And should I triumph, I shall offer my gratitude in feasts and song.'"),
          (try_end),
      (else_try),
          (ge, ":cur_time", 1),
          (eq, "$tutorial_state", 1),
          (entry_point_get_position, pos9, 101),
          (mission_cam_animate_to_position, pos9, 25000, 0),
          (val_add, "$tutorial_state", 1),
          (tutorial_message_set_background, 1),
          (try_begin),
            (check_quest_active, "qst_finnsburh_quest_2"),
            (tutorial_message, "@Hengest unleashes a fearsome warcry, then he shouts: ^^'Dunraz! Dunraz! Dunraz! Hear me, great thunderer! You swing your hammer to honor us and to announce our arrival!'"),
          (else_try),
            (tutorial_message, "@Haddingr invokes the gods:^^'O Freja, Lady of the Slain, Mistress of the Battle-Sworn, Hear the plea of Haddingr, your humble servant, As I set sail with my host to face the Augandzi.'"),
          (try_end),
      (else_try),
          (eq, "$tutorial_state", 0),
          (set_fixed_point_multiplier, 1000),
          (mission_cam_set_mode, 1, 0, 0),
          (set_camera_in_first_person, 0),
          (init_position, pos10),
          (entry_point_get_position, pos10, 100),
          (mission_cam_set_position, pos10),
          (val_add, "$tutorial_state", 1),

          (set_fixed_point_multiplier, 1),
          (try_for_prop_instances, ":ship"),
              (prop_instance_get_scene_prop_kind, ":is_ship", ":ship"),
              (is_between, ":is_ship", "spr_ship", "spr_snowy_barrel_a"),
              (assign, "$temp", ":ship"),
              (prop_instance_get_position, pos30, ":ship"),
              (prop_instance_get_position, pos31, ":ship"),
              (prop_instance_get_position, pos11, ":ship"),
              (position_move_x, pos11, 20000),
              (prop_instance_animate_to_position, ":ship", pos11, 7000),
          (try_end),
      (try_end),
    ]),

    #madsci lets keep people on the boat
    (0, 0, ti_once,[
      (ge, "$temp", 0),
    ],[
      (try_for_agents, ":agent"),
        (agent_set_no_dynamics, ":agent", 1),
      (try_end),
    ]),

    (0, 0, 0,[
      (ge, "$temp", 0),
    ],[
      (set_fixed_point_multiplier, 100),
      (prop_instance_get_position, pos30, "$temp"),
      (position_get_x, ":x", pos30),
      (position_get_y, ":y", pos30),
      (position_get_z, ":z", pos30),
      (position_get_x, ":x2", pos31),
      (position_get_y, ":y2", pos31),
      (position_get_z, ":z2", pos31),
      (val_sub, ":x", ":x2"),
      (val_sub, ":y", ":y2"),
      (val_sub, ":z", ":z2"),
      (try_for_agents, ":agent"),
        (agent_get_position, pos1, ":agent"),
        (position_move_z, pos1, ":z", 1),
        (position_move_x, pos1, ":x", 1),
        (position_move_y, pos1, ":y", 1),
        (agent_set_position, ":agent", pos1),
      (try_end),
      (prop_instance_get_position, pos31, "$temp"),
    ]),
    # equipment troops
    (ti_on_agent_spawn, 0, 0, [],	[
      (store_trigger_param, ":agent", 1),
      (try_for_range, ":item_slot", ek_item_0, ek_head),
          (agent_get_item_slot, ":item", ":agent", ":item_slot"),
          (gt, ":item", -1),
          (try_begin),
              (is_between, ":item", weapons_begin, weapons_end),
              (agent_set_wielded_item,":agent",":item"),
          (else_try),
              (is_between, ":item", shields_begin, shields_end),
              (agent_set_wielded_item,":agent",":item"),
          (try_end),
      (try_end),
    ]),
    (4, 0, 0,[
      (store_mission_timer_a, ":cur_time"),
      (gt, ":cur_time", 2),
    ],[
      (try_for_agents, ":agent"),
          (agent_is_human, ":agent"),
          (agent_is_alive, ":agent"),
          (agent_is_active,":agent"),

          (agent_get_troop_id, ":troop_id", ":agent"),
          (neq,":troop_id","trp_player"),

          (agent_get_animation, ":agent_anl", ":agent", 0),
          (agent_get_animation, ":agent_anu", ":agent", 1),

          (store_random_in_range, ":rand", 0, 350),

          (try_begin),
              (le, ":rand", 40),
              (agent_play_sound, ":agent", "snd_man_warcry"),
              (call_script,"script_agent_perform_shield_taunt", ":agent"),
          (else_try),
              (le, ":rand", 75),
              (eq, ":agent_anl", 8),#
              (this_or_next|eq, ":agent_anu", 320),#
              (eq, ":agent_anu", -1),#
              (call_script,"script_agent_perform_warcry", ":agent"),
          (else_try),
              (le, ":rand", 115),
              (eq, ":agent_anl", 8),#v
              (this_or_next|eq, ":agent_anu", 320),#
              (eq, ":agent_anu", -1),#
              (call_script,"script_agent_perform_shield_taunt", ":agent"),
          (try_end),
      (try_end),
    ]),

  (0, 0, ti_once, #preparations 2
    [
    ],
    [
    (assign, "$lightning_cycle", 0),
    (play_sound,"snd_thunder"),
    (set_fixed_point_multiplier, 100),
    (get_startup_sun_light, pos20),
    (position_get_x, "$sun_r", pos20),	# r
    (position_get_y, "$sun_g", pos20), # g
    (position_get_z, "$sun_b", pos20),	# b
    (get_startup_ambient_light, pos21),
    (position_get_x, "$amb_r", pos21),	# r
    (position_get_y, "$amb_g", pos21), # g
    (position_get_z, "$amb_b", pos21),	# b
  ]),

  (3, 0.2, 6, 			#lightning 1
    [
    (eq,"$lightning_cycle",0),
    # (store_random_in_range,":chance",0,2),
    # (eq,":chance",1),
    (play_sound,"snd_thunder"),
    (set_startup_sun_light, 10000, 10000, 10000),
    (set_startup_ambient_light, 10000, 10000, 10000),
    # (display_message, "@set light 1"),
    ],
    [
    (set_startup_sun_light, 0, 0, 0),
    (set_startup_ambient_light, 0, 0, 0),
    (assign, "$lightning_cycle",1),
    # (display_message, "@set light 2"),
  ]),

  (0.4,0.1, 6,			#lightning 2
    [
    (eq,"$lightning_cycle",1),

    (set_startup_sun_light, 220, 220, 220),
    (set_startup_ambient_light, 220, 220, 220),
    # (display_message, "@set light 3"),
    ],
    [
    (set_startup_sun_light, 1, 1, 1),
    (set_startup_ambient_light, 1, 1, 1),
    (assign,"$lightning_cycle",2),
    # (display_message, "@set light 4"),
  ]),

  (0.5,0.1, 6,			#lightning 3
    [
    (eq,"$lightning_cycle",2),
    (set_startup_sun_light, 150, 150, 150),
    (set_startup_ambient_light, 150, 150, 150),
    # (display_message, "@set light 5"),
    ],
    [
    (set_startup_sun_light, "$sun_r", "$sun_g", "$sun_b"),
    (set_startup_ambient_light, "$amb_r", "$amb_g", "$amb_b"),
    (assign,"$lightning_cycle", 0),
    # (display_message, "@set light 6"),
  ]),
  common_inventory_not_available,
]),

("final_feast",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#player
      (1,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#player
      (2,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#guard
	  (3,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#legatus
      (4,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#legatus

      (5,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#unused
      (6,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#unused
      (7,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#unused
      (8,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#spectators
      (9,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#spectators
      (10,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#spectators
      (11,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#spectators
      (12,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#spectators
      (13,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[]),#spectators
      (14,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[itm_dedal_lutnia]),#spectators
      (15,mtef_visitor_source,af_override_horse|af_override_head|af_override_weapons|af_override_gloves,0,1,[itm_dedal_lira]),#spectators
      (16,mtef_visitor_source,0,0,1,[]),#spectators
      (17,mtef_visitor_source,0,0,1,[]),#spectators
      (18,mtef_visitor_source,0,0,1,[]),#spectators
      (19,mtef_visitor_source,0,0,1,[]),#spectators
      (20,mtef_visitor_source,0,0,1,[]),#spectators
      (21,mtef_visitor_source,0,0,1,[]),#spectators
      (22,mtef_visitor_source,0,0,1,[]),#spectators
      (23,mtef_visitor_source,0,0,1,[]),#spectators
      (24,mtef_visitor_source,0,0,1,[]),#spectators
      (25,mtef_visitor_source,0,0,1,[]),#spectators
      (26,mtef_visitor_source,0,0,1,[]),#spectators
      (27,mtef_visitor_source,0,0,1,[]),#spectators
      (28,mtef_visitor_source,0,0,1,[]),#spectators
      (29,mtef_visitor_source,0,0,1,[]),#spectators
      (30,mtef_visitor_source,0,0,1,[]),#spectators
    ],
    [
    (0, 2.5, ti_once,[
      (neg|conversation_screen_is_active),
      (ge, "$temp", 1),
    ],[
      (mission_enable_talk),
      (start_mission_conversation, "$temp"),
    ]),

    (0, 0, ti_once,
       [],[
    (get_player_agent_no, ":player"),
    (agent_set_no_death_knock_down_only, ":player", 1),
	   ]),

    (ti_before_mission_start, 0, 0, [
			 ],
    [
    (scene_set_day_time, 24),
    ]),

    (ti_tab_pressed,0,0,[],[
    (try_begin),
        (ge, "$g_battle_result", 6),
        (jump_to_menu, "$g_next_menu"),
        (mission_disable_talk),
        (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
        (finish_mission, 3),
    (else_try),
        (tutorial_box, "@Cannot leave now. Talk with all heroes first.", "@Hint"),
    (try_end),
    ]),

    (ti_before_mission_start,0,0,[],[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_feast),
    (assign, "$g_battle_result", 0),
    ]),
    (ti_after_mission_start,0,0,[],[
    (mission_enable_talk),
    ]),

(ti_on_agent_spawn,1,0,[
    (store_trigger_param_1,":agent"),
    (agent_get_troop_id,":troop",":agent"),
    (try_begin),
      (is_between,":troop","trp_musican_male","trp_musicans_end"),
      (try_begin),
        (agent_has_item_equipped,":agent","itm_dedal_lutnia"),
        (agent_set_stand_animation, ":agent", "anim_lute_sitting"),
        (agent_set_animation, ":agent", "anim_lute_sitting"),
        (agent_play_sound,":agent","snd_dedal_tavern_lute"),
      (else_try),
        (agent_has_item_equipped,":agent","itm_dedal_lira"),
        (agent_set_stand_animation, ":agent", "anim_lyre_sitting"),
        (agent_set_animation, ":agent", "anim_lyre_sitting"),
        (agent_play_sound,":agent","snd_dedal_tavern_lyre"),
      (try_end),
      (store_random_in_range,":r",0,300),
      (agent_set_animation_progress,":agent",":r"),
    (try_end),
  ],
  []),



    common_inventory_not_available,]),

("visit_rome_secrets",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source,af_override_horse,0,1,[]),#player
    ],
    [
    (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          ], []),

      (1,0,0,[
        (neg|conversation_screen_is_active),
        (neg|is_presentation_active, "prsnt_battle"),
        (neg|is_presentation_active, "prsnt_order_display"),
        (eq, "$temp", 1),
        ],
        [
        (store_mission_timer_a, ":cur_time"),
        (try_begin),
            (ge, ":cur_time", 45),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (ge, ":cur_time", 30),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@It is said, that treasures are hidden in the tunnels. It is also said that the tunnels connect various places with each other."),
        (else_try),
            (ge, ":cur_time", 20),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (ge, ":cur_time", 5),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@The Roman catacombs are an ancient underground burial place. They were also used as hideouts by the early Christians, at the time when Christianity was persecuted."),
        (try_end),
      ]),

      (0.5,0,0,[
        (neg|conversation_screen_is_active),
        (neg|is_presentation_active, "prsnt_battle"),
        (neg|is_presentation_active, "prsnt_order_display"),
        (eq, "$temp", 2),
        ],
        [
        (store_mission_timer_a, ":cur_time"),
        (try_begin),
            (ge, ":cur_time", 155),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (ge, ":cur_time", 135),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@You don't know why, but everything here looks so familiar. It seems that you have visited this place before."), #lmao ancestrial memories
        (else_try),
            (eq, ":cur_time", 125),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (eq, ":cur_time", 105),
            (tutorial_message_set_background, 1),
            (mission_cam_set_screen_color, 0xFF000000),
            (mission_cam_animate_to_screen_color, 0x4D000000, 2000),
            (tutorial_message, "@Suddenly, you feel a hand touching your arm. You can feel the warm breath of a human. Then you hear a soft voice say:^^         'You don't need to worry about him.'^^Then it is gone. Ghosts?"),
        (else_try),
            (eq, ":cur_time", 95),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (eq, ":cur_time", 75),
            (tutorial_message_set_background, 1),
            (mission_cam_set_screen_color, 0xFF000000),
            (mission_cam_animate_to_screen_color, 0x4D000000, 2000),
            (tutorial_message, "@Again you smell perfume and the stench disappears. Then you hear a soft voice say:^^       'Why? You know why.'^^The stench comes back, the voice disappears. Was it a ghost?"),
        (else_try),
            (eq, ":cur_time", 65),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (eq, ":cur_time", 45),
            (mission_cam_set_screen_color, 0xFF000000),
            (mission_cam_animate_to_screen_color, 0x4D000000, 2000),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@All of the sudden the disgusting stench is gone. You smell perfume. You hear a female voice laugh. You hear the calming sound of a lyre. Then all of a sudden you smell the putrid stench again, and the sounds faded away. Maybe it was just a hallucination caused by the smell?"),
        (else_try),
            (eq, ":cur_time", 30),
            (tutorial_message, -1),
            (tutorial_message_set_background, 0),
        (else_try),
            (eq, ":cur_time", 20),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@Most likely, this place was once the home of Emperor Nero. Ironically, it stinks incredibly. The locals seem to use it as a dump."),
        (else_try),
            (eq, ":cur_time", 5),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@You spot something shining. You pick it up and notice it is an old coin. On one side it has a male face and Nero is written under it. On the other side it has a female face and Agrippina is written under it."),
        (try_end),
      ]),

    (ti_tab_pressed,0,0,[],[
    (jump_to_menu, "mnu_town"),
    (finish_mission),
    ]),

    (ti_before_mission_start,0,0,[],[
    (mission_cam_set_screen_color, 0xFF000000),
    (mission_cam_animate_to_screen_color, 0x4D000000, 3000),#black

    (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
    ]),

    common_inventory_not_available,
]),


### ernak quest missions
("visit_lekhs",mtf_battle_mode,-1,
    "plundering a settlement",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#player
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
      (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
      (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
      (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
      (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
      (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
      (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    ],
   vc_weather + [

    (0,8,0,[],
      [
        (try_for_agents,":agent_no"),
            (agent_is_alive,":agent_no"),
            (agent_is_human,":agent_no"),
            (agent_get_troop_id, ":troop_no", ":agent_no"),
            (eq, ":troop_no", "trp_caucasian_townswoman"),

            (assign, ":continue_walk", 0),
            (store_random_in_range, ":continue_walk", 1, 100),
            (try_begin),
                (le, ":continue_walk", 40),
                (agent_set_stand_animation, ":agent_no", "anim_stand_man"),
                (agent_set_walk_forward_animation, ":agent_no", "anim_walk_forward"),
                (agent_set_animation, ":agent_no", "anim_stand_man"),
                (agent_set_animation_progress, ":agent_no", 10),

                (agent_get_position, pos1, ":agent_no"),
                (store_random_in_range, ":points", 1, 30),
                (entry_point_get_position, pos2, ":points"),
                (agent_set_speed_limit, ":agent_no", 1),
                (agent_set_scripted_destination, ":agent_no", pos2),
            (try_end),
        (try_end),
    ]),

    (ti_before_mission_start,0,0,[],[
      (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
      (assign, "$g_battle_result", 0),
      (team_set_relation, 0,1,1),
      (team_set_relation, 1,0,1),
      (mission_enable_talk),
    ]),
    (ti_tab_pressed, 0, 0,
      [
          (display_message, "str_cannot_leave_now"), #SB : message
      ], []),

    common_inventory_not_available,
	common_battle_init_banner,
]),

("olpia_mission",mtf_battle_mode,-1,
  "plundering a settlement",[
    (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),#player
    (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
  ],vc_weather + [
    dplmc_horse_speed,
    poisoned_arrows_hit,
    poisoned_arrows_damage,
    common_battle_init_banner,

    (ti_before_mission_start,0,0,[],[
      (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
      (assign, "$g_battle_result", 0),
      (team_set_relation, 0,1,-1),
      (team_set_relation, 1,0,-1),
    ]),

    (ti_tab_pressed, 0, 0, [],[
      (try_begin),
        (eq, "$g_battle_won", 1),
      (else_try),
        (display_message,"str_can_not_retreat"),
      (try_end),
    ]),

    (1,3,0,[
      (this_or_next|main_hero_fallen),
      (num_active_teams_le, 1),
      (eq, "$g_battle_result", 0),
    ],[
      (try_begin),
          (neg|main_hero_fallen),
          (assign, "$g_next_menu", "mnu_olpia_victory"),
          (call_script, "script_change_troop_renown", "trp_player", 5),
          (add_xp_as_reward, 500),
      (else_try),
          (assign, "$g_next_menu", "mnu_ernak_defeat"),
      (try_end),
      (jump_to_menu, "$g_next_menu"),
      (assign, "$g_battle_result", 1),
      (finish_mission, 3),
      (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
    ]),

    common_inventory_not_available,
]+ dplmc_battle_mode_triggers + enhanced_common_battle_triggers),

("lead_charge_quest", mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",[
      (1,mtef_defenders|mtef_team_0,0,aif_start_alarmed,65,[]),
      (0,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
      (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,65,[]),
      (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
    ], vc_weather +
    [
      (0, 6.5, ti_once,[
        (neg|conversation_screen_is_active),
        (check_quest_active, "qst_haddingrs_revenge"),
        (quest_slot_eq, "qst_haddingrs_revenge", slot_quest_current_state, 32),
      ],[
        (mission_enable_talk),

        (start_mission_conversation, "trp_dani_haddingr"),
        (set_fixed_point_multiplier, 100),
        (entry_point_get_position, pos10, 3),
        # player is attacker team. let them hold during conversation
        (try_for_range, ":cur_group", 0, grc_everyone),
          (team_set_order_position, "$attacker_team", ":cur_group", pos10),
          (team_set_order_position, "$attacker_team_2", ":cur_group", pos10),
          (team_give_order, "$attacker_team", ":cur_group", mordr_hold),
          (team_give_order, "$attacker_team_2", ":cur_group", mordr_hold),
        (try_end),
      ]),
      # Let it burn
      (0, 80, ti_once, [
        (eq, "$g_encounter_is_in_village", 1),
      ],[
        (display_message, "@Fire has broken out!"),
        (set_fixed_point_multiplier, 100),
        (assign, reg1, "psys_village_fire_big"),

        (assign, reg2, "psys_war_smoke_tall"),
        (assign, reg3, 0),
        (assign, ":counter", 0),
        (try_for_prop_instances, ":curr_instance", -1, somt_object),
            (lt, ":counter", 15),	#not more then 60 part sys, now 25 since people get performance issues
            (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":curr_instance"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_village_house_e", "spr_carpet_d"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_village_stable_a", "spr_dungeon_door_cell_a"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_town_house_a", "spr_windmill"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_earth_house_a", "spr_town_house_aa"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_village_house_a", "spr_crude_fence"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_arabian_house_a", "spr_arabian_square_keep_a"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_viking_house_a", "spr_harbour_a"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_rhodok_houses_a", "spr_bridge_b"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_roman_house_a", "spr_roman_market_new"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_ado_wood_house", "spr_ado_wood_judas_cradle"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_ado_wood_stable", "spr_ado_wood_stairs"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_b_house0_t1", "spr_b_roof0_t1"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_b_villasevulus0_t1", "spr_b_wall0_t1"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_kolba_a", "spr_410_tent"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_house_saxon", "spr_wood_platform"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_roman_house_f_alt", "spr_umayyad_battlement_a"),
            (this_or_next|is_between, ":scene_prop_kind", "spr_castrum_house_5", "spr_arabian_pyramid"),
            (is_between, ":scene_prop_kind", "spr_scythian_hut_1", "spr_scythian_wagon"),
            (shuffle_range, 1, 4),
            (neq, reg1, 0),
            (val_add, ":counter", 1),
            (try_for_range, ":unused", 0, 4),
              (store_random_in_range, ":rand23", -150, 150),
              (position_set_x, pos1, ":rand23"),
              (store_random_in_range, ":rand23", -150, 150),
              (position_set_y, pos1, ":rand23"),
              (store_random_in_range, ":rand23", 50, 150),
              (position_set_z, pos1, ":rand23"),
              (prop_instance_add_particle_system, ":curr_instance", reg1, pos1),
              (eq, reg1, "psys_village_fire_big"),
              (position_move_z, pos1, 100),
              (prop_instance_add_particle_system, ":curr_instance", "psys_village_fire_smoke_big", pos1),
              #(prop_instance_play_sound, ":curr_instance", "snd_fire", sf_looping),
            (end_try),
        (try_end),
      ]),


      (ti_after_mission_start, 0, ti_once, [], [
        (mission_cam_set_screen_color, 0xFF000000),
        (mission_cam_animate_to_screen_color, 0x00000000, 3000),
      ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         (assign, ":initial_courage_score", 5000),

         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 35),
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700

         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"),

         (agent_get_party_id, ":agent_party", ":agent_no"),
         (party_get_morale, ":cur_morale", ":agent_party"),

         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"),
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"),
        ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),

        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
	      (call_script, "script_apply_death_effect_on_courage_scores_vc", ":dead_agent_no", ":killer_agent_no"), #madsci
      ]),

      (ti_tab_pressed, 0, 0, [],
        [
          (try_begin),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",10),
            (eq, "$g_battle_won", 1),
            (call_script, "script_count_mission_casualties_from_agents"),
            (jump_to_menu, "$g_next_menu"),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission, 3),
          (else_try),
            (display_message,"str_cannot_leave_now"),
          (try_end),
      ]),
      (1, 4, 0,
      ##diplomacy end
      [(main_hero_fallen)],
        [
          ##diplomacy begin
          (try_begin),
              (call_script, "script_cf_dplmc_battle_continuation"),
          (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (jump_to_menu, "$temp4"),
              (finish_mission,0),
          (try_end),
      ]),

      immersive_troops,

      (ti_before_mission_start, 0, 0, [],
       [
          (team_set_relation, 0, 2, 1),
          (team_set_relation, 1, 3, 1),
          (call_script, "script_place_player_banner_near_inventory_bms"),

          (party_clear, "p_routed_enemies"),

          (assign, "$g_latest_order_1", 1),
          (assign, "$g_latest_order_2", 1),
          (assign, "$g_latest_order_3", 1),
          (assign, "$g_latest_order_4", 1),
          # (assign, "$FormAI_AI_no_defense", 0),#enable it for battle
      ]),


      (0, 0, ti_once, [], [
          (assign,"$g_battle_won",0),
          (assign,"$defender_reinforcement_stage",0),
          (assign,"$attacker_reinforcement_stage",0),
          (call_script, "script_place_player_banner_near_inventory"),
          (call_script, "script_combat_music_set_situation_with_culture"),
          (assign, "$g_defender_reinforcement_limit", 2),
          ##diplomacy begin
          (call_script, "script_init_death_cam"),
          # (assign, "$g_dplmc_charge_when_dead", 0),
          ##diplomacy end
      ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [
            #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
            #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
            (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
            (assign, ":total_enemy_soldiers", reg0),

            #decrease number of agents already in battle area to find all number of reinforcement enemies
            (assign, ":enemy_soldiers_in_battle_area", 0),
            (try_for_agents,":cur_agent"),
              (agent_is_human, ":cur_agent"),
              (agent_get_party_id, ":agent_party", ":cur_agent"),
              (try_begin),
                (neq, ":agent_party", "p_main_party"),
                (neg|agent_is_ally, ":cur_agent"),
                (val_add, ":enemy_soldiers_in_battle_area", 1),
              (try_end),
            (try_end),
            (store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

            (try_begin),
              (lt, ":total_enemy_reinforcements", 15),
              (ge, "$defender_reinforcement_stage", 2),
              (eq, "$defender_reinforcement_limit_increased", 0),
              (val_add, "$g_defender_reinforcement_limit", 1),
              (assign, "$defender_reinforcement_limit_increased", 1),
            (try_end),
            (lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",10),
            (store_normalized_team_count,":num_defenders", 0),
            (lt,":num_defenders",20)],
      [ (add_reinforcements_to_entry,0,45),
        (assign, "$defender_reinforcement_limit_increased", 0),
        (val_add,"$defender_reinforcement_stage",1)
      ]),

      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",20)],
      [(add_reinforcements_to_entry,3,45),(val_add,"$attacker_reinforcement_stage",1)]),

      (1, 60, ti_once,[
        (store_mission_timer_a,":mission_time"),
        (ge,":mission_time",10),
        (all_enemies_defeated, 5),
        (this_or_next|eq, "$g_dplmc_battle_continuation", 0),
        (neg|main_hero_fallen),

        (set_mission_result,1),
        (display_message,"str_msg_battle_won"),
        (assign,"$g_battle_won",1),
        (assign, "$g_battle_result", 1),
        (call_script, "script_play_victorious_sound"),
      ],[
        (call_script, "script_count_mission_casualties_from_agents"),
        (jump_to_menu, "$g_next_menu"),
        (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
        (finish_mission, 3),
      ]),

      (10, 0, 0, [(eq,"$g_battle_won",1),],
      [
        (display_message,"str_msg_battle_won"),
      ]),

      common_battle_inventory,

	#madsci
      (3, 0, 0, [
        (this_or_next|eq, "$battle_phase", BP_Fight),
        (eq, "$battle_phase", 0),
        (mission_tpl_are_all_agents_spawned), #madsci
        (call_script, "script_apply_effect_of_other_people_on_courage_scores_vc"),
      ], []), #calculating and applying effect of people on others courage scores

      (3, 0, 0, [
        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",3),
          #(call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
          (call_script, "script_decide_run_away_or_not_vc", ":agent_no", ":mission_time"), #madsci
        (try_end),
      ], []),

      common_battle_order_panel,
      common_battle_order_panel_tick,
	    common_battle_init_banner,
    ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers
    + battle_panel_triggers + extended_battle_menu + common_division_data
    + division_order_processing + real_deployment + formations_triggers
    + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers
    + battle_notifications + ai_horn,
),

("ernak_final_battle",mtf_battle_mode,-1,
    "plundering a settlement",
    [
    (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),#
    (33,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),#
    ],vc_weather +
    [

      (ti_after_mission_start, 0, ti_once, [], [
        (mission_cam_set_screen_color, 0xFF000000),
        (mission_cam_animate_to_screen_color, 0x00000000, 3000),
      ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         (assign, ":initial_courage_score", 5000),

         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 35),
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700

         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"),

         (assign, ":cur_morale", 100),

         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"),
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"),
        ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),

        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
        (call_script, "script_apply_death_effect_on_courage_scores_vc", ":dead_agent_no", ":killer_agent_no"), #madsci
      ]),

      immersive_troops,
	common_battle_init_banner,

      (ti_before_mission_start, 0, 0, [],
      [
        (assign, "$tutorial_state", 0),
        (team_set_relation, 0, 1, 1),
        (team_set_relation, 1, 0, 1),
      ]),

      (4,0,ti_once,[
        (this_or_next|main_hero_fallen),
        (num_active_teams_le, 1),
      ],[
        (stop_all_sounds),
        (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
        (finish_mission,4),
        (assign, "$temp", 2),
        (try_begin),
            (main_hero_fallen),
            (assign, "$temp", 1),
        (try_end),
        (jump_to_menu, "mnu_ernak_final_battle_victory"),
      ]),

      (ti_tab_pressed,0,0,[],[
        (display_message, "str_cannot_leave_now"),
      ]),

      (0,0,0,[],
      [
        (store_mission_timer_a, ":cur_time"),
        (set_fixed_point_multiplier, 100),
        (try_begin),
            (neg|conversation_screen_is_active),
            (ge, ":cur_time", 160),
            (eq, "$tutorial_state", 6),
            (tutorial_message_set_background, 0),
            (tutorial_message, -1),
            (val_add, "$tutorial_state", 1),
        (else_try),
            (neg|conversation_screen_is_active),
            (ge, ":cur_time", 60),
            (eq, "$tutorial_state", 5),
            (tutorial_message_set_background, 1),
            (tutorial_message, "@The Huns cheer to Ernak's words and, invigorated by their leader's bold spirit, charge with their horses towards the enemy, on the great steppes of Scythia. The last ride of the Huns... Or a new beginning?"),
            (val_add, "$tutorial_state", 1),
        (else_try),
	(neg|conversation_screen_is_active),
            (ge, ":cur_time", 52),
            (eq, "$tutorial_state", 4),
            (val_add, "$tutorial_state", 1), #
            (start_mission_conversation, "trp_sabiroi_king"),
        (else_try),
            (ge, ":cur_time", 50),
            (eq, "$tutorial_state", 3),
            (mission_cam_set_mode, 0, 1000, 0),
            (val_add, "$tutorial_state", 1),
        (else_try),
            (ge, ":cur_time", 25),
            (eq, "$tutorial_state", 2),
            (entry_point_get_position, pos9, 40),
            (mission_cam_animate_to_position, pos9, 25000, 0),
            (val_add, "$tutorial_state", 1),
            (try_for_agents, ":agent"),
                (agent_is_alive, ":agent"),
                (agent_is_human, ":agent"),
                (store_random_in_range, ":r", 0, 2),
                (eq, ":r", 0),
                (call_script,"script_agent_perform_warcry", ":agent"),
            (try_end),
        (else_try),
            (ge, ":cur_time", 5),
            (eq, "$tutorial_state", 1),
            (entry_point_get_position, pos9, 39),
            (mission_cam_animate_to_position, pos9, 25000, 0),
            (val_add, "$tutorial_state", 1),

            (try_for_agents, ":agent"),
                (agent_is_alive, ":agent"),
                (agent_is_human, ":agent"),
                (store_random_in_range, ":r", 0, 2),
                (eq, ":r", 0),
                (call_script,"script_agent_perform_warcry", ":agent"),
            (try_end),
        (else_try),
            (eq, "$tutorial_state", 0),
            (mission_cam_set_mode, 1, 0, 0),
            (set_camera_in_first_person, 0),
            (init_position, pos10),
            (entry_point_get_position, pos10, 38),
            (mission_cam_set_position, pos10),
            (val_add, "$tutorial_state", 1),
        (try_end),
      ]),

	#madsci
      (3, 0, 0, [
          (this_or_next|eq, "$battle_phase", BP_Fight),
          (eq, "$battle_phase", 0),
          (mission_tpl_are_all_agents_spawned), #madsci
          (call_script, "script_apply_effect_of_other_people_on_courage_scores_vc"),
              ], []), #calculating and applying effect of people on others courage scores

      (3, 0, 0, [
        (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),
            #(call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
            (call_script, "script_decide_run_away_or_not_vc", ":agent_no", ":mission_time"), #madsci
        (try_end),
      ], []),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      common_inventory_not_available,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      dplmc_horse_speed,
      passable_allies,
      poisoned_arrows_hit,
      poisoned_arrows_damage,
    ] + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + common_division_data + division_order_processing + real_deployment + formations_triggers + AI_triggers + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications + ai_horn,  #SB : horse cull
),


("lekh_plunder", mtf_battle_mode,-1,
    "plundering a settlement",
    [ (1,mtef_team_0, 0,aif_start_alarmed,10,[]),
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (31,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (32,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (33,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (34,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (35,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (36,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (37,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (38,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (39,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (40,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
    ], vc_weather +
    [
      common_inventory_not_available,
      common_battle_init_banner,

      (0, 0, ti_once, [],		# Let it burn
        [

          (set_fixed_point_multiplier, 100),
          (assign, reg1, "psys_village_fire_big"),

          (assign, reg2, "psys_war_smoke_tall"),
          (assign, reg3, 0),
          (assign, ":counter", 0),
          (try_for_prop_instances, ":curr_instance", -1, somt_object),
             (lt, ":counter", 15),	#not more then 60 part sys, now 25 since people get performance issues
             (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":curr_instance"),
             (is_between, ":scene_prop_kind", "spr_scythian_hut_1", "spr_scythian_wagon"),
             (shuffle_range, 1, 4),
              (neq, reg1, 0),
              (val_add, ":counter", 1),
              (try_for_range, ":unused", 0, 4),
                (store_random_in_range, ":rand23", -150, 150),
                (position_set_x, pos1, ":rand23"),
                (store_random_in_range, ":rand23", -150, 150),
                (position_set_y, pos1, ":rand23"),
                (store_random_in_range, ":rand23", 50, 150),
                (position_set_z, pos1, ":rand23"),
                (prop_instance_add_particle_system, ":curr_instance", reg1, pos1),
                (eq, reg1, "psys_village_fire_big"),
                (position_move_z, pos1, 100),
                (prop_instance_add_particle_system, ":curr_instance", "psys_village_fire_smoke_big", pos1),
                #(prop_instance_play_sound, ":curr_instance", "snd_fire", sf_looping),
              (end_try),
          (try_end),
      ]),

      (ti_on_agent_spawn, 0.5, 0, [],
        [
          (store_trigger_param_1, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_ally, ":agent_no"),
          (agent_get_wielded_item, ":old_item" , ":agent_no", 1),
          (try_begin),
            (gt, ":old_item" , 0),
            (agent_unequip_item, ":agent_no", ":old_item"),
          (end_try),
          (agent_equip_item, ":agent_no", "itm_torch"),
          (agent_set_wielded_item, ":agent_no", "itm_torch"),
      ]),

      (ti_before_mission_start, 0, 0, [],
        [
          (assign, "$tutorial_state", 0),	#reusing other variable...
          (assign,"$g_battle_result",0),
          (call_script, "script_change_banners_and_chest")
        ]),

      (0, 0, ti_once, [],	# make part of them run around/flee
        [
          (try_for_agents, ":agent_no"),
            # (agent_get_troop_id, ":troop_no", ":agent_no"),
            # (eq, ":troop_no", "trp_townsman"),
            (neg|agent_is_ally, ":agent_no"),
            (agent_set_slot, ":agent_no",  slot_agent_is_running_away, 1),
            (store_random_in_range, ":chance", 1, 101),
            (le, ":chance", 40),	# 40% want to fight at beginning
            (agent_set_slot, ":agent_no",  slot_agent_is_running_away, 0),
            (assign, reg1, "itm_quarter_staff"),
            (assign, reg2, "itm_knife"),
            (assign, reg3, "itm_butchering_knife"),
            (assign, reg4, "itm_dagger"),
            (assign, reg5, "itm_shortened_spear"),
            (assign, reg6, "itm_spear"),
            (assign, reg7, "itm_stones"),
            (assign, reg8, "itm_staff"),
            (assign, reg9, "itm_wooden_stick"),
            (shuffle_range, 1, 10),
            (agent_equip_item, ":agent_no", reg1, 1),
            (agent_set_wielded_item, ":agent_no", reg1),
          (try_end),
          #also make player knock down only
          (get_player_agent_no, ":player_agent"),
          (agent_set_no_death_knock_down_only, ":player_agent", 1),
      ]),

      (3, 0, 0, [],	# keep them fleeing
        [
          (try_for_agents, ":agent_no"),
            (agent_slot_ge, ":agent_no",  slot_agent_is_running_away, 1),
            (neg|agent_is_ally, ":agent_no"),
            (store_random_in_range, ":rand", 32, 40),
            (entry_point_get_position, pos2, ":rand"),
            (agent_start_running_away, ":agent_no", pos2),
          (try_end),
      ]),

      (ti_on_agent_hit, 0, 0, [],		# make damaged agents flee
        [
          (store_trigger_param, ":inflicted_agent_id", 1),
          #(store_trigger_param, ":dealer_agent_id", 2),
          (store_trigger_param, ":inflicted_damage", 3),
          #(get_player_agent_no, ":player_agent"),
          #(eq, ":dealer_agent_id", ":player_agent"),
          (agent_is_active, ":inflicted_agent_id"),
          (agent_is_human, ":inflicted_agent_id"),
          (agent_is_alive, ":inflicted_agent_id"),
          (neg|agent_is_ally, ":inflicted_agent_id"),
          (store_agent_hit_points, ":hp", ":inflicted_agent_id"),
          (this_or_next|lt, ":hp", 75),
          (gt, ":inflicted_damage", 10),
          (store_random_in_range, ":rand", 10, 41),
          (entry_point_get_position, pos2, ":rand"),
          (agent_start_running_away, ":inflicted_agent_id", pos2),
          (agent_slot_eq, ":inflicted_agent_id",  slot_agent_is_running_away, 0),
          (agent_set_slot, ":inflicted_agent_id",  slot_agent_is_running_away, 1),
          #throw away weapon:
          (agent_get_wielded_item, ":weapon", ":inflicted_agent_id", 0),
          (ge, ":weapon", 1),
          (agent_unequip_item, ":inflicted_agent_id", ":weapon"),
      ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
        [
          (store_trigger_param_1, ":dead_agent_no"),
          #(store_trigger_param_2, ":killer_agent_no"),
          (try_begin),
            (ge, ":dead_agent_no", 0),
            (neg|agent_is_ally, ":dead_agent_no"),
            (agent_is_human, ":dead_agent_no"),
            (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
            (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
           # (agent_slot_eq, ":dead_agent_no", slot_agent_vc_wounded, 1),	#new
           # (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
          (try_end),
          #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
      ]),

      (ti_tab_pressed, 0, 0, [],
        [
          (eq, "$tutorial_state", 0),
          (assign, "$tutorial_state", 1),
      ]),

      (1, 1, ti_once,
        [
          (this_or_next|main_hero_fallen),
          (num_active_teams_le,1)
        ],
        [
          (eq, "$tutorial_state", 0),
          (assign, "$tutorial_state", 1),
      ]),

      (1, 180, ti_once, [],	#end mission after 3 minutes
        [
          (eq, "$tutorial_state", 0),
          (assign, "$tutorial_state", 1),
      ]),

      (1, 2, ti_once,
        [
          (eq, "$tutorial_state", 1),
          (assign, "$tutorial_state", 2),
        ],
        [
          (set_fixed_point_multiplier, 100),
          (try_begin),
            (mission_cam_set_mode, 1, 0, 0),
            (set_camera_in_first_person, 0),
            #get scene boundaries
            (init_position, pos11),
            (get_scene_boundaries, pos10, pos11),
            (position_get_x, ":scene_max_x", pos11),
            (position_get_y, ":scene_max_y", pos11),
            #get center of map
            (val_div, ":scene_max_x", 2),
            (val_div, ":scene_max_y", 2),
            (position_set_x, pos11, ":scene_max_x"),
            (position_set_y, pos11, ":scene_max_y"),
            (entry_point_get_position, pos10, 0),#that spawn is always there
            (call_script, "script_point_y_toward_position", pos10, pos11),
            #pos10 points now in direction of center
            (position_move_y, pos10, -7000),
            (position_move_z, pos10, 2200),
            (position_rotate_x, pos8, -35),
            (mission_cam_animate_to_position, pos10, 6000),
          (try_end),
      ]),

      (1, 10, ti_once,
        [
          (eq, "$tutorial_state", 2),
          (assign, "$tutorial_state", 3),
        ],
        [
          (stop_all_sounds, 1),
          (finish_mission,3),
      ]),

      # inflict casualities on player party
      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent"),
        (store_trigger_param_3, ":is_wounded"),
        (agent_get_troop_id, ":troop", ":dead_agent"),
        (main_party_has_troop, ":troop"),
        (try_begin),
            (this_or_next|eq, ":is_wounded", 1),
            (troop_is_hero, ":troop"),
            (party_wound_members, "p_main_party", ":troop", 1),
        (else_try),
            (party_remove_members, "p_main_party", ":troop", 1),
        (try_end),
      ]),
]),


("lead_charge_quest_ambushed", mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (0,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
     (1,mtef_defenders|mtef_team_0,0,aif_start_alarmed,5,[]),
     (2,mtef_team_2,0,aif_start_alarmed,0,[]), #not used
     (3,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,5,[]),
     (5,mtef_defenders|mtef_archers_first|mtef_team_0,0,aif_start_alarmed,5,[]),
     (6,mtef_defenders|mtef_archers_first|mtef_team_0,0,aif_start_alarmed,5,[]),
     (7,mtef_defenders|mtef_archers_first|mtef_team_0,0,aif_start_alarmed,5,[]),
     (8,mtef_defenders|mtef_archers_first|mtef_team_0,0,aif_start_alarmed,5,[]),
     (9,mtef_defenders|mtef_archers_first|mtef_team_0,0,aif_start_alarmed,5,[]),
     (10,mtef_defenders|mtef_archers_first|mtef_team_0,0,aif_start_alarmed,5,[]),
     (11,mtef_defenders|mtef_team_0,0,aif_start_alarmed,5,[]),
     (12,mtef_defenders|mtef_team_0,0,aif_start_alarmed,5,[]),
     (13,mtef_defenders|mtef_team_0,0,aif_start_alarmed,5,[]),
     (14,mtef_attackers|mtef_team_0,0,aif_start_alarmed,3,[]),
     (15,mtef_attackers|mtef_team_1,0,aif_start_alarmed,3,[]),
     (16,mtef_attackers|mtef_team_1,0,aif_start_alarmed,3,[]),
     (17,mtef_attackers|mtef_team_1,0,aif_start_alarmed,3,[]),
     (18,mtef_attackers|mtef_team_1,0,aif_start_alarmed,3,[]),
     (19,mtef_attackers|mtef_team_1,0,aif_start_alarmed,3,[]),
     (20,mtef_attackers|mtef_team_1,0,aif_start_alarmed,3,[]),
     ], vc_weather +
    [

      (ti_after_mission_start, 0, ti_once, [], [
        (mission_cam_set_screen_color, 0xFF000000),
        (mission_cam_animate_to_screen_color, 0x00000000, 3000),
      ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         (assign, ":initial_courage_score", 5000),

         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 35),
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700

         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"),

         (agent_get_party_id, ":agent_party", ":agent_no"),
         (party_get_morale, ":cur_morale", ":agent_party"),

         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"),
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"),
        ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
        (try_end),

        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
        (call_script, "script_apply_death_effect_on_courage_scores_vc", ":dead_agent_no", ":killer_agent_no"), #madsci
      ]),

      (ti_tab_pressed, 0, 0, [],
        [
          (try_begin),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",10),
            (eq, "$g_battle_won", 1),
            (call_script, "script_count_mission_casualties_from_agents"),
            (jump_to_menu, "$g_next_menu"),
            (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
            (finish_mission, 3),
          (else_try),
            (display_message,"str_cannot_leave_now"),
          (try_end),
      ]),

      immersive_troops,
	common_battle_init_banner,

      (ti_before_mission_start, 0, 0, [],
       [
          (team_set_relation, 0, 2, 1),
          (team_set_relation, 1, 3, 1),
          (call_script, "script_place_player_banner_near_inventory_bms"),

          (party_clear, "p_routed_enemies"),

          (assign, "$g_latest_order_1", 1),
          (assign, "$g_latest_order_2", 1),
          (assign, "$g_latest_order_3", 1),
          (assign, "$g_latest_order_4", 1),
          # (assign, "$FormAI_AI_no_defense", 0),#enable it for battle
      ]),


      (0, 0, ti_once, [], [
          (assign,"$g_battle_won",0),
          (assign,"$defender_reinforcement_stage",0),
          (assign,"$attacker_reinforcement_stage",0),
          (call_script, "script_place_player_banner_near_inventory"),
          (call_script, "script_combat_music_set_situation_with_culture"),
          (assign, "$g_defender_reinforcement_limit", 2),
          ##diplomacy begin
          (call_script, "script_init_death_cam"),
          # (assign, "$g_dplmc_charge_when_dead", 0),
          ##diplomacy end
      ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [
            #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
            #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
            (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
            (assign, ":total_enemy_soldiers", reg0),

            #decrease number of agents already in battle area to find all number of reinforcement enemies
            (assign, ":enemy_soldiers_in_battle_area", 0),
            (try_for_agents,":cur_agent"),
              (agent_is_human, ":cur_agent"),
              (agent_get_party_id, ":agent_party", ":cur_agent"),
              (try_begin),
                (neq, ":agent_party", "p_main_party"),
                (neg|agent_is_ally, ":cur_agent"),
                (val_add, ":enemy_soldiers_in_battle_area", 1),
              (try_end),
            (try_end),
            (store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

            (try_begin),
              (lt, ":total_enemy_reinforcements", 15),
              (ge, "$defender_reinforcement_stage", 2),
              (eq, "$defender_reinforcement_limit_increased", 0),
              (val_add, "$g_defender_reinforcement_limit", 1),
              (assign, "$defender_reinforcement_limit_increased", 1),
            (try_end),
            (lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",10),
            (store_normalized_team_count,":num_defenders", 0),
            (lt,":num_defenders",6)],
      [ (add_reinforcements_to_entry,0,45),
        (assign, "$defender_reinforcement_limit_increased", 0),
        (val_add,"$defender_reinforcement_stage",1)
      ]),

      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",6)],
      [(add_reinforcements_to_entry,3,45),(val_add,"$attacker_reinforcement_stage",1)]),

      (1, 60, ti_once,[
        (store_mission_timer_a,":mission_time"),
        (ge,":mission_time",10),
        (all_enemies_defeated, 5),
        (this_or_next|eq, "$g_dplmc_battle_continuation", 0),
        (neg|main_hero_fallen),

        (set_mission_result,1),
        (display_message,"str_msg_battle_won"),
        (assign,"$g_battle_won",1),
        (assign, "$g_battle_result", 1),
        (call_script, "script_play_victorious_sound"),
      ],[
        (call_script, "script_count_mission_casualties_from_agents"),
        (jump_to_menu, "$g_next_menu"),
        (mission_cam_animate_to_screen_color, 0xFF000000, 3000),
        (finish_mission, 3),
      ]),

      (10, 0, 0, [(eq,"$g_battle_won",1),],
      [
        (display_message,"str_msg_battle_won"),
      ]),

      (1, 4, 0,
      ##diplomacy end
      [(main_hero_fallen)],
        [
          ##diplomacy begin
          (try_begin),
              (call_script, "script_cf_dplmc_battle_continuation"),
          (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (jump_to_menu, "$temp4"),
              (finish_mission,0),
          (try_end),
      ]),

      common_battle_inventory,

	#madsci
      (3, 0, 0, [
          (this_or_next|eq, "$battle_phase", BP_Fight),
          (eq, "$battle_phase", 0),
          (mission_tpl_are_all_agents_spawned), #madsci
          (call_script, "script_apply_effect_of_other_people_on_courage_scores_vc"),
              ], []), #calculating and applying effect of people on others courage scores

      (3, 0, 0, [
          (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),
            #(call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
            (call_script, "script_decide_run_away_or_not_vc", ":agent_no", ":mission_time"), #madsci
          (try_end),
      ], []),

      common_battle_order_panel,
      common_battle_order_panel_tick,
    ] + dplmc_battle_mode_triggers + dplmc_horse_cull + utility_triggers + battle_panel_triggers + extended_battle_menu + jacobhinds_morale_triggers + enhanced_common_battle_triggers + battle_notifications + ai_horn,  #SB : horse cull
),

("explore_secret_place", 0, -1,
    "Test.",
    [
    (0,mtef_scene_source,0,0,1,[]),
    (1,mtef_visitor_source,af_override_horse,0,1,[]),
    (2,mtef_visitor_source,af_override_horse,0,1,[]),
    (3,mtef_visitor_source,af_override_horse,0,1,[]),
    ], vc_weather +
    [

        (0, 0, ti_once, [],
        [
            (mission_cam_set_screen_color, 0xFF000000),
            (mission_cam_animate_to_screen_color, 0x00000000, 2000),
        ]),

        common_inventory_not_available,

        (ti_tab_pressed, 0, 0,
          [],
        [
            (mission_cam_animate_to_screen_color, 0xFF000000, 2500),
            (finish_mission, 3),
        ]),

    ]
),

  ("ambush_riversw",mtf_battle_mode,-1,#Siege Warfare
    "Forest",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #player go
      (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #player back
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (17,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (18,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (19,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (20,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (21,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (22,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (23,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (24,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (25,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (26,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (27,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (28,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (29,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (30,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
      (31,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
    ], vc_weather +
    [

      (ti_before_mission_start, 0, 0, [],
        [
          (assign,"$g_battle_result",0),
          (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
          (team_set_relation,1,2,0),
          (team_set_relation,0,1,-1),
      ]),


      (0, 0, ti_once,
        [
          (assign, "$attacker_team", 0),
          (assign, "$defender_team_2", 2),
          ], []
      ),

      (3, 0, ti_once,
        [
          (set_show_messages, 0),
          (team_give_order, "$attacker_team", grc_everyone, mordr_follow),
          (team_give_order, "$defender_team_2", grc_infantry, mordr_stand_closer),
          (team_give_order, "$defender_team_2", grc_archers, mordr_stand_closer),
          (team_give_order, "$defender_team_2", grc_cavalry, mordr_stand_closer),
          (set_show_messages, 1),
          ], []
      ),

      (0.1, 0, ti_once, [
          (store_skill_level,":player_sneaking_skill","skl_athletics","trp_player"),
        #  (val_min, ":player_sneaking_skill", 0),

          (try_begin),
            (eq,":player_sneaking_skill",10),
            (assign,":sneak_distance",5400),
          (else_try),
            (eq,":player_sneaking_skill",9),
            (assign,":sneak_distance",5600),
          (else_try),
            (eq,":player_sneaking_skill",8),
            (assign,":sneak_distance",5800),
          (else_try),
            (eq,":player_sneaking_skill",7),
            (assign,":sneak_distance",6000),
          (else_try),
            (eq,":player_sneaking_skill",6),
            (assign,":sneak_distance",6200),
          (else_try),
            (eq,":player_sneaking_skill",5),
            (assign,":sneak_distance",6400),
          (else_try),
            (eq,":player_sneaking_skill",4),
            (assign,":sneak_distance",6600),
          (else_try),
            (eq,":player_sneaking_skill",3),
            (assign,":sneak_distance",6800),
          (else_try),
            (eq,":player_sneaking_skill",2),
            (assign,":sneak_distance",7000),
          (else_try),
            (eq,":player_sneaking_skill",1),
            (assign,":sneak_distance",7400),
          (else_try),
            (assign,":sneak_distance",8000),
          (try_end),
          (get_player_agent_no,":player_agent"),
          (agent_get_position,pos1,":player_agent"),
          (assign,":continue",0),
          (try_for_agents, ":cur_agent"),
            (agent_get_team, ":team", ":cur_agent"),
            (eq, ":team", 2),
            (agent_get_position,pos2,":cur_agent"),
            (get_distance_between_positions,":distance",pos1,pos2),
            (lt,":distance",":sneak_distance"),
            (agent_set_team, ":cur_agent", 1),
            (agent_ai_set_aggressiveness, ":cur_agent", 9),
            (assign,":continue",1),
          (try_end),
          (eq,":continue",1),
        ],
        [
          (set_party_battle_mode),
      ]),

      (1, 4, ti_once,
        [
          (this_or_next|main_hero_fallen),
          (all_enemies_defeated, 5),
          (eq, "$cam_mode", 0),
        ],
        [
          (try_begin),
            (main_hero_fallen),
            (assign, "$g_campaign_death", 1),
            (jump_to_menu, "mnu_captivity_wilderness_taken_prisoner"),
          (else_try),
            ##         (set_mission_result,1),
            ##         (assign, "$g_battle_result", 1),
            (jump_to_menu, "mnu_emboscada_player"),
          (try_end),
          (finish_mission,0),
      ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),


      (0, 0, ti_once, [],
        [
          (call_script, "script_music_set_situation_with_culture", 0),
      ]),

      (0, 0, ti_once, [
          (tutorial_message_set_size, 15, 15),
          (tutorial_message_set_position, 500, 650), #650 for tutorial or mission msg, 450 for dialogs
          (tutorial_message_set_center_justify, 0),
          (assign, "$cam_time", 0), #for cam times
          ], []),

      (0,0,ti_once,[ (store_mission_timer_a, ":cur_time"),
          (ge, ":cur_time", 4),
        ],
        [
          (tutorial_message_set_background, 1),
          (tutorial_message, "@Your mission is to ambush the enemy when they come for water supplies. " +
          "If you feel lost at some point, press the K key to remember these goals."),
          (set_fixed_point_multiplier, 100),
          (assign, "$cam_time", 1),
          (entry_point_get_position, pos7, 31),
          (call_script, "script_save_cam_first_person_mode"),
          (mission_cam_set_mode, 1, 0, 0),
          (set_camera_in_first_person, 0),
          (mission_cam_animate_to_position, pos7, 2500, 0),
      ]),

      (0,0,0,[ (key_clicked, key_k),],
        [
          (tutorial_message_set_background, 1),
          (tutorial_message, "@Your mission is to ambush the enemy when they come for water supplies. " +
          "If you feel lost at some point, press the K key to remember these goals."),

          (assign, "$cam_time", 1),
          (entry_point_get_position, pos7, 31),
          (call_script, "script_save_cam_first_person_mode"),
          (mission_cam_set_mode, 1, 0, 0),
          (set_camera_in_first_person, 0),
          (mission_cam_animate_to_position, pos7, 2500, 0),
      ]),

      (0,10,0,[(eq, "$cam_time", 1),],
        [
          (tutorial_message, -1),
          (tutorial_message_set_background, 0),
          (call_script, "script_return_to_cam_first_person_mode_1_sec"),
          (assign, "$cam_time", 0),
      ]),

    ],
  ),

     (
    "asturis_ruins",mtf_battle_mode,-1,
    "asturis",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #player

   (1,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (2,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (3,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (4,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (5,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (6,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slave hunter
   (7,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (8,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (9,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (10,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (11,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (12,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (13,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (14,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slave crusher
   (15,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (16,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (17,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slaver chief
   (18,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (19,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (20,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (21,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (22,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (23,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),
   (24,mtef_visitor_source|mtef_team_2,af_override_horse,0,1,[]),#slave crusher
     ], vc_weather +
    [


      (ti_before_mission_start, 0, 0, [],
       [
     (assign,"$g_battle_result",0),
     (team_set_relation, 0, 2, -1), # -1 for enemy, 1 for friend, 0 for neutral
     (team_set_relation,1,2,0),
     (team_set_relation,0,1,0),
         ]),

  (0, 0, ti_once,
          [
          (assign, "$defender_team_2", 2),
          ], []
  ),

  (0, 0, ti_once,
          [
          (set_show_messages, 0),
          (team_give_order, "$defender_team_2", grc_infantry, mordr_stand_ground),
          (team_give_order, "$defender_team_2", grc_archers, mordr_stand_ground),
          (team_give_order, "$defender_team_2", grc_cavalry, mordr_stand_ground),
          (set_show_messages, 1),
          ], []
  ),

                        (0.1, 0, ti_once, [
            (store_skill_level,":player_sneaking_skill","skl_athletics","trp_player"),


                       (try_begin),
                       (eq,":player_sneaking_skill",10),
                (assign,":sneak_distance",500),
            (else_try),
                (eq,":player_sneaking_skill",9),
                (assign,":sneak_distance",600),
            (else_try),
                (eq,":player_sneaking_skill",8),
                (assign,":sneak_distance",700),
            (else_try),
                (eq,":player_sneaking_skill",7),
                (assign,":sneak_distance",800),
            (else_try),
                (eq,":player_sneaking_skill",6),
                (assign,":sneak_distance",900),
            (else_try),
                (eq,":player_sneaking_skill",5),
                (assign,":sneak_distance",1000),
            (else_try),
                (eq,":player_sneaking_skill",4),
                (assign,":sneak_distance",1100),
            (else_try),
                (eq,":player_sneaking_skill",3),
                (assign,":sneak_distance",1200),
            (else_try),
                (eq,":player_sneaking_skill",2),
                (assign,":sneak_distance",1300),
            (else_try),
                (eq,":player_sneaking_skill",1),
                (assign,":sneak_distance",1400),
            (else_try),
                (assign,":sneak_distance",1500),
           (try_end),
        (get_player_agent_no,":player_agent"),
  (agent_get_position,pos1,":player_agent"),
  (assign,":continue",0),
  (try_for_agents, ":cur_agent"),
    (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
    (this_or_next|eq, ":cur_agent_troop", "trp_unique_bandit_2"),
    (this_or_next|eq, ":cur_agent_troop", "trp_robber"),
    (this_or_next|eq, ":cur_agent_troop", "trp_rich_bandit"),
    (this_or_next|eq, ":cur_agent_troop", "trp_brigand"),
    (this_or_next|eq, ":cur_agent_troop", "trp_bandit"),
    (eq, ":cur_agent_troop", "trp_robber"),
    (agent_get_position,pos2,":cur_agent"),
    (get_distance_between_positions,":distance",pos1,pos2),
    (lt,":distance",":sneak_distance"),
    (assign,":continue",1),
  (try_end),
  (eq,":continue",1),
            ],
           [(set_party_battle_mode),
            (try_for_agents, ":cur_agent"),
              (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
              (eq, ":cur_agent_troop", "trp_brigand"),
              (agent_set_team, ":cur_agent", 2),
            (try_end),
             ]),

#TEMPERED      SETUP KEY AGENTS

    (0,0,ti_once,[],
    [ (mission_enable_talk),
      (assign, "$talk_context", tc_hero_freed),
      (try_for_agents,":cur_agent"),
        (agent_get_troop_id,":cur_troop_id",":cur_agent"),
        (try_begin),
          (eq,":cur_troop_id","trp_brigand"),
          (assign,"$slaver_1",":cur_agent"),
        (else_try),
          (eq,":cur_troop_id","trp_rich_bandit"),
          (assign,"$slaver_2",":cur_agent"),
        (else_try),
          (eq,":cur_troop_id","trp_unique_bandit_2"),
          (assign,"$slaver_3",":cur_agent"),
        (try_end),
      (try_end),
    ]),

#TEMPERED     CHECK FOR DEFEAT AGAINST GUARDS
    (5, 3, ti_once,
     [
     (main_hero_fallen,0),
     (assign,"$g_spy_rescue_active",-2),
     (assign,"$g_battle_result",-1),
     (assign,"$g_encountered_party",-1),
    (call_script, "script_change_troop_renown", "trp_player", -5),
    (display_message, "@ Bandits strike you with anger and you fall into a puddle of blood. They think you're dead...",color_good_news),
    (store_troop_gold, ":gold", "trp_player"),
    (try_begin),
    (ge, ":gold", 100),
    (troop_remove_gold, "trp_player", 100),
    (else_try),
    (call_script, "script_change_troop_renown", "trp_player", -5),
    (try_end),
     ],
     [
      (finish_mission),
       ]),

#TEMPERED     SCRIPT PRISONERS TO FOLLOW PLAYER
    (1,1,1,[],
    [(get_player_agent_no,":player_agent"),
     (agent_get_position,pos1,":player_agent"),
     (try_for_agents,":cur_agent"),
     (agent_get_team  ,":team_no",":cur_agent"),
     (agent_get_wielded_item,":has_weapon",":cur_agent",0),#Tempered get right hand weapon (-1 for none)
      (try_begin),
        (neq,":cur_agent",":player_agent"),
        (eq,":team_no",0),
        (eq,":has_weapon",-1),
          (agent_set_scripted_destination,":cur_agent",pos1,1),
      (try_end),
     (try_end),
     ]),
#TEMPERED RELEASE PRISONERS FROM SCRIPTED MODE

   (2,0,0,[],
    [(get_player_agent_no,":player_agent"),
     (try_for_agents,":cur_agent"),
     (agent_get_team  ,":team_no",":cur_agent"),
     (agent_get_wielded_item,":has_weapon",":cur_agent",0),
      (try_begin),
        (neq,":cur_agent",":player_agent"),
        (eq,":team_no",0),
        (neq,":has_weapon",-1),
          (agent_clear_scripted_mode,":cur_agent"),
      (try_end),
     (try_end),
     ]),

#TEMPERED     CHECK FOR VICTORY OVER GUARDS
    ( 1, 1, ti_once,
     [
     (num_active_teams_le, 2),
     (neg|main_hero_fallen),
      ],
        [
     (assign, "$g_battle_result", 1),
     (assign,"$g_encountered_party",-1),
    ]),

      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

      (2, 0, ti_once, [ (neg|agent_is_alive,"$slaver_3"),],
     [
        (display_message,"@__You have killed the leader of this group of bandits, a hun by the name of Tutizar. His pillaging has finally come to a bloody end.",color_good_news),
        (call_script, "script_change_player_honor", 15),
        (call_script, "script_change_troop_renown", "trp_player", 25),
        (call_script, "script_troop_add_gold", "trp_player", 800),
        (mission_disable_talk),
        (assign,"$asturis_ruins",1),
       ]),

(0, 0, 0,[(key_clicked, key_k),
            (tutorial_message, "@ "),
], []),
    ],
  ),

#madsci VC sea bttles
  ("sea_battle",mtf_battle_mode,charge,		#|mtf_synch_inventory
    "You lead your men to sea battle.",
    [
      (1,mtef_defenders|mtef_team_0,af_override_horse, 0,60,[]),
      (0,mtef_defenders|mtef_team_0,af_override_horse,0,0,[]),
      (4,mtef_attackers|mtef_team_1,af_override_horse, 0,60,[]),
      (4,mtef_attackers|mtef_team_1,af_override_horse,0,0,[]),
    ], vc_weather + core_ship_system +
    [
      cannot_spawn_commoners,
      common_disable_ai_crouching,
      common_controller_keys_end,
      common_controller_keys,

      #common_renown_loss,

      (ti_before_mission_start, 0, 0, [],[
        (assign, "$coastal_battle", 0),
        #(assign, "$player_functions", player_func_trait),
      ]),

      common_maritime_randomize_spawn_points,
      common_maritime_spawn,
      common_maritime_ui,
      common_maritime_reinforcements,
      common_maritime_drowning,
      common_maritime_commands,
      common_maritime_deselect_all,

      common_battle_tab_press,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_battle_check_friendly_kills,
      common_battle_init_banner,
      # common_battle_inventory,
      common_battle_player_fallen,
      common_after_mission_start,

      #common_music_situation_update,

      (0, 0, ti_once, [], [
        (play_sound,"snd_ambient_sea_loop"),
        (store_last_sound_channel, "$ambiance_channel"),
      ]),

      (ti_question_answered, 0, 0, [],
        [(store_trigger_param_1,":answer"),
          (eq,":answer",0),
          (assign, "$pin_player_fallen", 0),
          (try_begin),
            (store_mission_timer_a, ":elapsed_time"),
            (gt, ":elapsed_time", 20),
            (str_store_string, s5, "str_retreat"),
            (call_script, "script_simulate_retreat", 10, 20, 1),
          (try_end),
          (call_script, "script_count_mission_casualties_from_agents"),
          (stop_all_sounds),  #ambient_end_sound
          (finish_mission,0),]),

      (ti_before_mission_start, 0, 0, [],
        [
          (team_set_relation, 0, 2, 1),
          (team_set_relation, 1, 3, 1),
          #(call_script, "script_place_player_banner_near_inventory_bms"),

          (party_clear, "p_routed_enemies"),

          (assign, "$g_latest_order_1", 1),
          (assign, "$g_latest_order_2", 1),
          (assign, "$g_latest_order_3", 1),
          (assign, "$g_latest_order_4", 1),
      ]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
          (assign,"$defender_reinforcement_stage",0),
          (assign,"$attacker_reinforcement_stage",0),
          #(call_script, "script_place_player_banner_near_inventory"),
          (call_script, "script_combat_music_set_situation_with_culture"),
          (assign, "$g_defender_reinforcement_limit", 2),
      ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
        [
          (store_trigger_param_1, ":dead_agent_no"),
          (store_trigger_param_2, ":killer_agent_no"),
          (try_begin),
            (ge, ":dead_agent_no", 0),
            (neg|agent_is_ally, ":dead_agent_no"),
            (agent_is_human, ":dead_agent_no"),
            (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
            (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
            (agent_slot_eq, ":dead_agent_no", slot_agent_vc_wounded, 1),	#new
            (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1),
          (try_end),
          #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
        (call_script, "script_apply_death_effect_on_courage_scores_vc", ":dead_agent_no", ":killer_agent_no"), #madsci
      ]),

    ] + camera_controls #+ battle_mode_triggers		#Lets not add this now. I think it will cause bugs
  ),

("haddingr_duel",mtf_battle_mode,-1,
  "plundering a settlement",[
    (0,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (3,mtef_visitor_source|mtef_team_1,af_override_horse|af_override_weapons,aif_start_alarmed,1,[]),#player, override weapons
    (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (17,mtef_visitor_source|mtef_team_1,af_override_horse|af_override_weapons,aif_start_alarmed,1,[]),#player, override weapons
    (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
  ],vc_weather + [
    (0, 0, ti_once,[],[
      (get_player_agent_no, ":player"),
      (agent_set_speed_modifier,":player", 0),
      (agent_set_horse_speed_factor, ":player", 0),
      (agent_set_no_death_knock_down_only, ":player", 1),
    ]),

    (ti_before_mission_start,0,0,[],[
      (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
      (team_set_relation, 0,1,1),
      (team_set_relation, 1,0,1),
      (team_set_relation, 2,1,1),
      (team_set_relation, 1,2,1),
      (team_set_relation, 3,1,1),
      (team_set_relation, 1,3,1),
      (team_set_relation, 3,2,1),
      (team_set_relation, 2,3,1),
    ]),

    (ti_tab_pressed, 0, 0, [],[
      (display_message,"str_cannot_leave_now"),
    ]),

    (0, 2.5, ti_once,[
      (neg|conversation_screen_is_active),
    ],[
      (mission_enable_talk),
      (start_mission_conversation, "$temp"),
    ]),
    common_inventory_not_available,


    (ti_on_agent_knocked_down, 0, 0, [],[
      (store_trigger_param_1, ":dead_agent"),
      (agent_get_troop_id, ":troop", ":dead_agent"),
      (try_begin),
        (eq, ":troop", "trp_augundzi_king"),
        (assign, ":speed", 100),
        (try_begin),
          (quest_slot_eq, "qst_haddingrs_revenge", slot_quest_current_state, 34),
          (agent_get_speed_modifier, ":speed", ":dead_agent"),
          (val_sub, ":speed", 25),
          (val_max, ":speed", 25),
          (agent_set_speed_modifier, ":dead_agent", ":speed"),
          (val_add, "$temp2", 1),
        (else_try),
          (quest_slot_eq, "qst_haddingrs_revenge", slot_quest_current_state, 35),
          (neg|conversation_screen_is_active),
          (mission_enable_talk),
          (start_mission_conversation, "trp_dani_haddingr"),
        (try_end),
      (try_end),
      (try_begin),
        (ge, "$temp2", 3),
        (quest_slot_eq, "qst_haddingrs_revenge", slot_quest_current_state, 34),
        (neg|conversation_screen_is_active),
        (mission_enable_talk),
        (start_mission_conversation, "trp_augundzi_king"),
        (team_set_relation, 2, 3, 1),
        (team_set_relation, 3, 2, 1),
      (try_end),
    ]),
    (ti_on_agent_killed_or_wounded, 0, 0, [],[
      (store_trigger_param_1, ":dead_agent"),
      (agent_get_troop_id, ":troop", ":dead_agent"),
      (try_begin),
        (eq, ":troop", "trp_dani_king"),
        (mission_enable_talk),
        (start_mission_conversation, "trp_augundzi_king"),
        (set_trigger_result, 1),
      (else_try),
        (eq, ":troop", "trp_augundzi_king"),
        (try_begin),
          (quest_slot_eq, "qst_haddingrs_revenge", slot_quest_current_state, 35),
          (neg|conversation_screen_is_active),
          (mission_enable_talk),
          (start_mission_conversation, "trp_dani_haddingr"),
          (set_trigger_result, 1),
        (try_end),
      (try_end),
    ]),
]),

("haddingr_giant_hall",mtf_battle_mode,-1,
  "plundering a settlement",[
    (0,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (2,mtef_visitor_source|mtef_team_2,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (3,mtef_visitor_source|mtef_team_3,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#player
    (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#guard
	  (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#legatus
    (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#unused
    (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
    (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),#spectators
  ],vc_weather + [
    (ti_before_mission_start,0,0,[],[
      (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
      (team_set_relation, 0,1,1),
      (team_set_relation, 1,0,1),
      (team_set_relation, 2,1,1),
      (team_set_relation, 1,2,1),
      (team_set_relation, 3,1,1),
      (team_set_relation, 1,3,1),
      (team_set_relation, 3,2,-1),
      (team_set_relation, 2,3,-1),
    ]),
    (ti_tab_pressed, 0, 0, [],[
      (try_begin),
        (ge, "$g_battle_result", 5),
        (mission_disable_talk),
        (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
        (finish_mission, 3),
      (else_try),
        (tutorial_box, "@Cannot leave now. Talk with all heroes first.", "@Hint"),
      (try_end),
    ]),
    (0, 2.5, ti_once,[
      (neg|conversation_screen_is_active),
    ],[
      (mission_enable_talk),
      (start_mission_conversation, "$temp"),
    ]),
    common_inventory_not_available,
    (ti_on_agent_spawn, 0, 0, [],[
      (store_trigger_param_1, ":agent"),
      (agent_is_active, ":agent"),
      (agent_get_troop_id, ":troop", ":agent"),
      (this_or_next|eq, ":troop", "trp_scandinavian_comes"),
      (eq, ":troop", "trp_dani_haddingr"),
      (agent_set_no_death_knock_down_only, ":agent", 1),
      (agent_set_damage_modifier, ":agent", 50),
      (agent_set_speed_modifier, ":agent", 75),
      (agent_ai_set_always_attack_in_melee, ":agent", 1),
    ]),
]),

("travel_cutscene",mtf_battle_mode,-1,
  "Watch troops marching from A to B",[
    (0,mtef_visitor_source,0,0,1,[]),
    (1,mtef_scene_source,af_override_horse,0,1,[]),
    (2,mtef_visitor_source,0,0,1,[]),
    (3,mtef_visitor_source,0,0,1,[]),
    (4,mtef_visitor_source,0,0,1,[]),
    (5,mtef_visitor_source,0,0,1,[]),
    (6,mtef_visitor_source,0,0,1,[]),
    (7,mtef_visitor_source,0,0,1,[]),
    (8,mtef_visitor_source,0,0,1,[]),
    (9,mtef_visitor_source,0,0,1,[]),
    (10,mtef_visitor_source,0,0,1,[]),
    (11,mtef_visitor_source,0,0,1,[]),
    (12,mtef_visitor_source,0,0,1,[]),
    (13,mtef_visitor_source,0,0,1,[]),
    (14,mtef_visitor_source,0,0,1,[]),
    (15,mtef_visitor_source,0,0,1,[]),
    (16,mtef_visitor_source,0,0,1,[]),
    (17,mtef_visitor_source,0,0,1,[]),
    (18,mtef_visitor_source,0,0,1,[]),
    (19,mtef_visitor_source,0,0,1,[]),
    (20,mtef_visitor_source,0,0,1,[]),
    (21,mtef_visitor_source,0,0,1,[]),
    (22,mtef_visitor_source,0,0,1,[]),
    (23,mtef_visitor_source,0,0,1,[]),
    (24,mtef_visitor_source,0,0,1,[]),
    (25,mtef_visitor_source,0,0,1,[]),
    (26,mtef_visitor_source,0,0,1,[]),
    (27,mtef_visitor_source,0,0,1,[]),
    (28,mtef_visitor_source,0,0,1,[]),
    (29,mtef_visitor_source,0,0,1,[]),
    (30,mtef_visitor_source,0,0,1,[]),
  ],vc_weather +
  [
    cannot_spawn_commoners,

    (ti_before_mission_start, 0, 0, [],[
      (scene_set_day_time, 14),
      (set_global_cloud_amount, 0),
    ]),

    (ti_tab_pressed,0,0,[],[
      (show_object_details_overlay, 1),
      (jump_to_menu, "$g_next_menu"),
      (finish_mission),
    ]),

    (ti_after_mission_start,0,0,[],[
      (show_object_details_overlay, 0),
    ]),

    (0, 0, ti_once,[],[
      (play_track, "track_finnsburg_hengist_revenge",2),

      (set_fixed_point_multiplier, 100),
      (init_position, pos1),
      (entry_point_get_position, pos1, 20),

      (try_for_range, ":unused", 0, 7), #ranks
        (try_for_range, ":unused2", 0, 3), #columns
          (set_spawn_position, pos1),
          (try_begin),
            (eq, ":unused", 0),
            (try_begin),
              (eq, ":unused2", 0),
              (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 1),
              (gt, ":troop_to_spawn", 0),
              (spawn_agent, ":troop_to_spawn"),
              (assign, ":cur_agent", reg0),
            (else_try),
              (eq, ":unused2", 1),
              (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 2),
              (gt, ":troop_to_spawn", 0),
              (spawn_agent, ":troop_to_spawn"),
              (assign, ":cur_agent", reg0),
            (else_try),
              (eq, ":unused2", 2),
              (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 3),
              (gt, ":troop_to_spawn", 0),
              (spawn_agent, ":troop_to_spawn"),
              (assign, ":cur_agent", reg0),
            (try_end),
            (agent_get_horse, ":horse", ":cur_agent"),
            (try_begin),
              (neg|agent_is_active, ":horse"),
              (agent_set_speed_modifier,":cur_agent", 500),
              (agent_set_speed_limit, ":cur_agent", 9),
            (else_try),
              (agent_set_speed_modifier,":cur_agent", 500),
              (agent_set_horse_speed_factor, ":cur_agent", 500),
              (agent_set_speed_limit, ":cur_agent", 19),
            (try_end),
          (else_try),
            (eq, ":unused", 1),
            (try_begin),
              (eq, ":unused2", 0),
              (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 4),
              (gt, ":troop_to_spawn", 0),
              (spawn_agent, ":troop_to_spawn"),
              (assign, ":cur_agent", reg0),
            (else_try),
              (eq, ":unused2", 1),
              (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 5),
              (gt, ":troop_to_spawn", 0),
              (spawn_agent, ":troop_to_spawn"),
              (assign, ":cur_agent", reg0),
            (else_try),
              (eq, ":unused2", 2),
              (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 7),
              (gt, ":troop_to_spawn", 0),
              (spawn_agent, ":troop_to_spawn"),
              (assign, ":cur_agent", reg0),
            (try_end),
            (agent_get_horse, ":horse", ":cur_agent"),
            (try_begin),
              (neg|agent_is_active, ":horse"),
              (agent_set_speed_modifier,":cur_agent", 500),
              (agent_set_speed_limit, ":cur_agent", 9),
            (else_try),
              (agent_set_speed_modifier,":cur_agent", 500),
              (agent_set_horse_speed_factor, ":cur_agent", 500),
              (agent_set_speed_limit, ":cur_agent", 19),
            (try_end),
          (else_try),
            (troop_get_slot, ":troop_to_spawn", "trp_temp_array_c", 6),
            (gt, ":troop_to_spawn", 0),
            (spawn_agent, ":troop_to_spawn"),
            (assign, ":cur_agent", reg0),
            (agent_get_horse, ":horse", ":cur_agent"),
            (try_begin),
              (neg|agent_is_active, ":horse"),
              (agent_set_speed_modifier,":cur_agent", 500),
              (agent_set_speed_limit, ":cur_agent", 9),
            (else_try),
              (agent_set_speed_modifier,":cur_agent", 500),
              (agent_set_horse_speed_factor, ":cur_agent", 500),
              (agent_set_speed_limit, ":cur_agent", 19),
            (try_end),
          (try_end),
          (position_move_x, pos1, 250), #2.5m between columns
        (try_end),
        # get back to first column of previous rank
        (position_move_x, pos1, -1000), #4x2.5m
        (position_move_y, pos1, -250), #next rank 2.5m behind
      (try_end),
    ]),

    (0,0,ti_once,[],[
      (get_player_agent_no, ":player"),
      (call_script, "script_advanced_agent_set_speed_modifier", ":player", 0),
      (agent_set_visibility, ":player", 0),
      (agent_set_no_death_knock_down_only, ":player", 1),
    ]),

    (0,0,0,[],[
      (store_mission_timer_a, ":cur_time"),
      (set_fixed_point_multiplier, 100),
      (try_begin),
          (eq, "$tutorial_state", 5),
          (ge, ":cur_time", 71),
          (jump_to_menu, "$g_next_menu"),
          (mission_cam_animate_to_screen_color, 0xFF000000, 2000),
          (show_object_details_overlay,1),
          (finish_mission, 3),
          (val_add, "$tutorial_state", 1),
      (else_try),
          (ge, ":cur_time", 68),
          (eq, "$tutorial_state", 4),
          (set_fixed_point_multiplier, 1000),
          (entry_point_get_position, pos9, 30),
          (mission_cam_animate_to_position, pos9, 6000, 0),
          (val_add, "$tutorial_state", 1),
      (else_try),
          (ge, ":cur_time", 45),
          (eq, "$tutorial_state", 3),
          (set_fixed_point_multiplier, 1000),
          (entry_point_get_position, pos9, 29),
          (mission_cam_animate_to_position, pos9, 25000, 0),
          (val_add, "$tutorial_state", 1),
      (else_try),
          (ge, ":cur_time", 23),
          (eq, "$tutorial_state", 2),
          (entry_point_get_position, pos9, 28),
          (mission_cam_animate_to_position, pos9, 25000, 0),
          (val_add, "$tutorial_state", 1),
      (else_try),
          (ge, ":cur_time", 1),
          (eq, "$tutorial_state", 1),
          (entry_point_get_position, pos9, 27),
          (mission_cam_animate_to_position, pos9, 25000, 0),
          (val_add, "$tutorial_state", 1),
      (else_try),
          (eq, "$tutorial_state", 0),
          (set_fixed_point_multiplier, 1000),
          # march the troops down the bridge
          (entry_point_get_position, pos1, 25),
          (try_for_agents, ":agent_no"), # find everyone and march them off
              (agent_get_troop_id, ":agent_troop", ":agent_no"),
              (this_or_next|troop_slot_eq, "trp_temp_array_c", 1, ":agent_troop"),
              (this_or_next|troop_slot_eq, "trp_temp_array_c", 2, ":agent_troop"),
              (this_or_next|troop_slot_eq, "trp_temp_array_c", 3, ":agent_troop"),
              (this_or_next|troop_slot_eq, "trp_temp_array_c", 4, ":agent_troop"),
              (this_or_next|troop_slot_eq, "trp_temp_array_c", 5, ":agent_troop"),
              (this_or_next|troop_slot_eq, "trp_temp_array_c", 6, ":agent_troop"),
              (troop_slot_eq, "trp_temp_array_c", 7, ":agent_troop"),
              (store_random_in_range, ":r", 0, 1000),
              (val_mul, ":r", -1),
              (position_move_x, pos1, ":r"), # correction for angle numerical loss
              (val_mul, ":r", -1),
              (position_move_y, pos1, ":r"),
              (agent_set_scripted_destination, ":agent_no", pos1, 1),
              (entry_point_get_position, pos1, 25),
          (try_end),
          (call_script, "script_save_cam_first_person_mode"),
          (mission_cam_set_mode, 1, 0, 0),
          (set_camera_in_first_person, 0),
          (init_position, pos10),
          (entry_point_get_position, pos10, 26),
          (mission_cam_set_position, pos10),
          (val_add, "$tutorial_state", 1),
      (try_end),
    ]),
    common_inventory_not_available,
]),

]#end of file
